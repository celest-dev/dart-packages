// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type
// ignore_for_file: unnecessary_non_null_assertion

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for glib on Linux.
///
/// Regenerate bindings with `dart run ffigen --config=ffigen.glib.yaml`.
///
class Glib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Glib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Glib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void g_error_free(
    ffi.Pointer<GError> error,
  ) {
    return _g_error_free(
      error,
    );
  }

  late final _g_error_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GError>)>>(
          'g_error_free');
  late final _g_error_free =
      _g_error_freePtr.asFunction<void Function(ffi.Pointer<GError>)>();

  void g_app_info_launch_default_for_uri_async(
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<_GAppLaunchContext> context,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_app_info_launch_default_for_uri_async(
      uri,
      context,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_app_info_launch_default_for_uri_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<_GAppLaunchContext>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_app_info_launch_default_for_uri_async');
  late final _g_app_info_launch_default_for_uri_async =
      _g_app_info_launch_default_for_uri_asyncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<_GAppLaunchContext>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_app_info_launch_default_for_uri_finish(
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_launch_default_for_uri_finish(
      result,
      error,
    );
  }

  late final _g_app_info_launch_default_for_uri_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_launch_default_for_uri_finish');
  late final _g_app_info_launch_default_for_uri_finish =
      _g_app_info_launch_default_for_uri_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<_GApplication> g_application_get_default() {
    return _g_application_get_default();
  }

  late final _g_application_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<_GApplication> Function()>>(
          'g_application_get_default');
  late final _g_application_get_default = _g_application_get_defaultPtr
      .asFunction<ffi.Pointer<_GApplication> Function()>();
}

typedef gint = ffi.Int;
typedef Dartgint = int;
typedef gboolean = gint;
typedef gpointer = ffi.Pointer<ffi.Void>;

final class GError extends ffi.Struct {
  @ffi.UnsignedInt()
  external int domain;

  @gint()
  external int code;

  external ffi.Pointer<pkg_ffi.Utf8> message;
}

final class _GData extends ffi.Opaque {}

final class GList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GList> next;

  external ffi.Pointer<GList> prev;
}

final class GHashTable extends ffi.Opaque {}

/// Basic Type Structures
/// /
/// /**
/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
final class _GTypeClass extends ffi.Struct {
  /// < private >
  @ffi.UnsignedLong()
  external int g_type;
}

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
final class _GTypeInstance extends ffi.Struct {
  /// < private >
  external ffi.Pointer<_GTypeClass> g_class;
}

final class GObject extends ffi.Struct {
  external _GTypeInstance g_type_instance;

  /// (atomic)
  @ffi.UnsignedInt()
  external int ref_count;

  external ffi.Pointer<_GData> qdata;
}

final class _GAppLaunchContextPrivate extends ffi.Opaque {}

/// GAppLaunchContext:
///
/// Integrating the launch with the launching application. This is used to
/// handle for instance startup notification and launching the new application
/// on the same screen as the launching window.
final class _GAppLaunchContext extends ffi.Struct {
  external GObject parent_instance;

  /// < private >
  external ffi.Pointer<_GAppLaunchContextPrivate> priv;
}

final class GAsyncResult extends ffi.Opaque {}

final class _GCancellablePrivate extends ffi.Opaque {}

final class GCancellable extends ffi.Struct {
  external GObject parent_instance;

  /// < private >
  external ffi.Pointer<_GCancellablePrivate> priv;
}

final class _GApplicationPrivate extends ffi.Opaque {}

final class _GApplication extends ffi.Struct {
  /// < private >
  external GObject parent_instance;

  external ffi.Pointer<_GApplicationPrivate> priv;
}

/// GAsyncReadyCallback:
/// @source_object: (nullable): the object the asynchronous operation was started with.
/// @res: a #GAsyncResult.
/// @data: user data passed to the callback.
///
/// Type definition for a function that will be called back when an asynchronous
/// operation within GIO has been completed. #GAsyncReadyCallback
/// callbacks from #GTask are guaranteed to be invoked in a later
/// iteration of the thread-default main context
/// (see [method@GLib.MainContext.push_thread_default])
/// where the #GTask was created. All other users of
/// #GAsyncReadyCallback must likewise call it asynchronously in a
/// later iteration of the main context.
///
/// The asynchronous operation is guaranteed to have held a reference to
/// @source_object from the time when the `*_async()` function was called, until
/// after this callback returns.
typedef GAsyncReadyCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<GObject> source_object,
            ffi.Pointer<GAsyncResult> res, gpointer data)>>;
