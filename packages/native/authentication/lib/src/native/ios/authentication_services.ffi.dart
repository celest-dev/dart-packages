// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSTimer(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_UIImage(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_objcObjCObject(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_UIAction(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSDate_bool_bool(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSError1(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    wrapListenerBlock_ObjCBlock_ffiVoid_NSURL_NSError(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

/// UIDevice
class UIDevice extends objc.NSObject {
  UIDevice._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIDevice] that points to the same underlying object as [other].
  UIDevice.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIDevice] that wraps the given raw object pointer.
  UIDevice.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIDevice].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIDevice);
  }

  /// currentDevice
  static UIDevice getCurrentDevice() {
    final _ret = _objc_msgSend_1(_class_UIDevice, _sel_currentDevice);
    return UIDevice.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// model
  objc.NSString get model {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_model);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedModel
  objc.NSString get localizedModel {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_localizedModel);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemName
  objc.NSString get systemName {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_systemName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemVersion
  objc.NSString get systemVersion {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_systemVersion);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// orientation
  UIDeviceOrientation get orientation {
    final _ret = _objc_msgSend_3(this.ref.pointer, _sel_orientation);
    return UIDeviceOrientation.fromValue(_ret);
  }

  /// identifierForVendor
  NSUUID? get identifierForVendor {
    final _ret = _objc_msgSend_10(this.ref.pointer, _sel_identifierForVendor);
    return _ret.address == 0
        ? null
        : NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// isGeneratingDeviceOrientationNotifications
  bool get generatesDeviceOrientationNotifications {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_isGeneratingDeviceOrientationNotifications);
  }

  /// beginGeneratingDeviceOrientationNotifications
  void beginGeneratingDeviceOrientationNotifications() {
    _objc_msgSend_12(
        this.ref.pointer, _sel_beginGeneratingDeviceOrientationNotifications);
  }

  /// endGeneratingDeviceOrientationNotifications
  void endGeneratingDeviceOrientationNotifications() {
    _objc_msgSend_12(
        this.ref.pointer, _sel_endGeneratingDeviceOrientationNotifications);
  }

  /// isBatteryMonitoringEnabled
  bool get batteryMonitoringEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isBatteryMonitoringEnabled);
  }

  /// setBatteryMonitoringEnabled:
  set batteryMonitoringEnabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setBatteryMonitoringEnabled_, value);
  }

  /// batteryState
  UIDeviceBatteryState get batteryState {
    final _ret = _objc_msgSend_14(this.ref.pointer, _sel_batteryState);
    return UIDeviceBatteryState.fromValue(_ret);
  }

  /// batteryLevel
  double get batteryLevel {
    return objc.useMsgSendVariants
        ? _objc_msgSend_15Fpret(this.ref.pointer, _sel_batteryLevel)
        : _objc_msgSend_15(this.ref.pointer, _sel_batteryLevel);
  }

  /// isProximityMonitoringEnabled
  bool get proximityMonitoringEnabled {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_isProximityMonitoringEnabled);
  }

  /// setProximityMonitoringEnabled:
  set proximityMonitoringEnabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setProximityMonitoringEnabled_, value);
  }

  /// proximityState
  bool get proximityState {
    return _objc_msgSend_11(this.ref.pointer, _sel_proximityState);
  }

  /// isMultitaskingSupported
  bool get multitaskingSupported {
    return _objc_msgSend_11(this.ref.pointer, _sel_isMultitaskingSupported);
  }

  /// userInterfaceIdiom
  UIUserInterfaceIdiom get userInterfaceIdiom {
    final _ret = _objc_msgSend_16(this.ref.pointer, _sel_userInterfaceIdiom);
    return UIUserInterfaceIdiom.fromValue(_ret);
  }

  /// playInputClick
  void playInputClick() {
    _objc_msgSend_12(this.ref.pointer, _sel_playInputClick);
  }

  /// init
  UIDevice init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIDevice.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIDevice new1() {
    final _ret = _objc_msgSend_4(_class_UIDevice, _sel_new);
    return UIDevice.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIDevice allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIDevice, _sel_allocWithZone_, zone);
    return UIDevice.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIDevice alloc() {
    final _ret = _objc_msgSend_4(_class_UIDevice, _sel_alloc);
    return UIDevice.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIDevice = objc.getClass("UIDevice");
late final _sel_currentDevice = objc.registerName("currentDevice");
final _objc_msgSend_1 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_name = objc.registerName("name");
final _objc_msgSend_2 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_model = objc.registerName("model");
late final _sel_localizedModel = objc.registerName("localizedModel");
late final _sel_systemName = objc.registerName("systemName");
late final _sel_systemVersion = objc.registerName("systemVersion");

enum UIDeviceOrientation {
  UIDeviceOrientationUnknown(0),
  UIDeviceOrientationPortrait(1),
  UIDeviceOrientationPortraitUpsideDown(2),
  UIDeviceOrientationLandscapeLeft(3),
  UIDeviceOrientationLandscapeRight(4),
  UIDeviceOrientationFaceUp(5),
  UIDeviceOrientationFaceDown(6);

  final int value;
  const UIDeviceOrientation(this.value);

  static UIDeviceOrientation fromValue(int value) => switch (value) {
        0 => UIDeviceOrientationUnknown,
        1 => UIDeviceOrientationPortrait,
        2 => UIDeviceOrientationPortraitUpsideDown,
        3 => UIDeviceOrientationLandscapeLeft,
        4 => UIDeviceOrientationLandscapeRight,
        5 => UIDeviceOrientationFaceUp,
        6 => UIDeviceOrientationFaceDown,
        _ =>
          throw ArgumentError("Unknown value for UIDeviceOrientation: $value"),
      };
}

late final _sel_orientation = objc.registerName("orientation");
final _objc_msgSend_3 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSUUID
class NSUUID extends objc.NSObject {
  NSUUID._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSUUID] that points to the same underlying object as [other].
  NSUUID.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSUUID] that wraps the given raw object pointer.
  NSUUID.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSUUID].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_, _class_NSUUID);
  }

  /// UUID
  static NSUUID UUID() {
    final _ret = _objc_msgSend_4(_class_NSUUID, _sel_UUID);
    return NSUUID.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSUUID init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithUUIDString:
  NSUUID? initWithUUIDString_(objc.NSString string) {
    final _ret = _objc_msgSend_5(this.ref.retainAndReturnPointer(),
        _sel_initWithUUIDString_, string.ref.pointer);
    return _ret.address == 0
        ? null
        : NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithUUIDBytes:
  NSUUID initWithUUIDBytes_(ffi.Pointer<ffi.UnsignedChar> bytes) {
    final _ret = _objc_msgSend_6(
        this.ref.retainAndReturnPointer(), _sel_initWithUUIDBytes_, bytes);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// getUUIDBytes:
  void getUUIDBytes_(ffi.Pointer<ffi.UnsignedChar> uuid) {
    _objc_msgSend_7(this.ref.pointer, _sel_getUUIDBytes_, uuid);
  }

  /// compare:
  objc.NSComparisonResult compare_(NSUUID otherUUID) {
    final _ret =
        _objc_msgSend_8(this.ref.pointer, _sel_compare_, otherUUID.ref.pointer);
    return objc.NSComparisonResult.fromValue(_ret);
  }

  /// UUIDString
  objc.NSString get UUIDString {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_UUIDString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NSUUID new1() {
    final _ret = _objc_msgSend_4(_class_NSUUID, _sel_new);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSUUID allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSUUID, _sel_allocWithZone_, zone);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSUUID alloc() {
    final _ret = _objc_msgSend_4(_class_NSUUID, _sel_alloc);
    return NSUUID.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSUUID = objc.getClass("NSUUID");
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_UUID = objc.registerName("UUID");
final _objc_msgSend_4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_init = objc.registerName("init");
late final _sel_initWithUUIDString_ = objc.registerName("initWithUUIDString:");
final _objc_msgSend_5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> string)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithUUIDBytes_ = objc.registerName("initWithUUIDBytes:");
final _objc_msgSend_6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedChar> bytes)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedChar>)>();
late final _sel_getUUIDBytes_ = objc.registerName("getUUIDBytes:");
final _objc_msgSend_7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedChar> uuid)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedChar>)>();
late final _sel_compare_ = objc.registerName("compare:");
final _objc_msgSend_8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> otherUUID)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_UUIDString = objc.registerName("UUIDString");
late final _sel_new = objc.registerName("new");

final class _NSZone extends ffi.Opaque {}

late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone> zone)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
final _objc_msgSend_0 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> clazz)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
late final _sel_identifierForVendor = objc.registerName("identifierForVendor");
final _objc_msgSend_10 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isGeneratingDeviceOrientationNotifications =
    objc.registerName("isGeneratingDeviceOrientationNotifications");
final _objc_msgSend_11 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_beginGeneratingDeviceOrientationNotifications =
    objc.registerName("beginGeneratingDeviceOrientationNotifications");
final _objc_msgSend_12 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_endGeneratingDeviceOrientationNotifications =
    objc.registerName("endGeneratingDeviceOrientationNotifications");
late final _sel_isBatteryMonitoringEnabled =
    objc.registerName("isBatteryMonitoringEnabled");
late final _sel_setBatteryMonitoringEnabled_ =
    objc.registerName("setBatteryMonitoringEnabled:");
final _objc_msgSend_13 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();

enum UIDeviceBatteryState {
  UIDeviceBatteryStateUnknown(0),
  UIDeviceBatteryStateUnplugged(1),
  UIDeviceBatteryStateCharging(2),
  UIDeviceBatteryStateFull(3);

  final int value;
  const UIDeviceBatteryState(this.value);

  static UIDeviceBatteryState fromValue(int value) => switch (value) {
        0 => UIDeviceBatteryStateUnknown,
        1 => UIDeviceBatteryStateUnplugged,
        2 => UIDeviceBatteryStateCharging,
        3 => UIDeviceBatteryStateFull,
        _ =>
          throw ArgumentError("Unknown value for UIDeviceBatteryState: $value"),
      };
}

late final _sel_batteryState = objc.registerName("batteryState");
final _objc_msgSend_14 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_batteryLevel = objc.registerName("batteryLevel");
final _objc_msgSend_15 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_15Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isProximityMonitoringEnabled =
    objc.registerName("isProximityMonitoringEnabled");
late final _sel_setProximityMonitoringEnabled_ =
    objc.registerName("setProximityMonitoringEnabled:");
late final _sel_proximityState = objc.registerName("proximityState");
late final _sel_isMultitaskingSupported =
    objc.registerName("isMultitaskingSupported");

enum UIUserInterfaceIdiom {
  UIUserInterfaceIdiomUnspecified(-1),
  UIUserInterfaceIdiomPhone(0),
  UIUserInterfaceIdiomPad(1),
  UIUserInterfaceIdiomTV(2),
  UIUserInterfaceIdiomCarPlay(3),
  UIUserInterfaceIdiomMac(5),
  UIUserInterfaceIdiomVision(6);

  final int value;
  const UIUserInterfaceIdiom(this.value);

  static UIUserInterfaceIdiom fromValue(int value) => switch (value) {
        -1 => UIUserInterfaceIdiomUnspecified,
        0 => UIUserInterfaceIdiomPhone,
        1 => UIUserInterfaceIdiomPad,
        2 => UIUserInterfaceIdiomTV,
        3 => UIUserInterfaceIdiomCarPlay,
        5 => UIUserInterfaceIdiomMac,
        6 => UIUserInterfaceIdiomVision,
        _ =>
          throw ArgumentError("Unknown value for UIUserInterfaceIdiom: $value"),
      };
}

late final _sel_userInterfaceIdiom = objc.registerName("userInterfaceIdiom");
final _objc_msgSend_16 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_playInputClick = objc.registerName("playInputClick");

/// UIApplication
class UIApplication extends UIResponder {
  UIApplication._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIApplication] that points to the same underlying object as [other].
  UIApplication.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIApplication] that wraps the given raw object pointer.
  UIApplication.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIApplication].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIApplication);
  }

  /// sharedApplication
  static UIApplication getSharedApplication() {
    final _ret = _objc_msgSend_17(_class_UIApplication, _sel_sharedApplication);
    return UIApplication.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// beginIgnoringInteractionEvents
  void beginIgnoringInteractionEvents() {
    _objc_msgSend_12(this.ref.pointer, _sel_beginIgnoringInteractionEvents);
  }

  /// endIgnoringInteractionEvents
  void endIgnoringInteractionEvents() {
    _objc_msgSend_12(this.ref.pointer, _sel_endIgnoringInteractionEvents);
  }

  /// isIgnoringInteractionEvents
  bool get ignoringInteractionEvents {
    return _objc_msgSend_11(this.ref.pointer, _sel_isIgnoringInteractionEvents);
  }

  /// isIdleTimerDisabled
  bool get idleTimerDisabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isIdleTimerDisabled);
  }

  /// setIdleTimerDisabled:
  set idleTimerDisabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setIdleTimerDisabled_, value);
  }

  /// openURL:
  bool openURL_(objc.NSURL url) {
    return _objc_msgSend_20(this.ref.pointer, _sel_openURL_, url.ref.pointer);
  }

  /// canOpenURL:
  bool canOpenURL_(objc.NSURL url) {
    return _objc_msgSend_20(
        this.ref.pointer, _sel_canOpenURL_, url.ref.pointer);
  }

  /// openURL:options:completionHandler:
  void openURL_options_completionHandler_(
      objc.NSURL url,
      objc.NSDictionary options,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>? completion) {
    _objc_msgSend_21(
        this.ref.pointer,
        _sel_openURL_options_completionHandler_,
        url.ref.pointer,
        options.ref.pointer,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// sendEvent:
  void sendEvent_(UIEvent event) {
    _objc_msgSend_571(this.ref.pointer, _sel_sendEvent_, event.ref.pointer);
  }

  /// keyWindow
  UIWindow? get keyWindow {
    final _ret = _objc_msgSend_388(this.ref.pointer, _sel_keyWindow);
    return _ret.address == 0
        ? null
        : UIWindow.castFromPointer(_ret, retain: true, release: true);
  }

  /// windows
  objc.NSArray get windows {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_windows);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// sendAction:to:from:forEvent:
  bool sendAction_to_from_forEvent_(
      ffi.Pointer<objc.ObjCSelector> action,
      objc.ObjCObjectBase? target,
      objc.ObjCObjectBase? sender,
      UIEvent? event) {
    return _objc_msgSend_578(
        this.ref.pointer,
        _sel_sendAction_to_from_forEvent_,
        action,
        target?.ref.pointer ?? ffi.nullptr,
        sender?.ref.pointer ?? ffi.nullptr,
        event?.ref.pointer ?? ffi.nullptr);
  }

  /// isNetworkActivityIndicatorVisible
  bool get networkActivityIndicatorVisible {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_isNetworkActivityIndicatorVisible);
  }

  /// setNetworkActivityIndicatorVisible:
  set networkActivityIndicatorVisible(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setNetworkActivityIndicatorVisible_, value);
  }

  /// statusBarStyle
  UIStatusBarStyle get statusBarStyle {
    final _ret = _objc_msgSend_510(this.ref.pointer, _sel_statusBarStyle);
    return UIStatusBarStyle.fromValue(_ret);
  }

  /// isStatusBarHidden
  bool get statusBarHidden {
    return _objc_msgSend_11(this.ref.pointer, _sel_isStatusBarHidden);
  }

  /// statusBarOrientation
  UIInterfaceOrientation get statusBarOrientation {
    final _ret = _objc_msgSend_383(this.ref.pointer, _sel_statusBarOrientation);
    return UIInterfaceOrientation.fromValue(_ret);
  }

  /// supportedInterfaceOrientationsForWindow:
  UIInterfaceOrientationMask supportedInterfaceOrientationsForWindow_(
      UIWindow? window) {
    final _ret = _objc_msgSend_579(
        this.ref.pointer,
        _sel_supportedInterfaceOrientationsForWindow_,
        window?.ref.pointer ?? ffi.nullptr);
    return UIInterfaceOrientationMask.fromValue(_ret);
  }

  /// statusBarOrientationAnimationDuration
  double get statusBarOrientationAnimationDuration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(
            this.ref.pointer, _sel_statusBarOrientationAnimationDuration)
        : _objc_msgSend_24(
            this.ref.pointer, _sel_statusBarOrientationAnimationDuration);
  }

  /// statusBarFrame
  void getStatusBarFrame(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_statusBarFrame)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_statusBarFrame);
  }

  /// applicationIconBadgeNumber
  int get applicationIconBadgeNumber {
    return _objc_msgSend_59(this.ref.pointer, _sel_applicationIconBadgeNumber);
  }

  /// setApplicationIconBadgeNumber:
  set applicationIconBadgeNumber(int value) {
    return _objc_msgSend_60(
        this.ref.pointer, _sel_setApplicationIconBadgeNumber_, value);
  }

  /// applicationSupportsShakeToEdit
  bool get applicationSupportsShakeToEdit {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_applicationSupportsShakeToEdit);
  }

  /// setApplicationSupportsShakeToEdit:
  set applicationSupportsShakeToEdit(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setApplicationSupportsShakeToEdit_, value);
  }

  /// applicationState
  UIApplicationState get applicationState {
    final _ret = _objc_msgSend_580(this.ref.pointer, _sel_applicationState);
    return UIApplicationState.fromValue(_ret);
  }

  /// backgroundTimeRemaining
  double get backgroundTimeRemaining {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_backgroundTimeRemaining)
        : _objc_msgSend_24(this.ref.pointer, _sel_backgroundTimeRemaining);
  }

  /// beginBackgroundTaskWithExpirationHandler:
  int beginBackgroundTaskWithExpirationHandler_(
      objc.ObjCBlock<ffi.Void Function()>? handler) {
    return _objc_msgSend_581(
        this.ref.pointer,
        _sel_beginBackgroundTaskWithExpirationHandler_,
        handler?.ref.pointer ?? ffi.nullptr);
  }

  /// beginBackgroundTaskWithName:expirationHandler:
  int beginBackgroundTaskWithName_expirationHandler_(
      objc.NSString? taskName, objc.ObjCBlock<ffi.Void Function()>? handler) {
    return _objc_msgSend_582(
        this.ref.pointer,
        _sel_beginBackgroundTaskWithName_expirationHandler_,
        taskName?.ref.pointer ?? ffi.nullptr,
        handler?.ref.pointer ?? ffi.nullptr);
  }

  /// endBackgroundTask:
  void endBackgroundTask_(int identifier) {
    _objc_msgSend_583(this.ref.pointer, _sel_endBackgroundTask_, identifier);
  }

  /// setMinimumBackgroundFetchInterval:
  void setMinimumBackgroundFetchInterval_(
      double minimumBackgroundFetchInterval) {
    _objc_msgSend_584(this.ref.pointer, _sel_setMinimumBackgroundFetchInterval_,
        minimumBackgroundFetchInterval);
  }

  /// backgroundRefreshStatus
  UIBackgroundRefreshStatus get backgroundRefreshStatus {
    final _ret =
        _objc_msgSend_585(this.ref.pointer, _sel_backgroundRefreshStatus);
    return UIBackgroundRefreshStatus.fromValue(_ret);
  }

  /// isProtectedDataAvailable
  bool get protectedDataAvailable {
    return _objc_msgSend_11(this.ref.pointer, _sel_isProtectedDataAvailable);
  }

  /// userInterfaceLayoutDirection
  UIUserInterfaceLayoutDirection get userInterfaceLayoutDirection {
    final _ret =
        _objc_msgSend_121(this.ref.pointer, _sel_userInterfaceLayoutDirection);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// preferredContentSizeCategory
  objc.NSString get preferredContentSizeCategory {
    final _ret =
        _objc_msgSend_2(this.ref.pointer, _sel_preferredContentSizeCategory);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// connectedScenes
  objc.NSSet get connectedScenes {
    final _ret = _objc_msgSend_126(this.ref.pointer, _sel_connectedScenes);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// openSessions
  objc.NSSet get openSessions {
    final _ret = _objc_msgSend_126(this.ref.pointer, _sel_openSessions);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportsMultipleScenes
  bool get supportsMultipleScenes {
    return _objc_msgSend_11(this.ref.pointer, _sel_supportsMultipleScenes);
  }

  /// activateSceneSessionForRequest:errorHandler:
  void activateSceneSessionForRequest_errorHandler_(
      UISceneSessionActivationRequest request,
      objc.ObjCBlock<ffi.Void Function(objc.NSError)>? errorHandler) {
    _objc_msgSend_593(
        this.ref.pointer,
        _sel_activateSceneSessionForRequest_errorHandler_,
        request.ref.pointer,
        errorHandler?.ref.pointer ?? ffi.nullptr);
  }

  /// requestSceneSessionActivation:userActivity:options:errorHandler:
  void requestSceneSessionActivation_userActivity_options_errorHandler_(
      UISceneSession? sceneSession,
      NSUserActivity? userActivity,
      UISceneActivationRequestOptions? options,
      objc.ObjCBlock<ffi.Void Function(objc.NSError)>? errorHandler) {
    _objc_msgSend_594(
        this.ref.pointer,
        _sel_requestSceneSessionActivation_userActivity_options_errorHandler_,
        sceneSession?.ref.pointer ?? ffi.nullptr,
        userActivity?.ref.pointer ?? ffi.nullptr,
        options?.ref.pointer ?? ffi.nullptr,
        errorHandler?.ref.pointer ?? ffi.nullptr);
  }

  /// requestSceneSessionDestruction:options:errorHandler:
  void requestSceneSessionDestruction_options_errorHandler_(
      UISceneSession sceneSession,
      UISceneDestructionRequestOptions? options,
      objc.ObjCBlock<ffi.Void Function(objc.NSError)>? errorHandler) {
    _objc_msgSend_595(
        this.ref.pointer,
        _sel_requestSceneSessionDestruction_options_errorHandler_,
        sceneSession.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr,
        errorHandler?.ref.pointer ?? ffi.nullptr);
  }

  /// requestSceneSessionRefresh:
  void requestSceneSessionRefresh_(UISceneSession sceneSession) {
    _objc_msgSend_596(this.ref.pointer, _sel_requestSceneSessionRefresh_,
        sceneSession.ref.pointer);
  }

  /// registerForRemoteNotifications
  void registerForRemoteNotifications() {
    _objc_msgSend_12(this.ref.pointer, _sel_registerForRemoteNotifications);
  }

  /// unregisterForRemoteNotifications
  void unregisterForRemoteNotifications() {
    _objc_msgSend_12(this.ref.pointer, _sel_unregisterForRemoteNotifications);
  }

  /// isRegisteredForRemoteNotifications
  bool get registeredForRemoteNotifications {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_isRegisteredForRemoteNotifications);
  }

  /// registerForRemoteNotificationTypes:
  void registerForRemoteNotificationTypes_(UIRemoteNotificationType types) {
    _objc_msgSend_597(this.ref.pointer,
        _sel_registerForRemoteNotificationTypes_, types.value);
  }

  /// enabledRemoteNotificationTypes
  UIRemoteNotificationType enabledRemoteNotificationTypes() {
    final _ret = _objc_msgSend_598(
        this.ref.pointer, _sel_enabledRemoteNotificationTypes);
    return UIRemoteNotificationType.fromValue(_ret);
  }

  /// presentLocalNotificationNow:
  void presentLocalNotificationNow_(UILocalNotification notification) {
    _objc_msgSend_648(this.ref.pointer, _sel_presentLocalNotificationNow_,
        notification.ref.pointer);
  }

  /// scheduleLocalNotification:
  void scheduleLocalNotification_(UILocalNotification notification) {
    _objc_msgSend_648(this.ref.pointer, _sel_scheduleLocalNotification_,
        notification.ref.pointer);
  }

  /// cancelLocalNotification:
  void cancelLocalNotification_(UILocalNotification notification) {
    _objc_msgSend_648(this.ref.pointer, _sel_cancelLocalNotification_,
        notification.ref.pointer);
  }

  /// cancelAllLocalNotifications
  void cancelAllLocalNotifications() {
    _objc_msgSend_12(this.ref.pointer, _sel_cancelAllLocalNotifications);
  }

  /// scheduledLocalNotifications
  objc.NSArray? get scheduledLocalNotifications {
    final _ret =
        _objc_msgSend_98(this.ref.pointer, _sel_scheduledLocalNotifications);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setScheduledLocalNotifications:
  set scheduledLocalNotifications(objc.NSArray? value) {
    return _objc_msgSend_99(
        this.ref.pointer,
        _sel_setScheduledLocalNotifications_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// registerUserNotificationSettings:
  void registerUserNotificationSettings_(
      UIUserNotificationSettings notificationSettings) {
    _objc_msgSend_651(this.ref.pointer, _sel_registerUserNotificationSettings_,
        notificationSettings.ref.pointer);
  }

  /// currentUserNotificationSettings
  UIUserNotificationSettings? get currentUserNotificationSettings {
    final _ret = _objc_msgSend_652(
        this.ref.pointer, _sel_currentUserNotificationSettings);
    return _ret.address == 0
        ? null
        : UIUserNotificationSettings.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// beginReceivingRemoteControlEvents
  void beginReceivingRemoteControlEvents() {
    _objc_msgSend_12(this.ref.pointer, _sel_beginReceivingRemoteControlEvents);
  }

  /// endReceivingRemoteControlEvents
  void endReceivingRemoteControlEvents() {
    _objc_msgSend_12(this.ref.pointer, _sel_endReceivingRemoteControlEvents);
  }

  /// setNewsstandIconImage:
  void setNewsstandIconImage_(UIImage? image) {
    _objc_msgSend_653(this.ref.pointer, _sel_setNewsstandIconImage_,
        image?.ref.pointer ?? ffi.nullptr);
  }

  /// shortcutItems
  objc.NSArray? get shortcutItems {
    final _ret = _objc_msgSend_98(this.ref.pointer, _sel_shortcutItems);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setShortcutItems:
  set shortcutItems(objc.NSArray? value) {
    return _objc_msgSend_99(this.ref.pointer, _sel_setShortcutItems_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// supportsAlternateIcons
  bool get supportsAlternateIcons {
    return _objc_msgSend_11(this.ref.pointer, _sel_supportsAlternateIcons);
  }

  /// setAlternateIconName:completionHandler:
  void setAlternateIconName_completionHandler_(
      objc.NSString? alternateIconName,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>?
          completionHandler) {
    _objc_msgSend_654(
        this.ref.pointer,
        _sel_setAlternateIconName_completionHandler_,
        alternateIconName?.ref.pointer ?? ffi.nullptr,
        completionHandler?.ref.pointer ?? ffi.nullptr);
  }

  /// alternateIconName
  objc.NSString? get alternateIconName {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_alternateIconName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// extendStateRestoration
  void extendStateRestoration() {
    _objc_msgSend_12(this.ref.pointer, _sel_extendStateRestoration);
  }

  /// completeStateRestoration
  void completeStateRestoration() {
    _objc_msgSend_12(this.ref.pointer, _sel_completeStateRestoration);
  }

  /// ignoreSnapshotOnNextApplicationLaunch
  void ignoreSnapshotOnNextApplicationLaunch() {
    _objc_msgSend_12(
        this.ref.pointer, _sel_ignoreSnapshotOnNextApplicationLaunch);
  }

  /// registerObjectForStateRestoration:restorationIdentifier:
  static void registerObjectForStateRestoration_restorationIdentifier_(
      objc.ObjCObjectBase object, objc.NSString restorationIdentifier) {
    _objc_msgSend_655(
        _class_UIApplication,
        _sel_registerObjectForStateRestoration_restorationIdentifier_,
        object.ref.pointer,
        restorationIdentifier.ref.pointer);
  }

  /// isProximitySensingEnabled
  bool get proximitySensingEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isProximitySensingEnabled);
  }

  /// setProximitySensingEnabled:
  set proximitySensingEnabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setProximitySensingEnabled_, value);
  }

  /// setStatusBarHidden:animated:
  void setStatusBarHidden_animated_(bool hidden, bool animated) {
    _objc_msgSend_656(
        this.ref.pointer, _sel_setStatusBarHidden_animated_, hidden, animated);
  }

  /// setStatusBarOrientation:
  set statusBarOrientation(UIInterfaceOrientation value) {
    return _objc_msgSend_657(
        this.ref.pointer, _sel_setStatusBarOrientation_, value.value);
  }

  /// setStatusBarOrientation:animated:
  void setStatusBarOrientation_animated_(
      UIInterfaceOrientation interfaceOrientation, bool animated) {
    _objc_msgSend_658(this.ref.pointer, _sel_setStatusBarOrientation_animated_,
        interfaceOrientation.value, animated);
  }

  /// setStatusBarStyle:
  set statusBarStyle(UIStatusBarStyle value) {
    return _objc_msgSend_659(
        this.ref.pointer, _sel_setStatusBarStyle_, value.value);
  }

  /// setStatusBarStyle:animated:
  void setStatusBarStyle_animated_(
      UIStatusBarStyle statusBarStyle, bool animated) {
    _objc_msgSend_660(this.ref.pointer, _sel_setStatusBarStyle_animated_,
        statusBarStyle.value, animated);
  }

  /// setStatusBarHidden:
  set statusBarHidden(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setStatusBarHidden_, value);
  }

  /// setStatusBarHidden:withAnimation:
  void setStatusBarHidden_withAnimation_(
      bool hidden, UIStatusBarAnimation animation) {
    _objc_msgSend_661(this.ref.pointer, _sel_setStatusBarHidden_withAnimation_,
        hidden, animation.value);
  }

  /// setKeepAliveTimeout:handler:
  bool setKeepAliveTimeout_handler_(
      double timeout, objc.ObjCBlock<ffi.Void Function()>? keepAliveHandler) {
    return _objc_msgSend_662(
        this.ref.pointer,
        _sel_setKeepAliveTimeout_handler_,
        timeout,
        keepAliveHandler?.ref.pointer ?? ffi.nullptr);
  }

  /// clearKeepAliveTimeout
  void clearKeepAliveTimeout() {
    _objc_msgSend_12(this.ref.pointer, _sel_clearKeepAliveTimeout);
  }

  /// init
  UIApplication init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIApplication.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIApplication new1() {
    final _ret = _objc_msgSend_4(_class_UIApplication, _sel_new);
    return UIApplication.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIApplication allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIApplication, _sel_allocWithZone_, zone);
    return UIApplication.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIApplication alloc() {
    final _ret = _objc_msgSend_4(_class_UIApplication, _sel_alloc);
    return UIApplication.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIApplication = objc.getClass("UIApplication");
late final _sel_sharedApplication = objc.registerName("sharedApplication");
final _objc_msgSend_17 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_delegate = objc.registerName("delegate");
final _objc_msgSend_18 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDelegate_ = objc.registerName("setDelegate:");
final _objc_msgSend_19 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_beginIgnoringInteractionEvents =
    objc.registerName("beginIgnoringInteractionEvents");
late final _sel_endIgnoringInteractionEvents =
    objc.registerName("endIgnoringInteractionEvents");
late final _sel_isIgnoringInteractionEvents =
    objc.registerName("isIgnoringInteractionEvents");
late final _sel_isIdleTimerDisabled = objc.registerName("isIdleTimerDisabled");
late final _sel_setIdleTimerDisabled_ =
    objc.registerName("setIdleTimerDisabled:");
late final _sel_openURL_ = objc.registerName("openURL:");
final _objc_msgSend_20 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_canOpenURL_ = objc.registerName("canOpenURL:");
void _ObjCBlock_ffiVoid_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, bool arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>>()
        .asFunction<void Function(bool)>()(arg0);
void _ObjCBlock_ffiVoid_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, bool arg0) =>
    (objc.getBlockClosure(block) as void Function(bool))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Bool)>`.
abstract final class ObjCBlock_ffiVoid_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Bool)>(_ObjCBlock_ffiVoid_bool_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)> fromFunction(
          void Function(bool) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Bool)>(_ObjCBlock_ffiVoid_bool_closureTrampoline)
                  .cast(),
              (bool arg0) => fn(arg0)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool)> listener(
      void Function(bool) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool)>.listener(
                _ObjCBlock_ffiVoid_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (bool arg0) => fn(arg0));
    return objc.ObjCBlock<ffi.Void Function(ffi.Bool)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Bool)>`.
extension ObjCBlock_ffiVoid_bool_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Bool)> {
  void call(bool arg0) => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Bool arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>, bool)>()(
      ref.pointer, arg0);
}

late final _sel_openURL_options_completionHandler_ =
    objc.registerName("openURL:options:completionHandler:");
final _objc_msgSend_21 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url,
                ffi.Pointer<objc.ObjCObject> options,
                ffi.Pointer<objc.ObjCBlockImpl> completion)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// UIEvent
class UIEvent extends objc.NSObject {
  UIEvent._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIEvent] that points to the same underlying object as [other].
  UIEvent.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIEvent] that wraps the given raw object pointer.
  UIEvent.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIEvent].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIEvent);
  }

  /// type
  UIEventType get type {
    final _ret = _objc_msgSend_22(this.ref.pointer, _sel_type);
    return UIEventType.fromValue(_ret);
  }

  /// subtype
  UIEventSubtype get subtype {
    final _ret = _objc_msgSend_23(this.ref.pointer, _sel_subtype);
    return UIEventSubtype.fromValue(_ret);
  }

  /// timestamp
  double get timestamp {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_timestamp)
        : _objc_msgSend_24(this.ref.pointer, _sel_timestamp);
  }

  /// modifierFlags
  UIKeyModifierFlags get modifierFlags {
    final _ret = _objc_msgSend_25(this.ref.pointer, _sel_modifierFlags);
    return UIKeyModifierFlags.fromValue(_ret);
  }

  /// buttonMask
  UIEventButtonMask get buttonMask {
    final _ret = _objc_msgSend_26(this.ref.pointer, _sel_buttonMask);
    return UIEventButtonMask.fromValue(_ret);
  }

  /// allTouches
  objc.ObjCObjectBase? get allTouches {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_allTouches);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// touchesForWindow:
  objc.ObjCObjectBase? touchesForWindow_(UIWindow window) {
    final _ret = _objc_msgSend_574(
        this.ref.pointer, _sel_touchesForWindow_, window.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// touchesForView:
  objc.NSSet? touchesForView_(UIView view) {
    final _ret = _objc_msgSend_575(
        this.ref.pointer, _sel_touchesForView_, view.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// touchesForGestureRecognizer:
  objc.NSSet? touchesForGestureRecognizer_(UIGestureRecognizer gesture) {
    final _ret = _objc_msgSend_576(this.ref.pointer,
        _sel_touchesForGestureRecognizer_, gesture.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// coalescedTouchesForTouch:
  objc.NSArray? coalescedTouchesForTouch_(UITouch touch) {
    final _ret = _objc_msgSend_577(
        this.ref.pointer, _sel_coalescedTouchesForTouch_, touch.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// predictedTouchesForTouch:
  objc.NSArray? predictedTouchesForTouch_(UITouch touch) {
    final _ret = _objc_msgSend_577(
        this.ref.pointer, _sel_predictedTouchesForTouch_, touch.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIEvent init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIEvent.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIEvent new1() {
    final _ret = _objc_msgSend_4(_class_UIEvent, _sel_new);
    return UIEvent.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIEvent allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIEvent, _sel_allocWithZone_, zone);
    return UIEvent.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIEvent alloc() {
    final _ret = _objc_msgSend_4(_class_UIEvent, _sel_alloc);
    return UIEvent.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIEvent = objc.getClass("UIEvent");

enum UIEventType {
  UIEventTypeTouches(0),
  UIEventTypeMotion(1),
  UIEventTypeRemoteControl(2),
  UIEventTypePresses(3),
  UIEventTypeScroll(10),
  UIEventTypeHover(11),
  UIEventTypeTransform(14);

  final int value;
  const UIEventType(this.value);

  static UIEventType fromValue(int value) => switch (value) {
        0 => UIEventTypeTouches,
        1 => UIEventTypeMotion,
        2 => UIEventTypeRemoteControl,
        3 => UIEventTypePresses,
        10 => UIEventTypeScroll,
        11 => UIEventTypeHover,
        14 => UIEventTypeTransform,
        _ => throw ArgumentError("Unknown value for UIEventType: $value"),
      };
}

late final _sel_type = objc.registerName("type");
final _objc_msgSend_22 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIEventSubtype {
  UIEventSubtypeNone(0),
  UIEventSubtypeMotionShake(1),
  UIEventSubtypeRemoteControlPlay(100),
  UIEventSubtypeRemoteControlPause(101),
  UIEventSubtypeRemoteControlStop(102),
  UIEventSubtypeRemoteControlTogglePlayPause(103),
  UIEventSubtypeRemoteControlNextTrack(104),
  UIEventSubtypeRemoteControlPreviousTrack(105),
  UIEventSubtypeRemoteControlBeginSeekingBackward(106),
  UIEventSubtypeRemoteControlEndSeekingBackward(107),
  UIEventSubtypeRemoteControlBeginSeekingForward(108),
  UIEventSubtypeRemoteControlEndSeekingForward(109);

  final int value;
  const UIEventSubtype(this.value);

  static UIEventSubtype fromValue(int value) => switch (value) {
        0 => UIEventSubtypeNone,
        1 => UIEventSubtypeMotionShake,
        100 => UIEventSubtypeRemoteControlPlay,
        101 => UIEventSubtypeRemoteControlPause,
        102 => UIEventSubtypeRemoteControlStop,
        103 => UIEventSubtypeRemoteControlTogglePlayPause,
        104 => UIEventSubtypeRemoteControlNextTrack,
        105 => UIEventSubtypeRemoteControlPreviousTrack,
        106 => UIEventSubtypeRemoteControlBeginSeekingBackward,
        107 => UIEventSubtypeRemoteControlEndSeekingBackward,
        108 => UIEventSubtypeRemoteControlBeginSeekingForward,
        109 => UIEventSubtypeRemoteControlEndSeekingForward,
        _ => throw ArgumentError("Unknown value for UIEventSubtype: $value"),
      };
}

late final _sel_subtype = objc.registerName("subtype");
final _objc_msgSend_23 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_timestamp = objc.registerName("timestamp");
final _objc_msgSend_24 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_24Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIKeyModifierFlags {
  UIKeyModifierAlphaShift(65536),
  UIKeyModifierShift(131072),
  UIKeyModifierControl(262144),
  UIKeyModifierAlternate(524288),
  UIKeyModifierCommand(1048576),
  UIKeyModifierNumericPad(2097152);

  final int value;
  const UIKeyModifierFlags(this.value);

  static UIKeyModifierFlags fromValue(int value) => switch (value) {
        65536 => UIKeyModifierAlphaShift,
        131072 => UIKeyModifierShift,
        262144 => UIKeyModifierControl,
        524288 => UIKeyModifierAlternate,
        1048576 => UIKeyModifierCommand,
        2097152 => UIKeyModifierNumericPad,
        _ =>
          throw ArgumentError("Unknown value for UIKeyModifierFlags: $value"),
      };
}

late final _sel_modifierFlags = objc.registerName("modifierFlags");
final _objc_msgSend_25 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIEventButtonMask {
  UIEventButtonMaskPrimary(1),
  UIEventButtonMaskSecondary(2);

  final int value;
  const UIEventButtonMask(this.value);

  static UIEventButtonMask fromValue(int value) => switch (value) {
        1 => UIEventButtonMaskPrimary,
        2 => UIEventButtonMaskSecondary,
        _ => throw ArgumentError("Unknown value for UIEventButtonMask: $value"),
      };
}

late final _sel_buttonMask = objc.registerName("buttonMask");
final _objc_msgSend_26 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allTouches = objc.registerName("allTouches");

/// UIWindow
class UIWindow extends UIView {
  UIWindow._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIWindow] that points to the same underlying object as [other].
  UIWindow.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIWindow] that wraps the given raw object pointer.
  UIWindow.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIWindow].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIWindow);
  }

  /// initWithWindowScene:
  UIWindow initWithWindowScene_(UIWindowScene windowScene) {
    final _ret = _objc_msgSend_566(this.ref.retainAndReturnPointer(),
        _sel_initWithWindowScene_, windowScene.ref.pointer);
    return UIWindow.castFromPointer(_ret, retain: false, release: true);
  }

  /// windowScene
  UIWindowScene? get windowScene {
    final _ret = _objc_msgSend_567(this.ref.pointer, _sel_windowScene);
    return _ret.address == 0
        ? null
        : UIWindowScene.castFromPointer(_ret, retain: true, release: true);
  }

  /// setWindowScene:
  set windowScene(UIWindowScene? value) {
    return _objc_msgSend_568(this.ref.pointer, _sel_setWindowScene_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// canResizeToFitContent
  bool get canResizeToFitContent {
    return _objc_msgSend_11(this.ref.pointer, _sel_canResizeToFitContent);
  }

  /// setCanResizeToFitContent:
  set canResizeToFitContent(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setCanResizeToFitContent_, value);
  }

  /// screen
  UIScreen get screen {
    final _ret = _objc_msgSend_28(this.ref.pointer, _sel_screen);
    return UIScreen.castFromPointer(_ret, retain: true, release: true);
  }

  /// setScreen:
  set screen(UIScreen value) {
    return _objc_msgSend_569(
        this.ref.pointer, _sel_setScreen_, value.ref.pointer);
  }

  /// windowLevel
  double get windowLevel {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_windowLevel)
        : _objc_msgSend_24(this.ref.pointer, _sel_windowLevel);
  }

  /// setWindowLevel:
  set windowLevel(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setWindowLevel_, value);
  }

  /// isKeyWindow
  bool get keyWindow {
    return _objc_msgSend_11(this.ref.pointer, _sel_isKeyWindow);
  }

  /// canBecomeKeyWindow
  bool get canBecomeKeyWindow {
    return _objc_msgSend_11(this.ref.pointer, _sel_canBecomeKeyWindow);
  }

  /// becomeKeyWindow
  void becomeKeyWindow() {
    _objc_msgSend_12(this.ref.pointer, _sel_becomeKeyWindow);
  }

  /// resignKeyWindow
  void resignKeyWindow() {
    _objc_msgSend_12(this.ref.pointer, _sel_resignKeyWindow);
  }

  /// makeKeyWindow
  void makeKeyWindow() {
    _objc_msgSend_12(this.ref.pointer, _sel_makeKeyWindow);
  }

  /// makeKeyAndVisible
  void makeKeyAndVisible() {
    _objc_msgSend_12(this.ref.pointer, _sel_makeKeyAndVisible);
  }

  /// rootViewController
  UIViewController? get rootViewController {
    final _ret = _objc_msgSend_411(this.ref.pointer, _sel_rootViewController);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRootViewController:
  set rootViewController(UIViewController? value) {
    return _objc_msgSend_570(this.ref.pointer, _sel_setRootViewController_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// sendEvent:
  void sendEvent_(UIEvent event) {
    _objc_msgSend_571(this.ref.pointer, _sel_sendEvent_, event.ref.pointer);
  }

  /// convertPoint:toWindow:
  void convertPoint_toWindow_(
      ffi.Pointer<CGPoint> stret, CGPoint point, UIWindow? window) {
    objc.useMsgSendVariants
        ? _objc_msgSend_572Stret(
            stret,
            this.ref.pointer,
            _sel_convertPoint_toWindow_,
            point,
            window?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_572(
            this.ref.pointer,
            _sel_convertPoint_toWindow_,
            point,
            window?.ref.pointer ?? ffi.nullptr);
  }

  /// convertPoint:fromWindow:
  void convertPoint_fromWindow_(
      ffi.Pointer<CGPoint> stret, CGPoint point, UIWindow? window) {
    objc.useMsgSendVariants
        ? _objc_msgSend_572Stret(
            stret,
            this.ref.pointer,
            _sel_convertPoint_fromWindow_,
            point,
            window?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_572(
            this.ref.pointer,
            _sel_convertPoint_fromWindow_,
            point,
            window?.ref.pointer ?? ffi.nullptr);
  }

  /// convertRect:toWindow:
  void convertRect_toWindow_(
      ffi.Pointer<CGRect> stret, CGRect rect, UIWindow? window) {
    objc.useMsgSendVariants
        ? _objc_msgSend_573Stret(
            stret,
            this.ref.pointer,
            _sel_convertRect_toWindow_,
            rect,
            window?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_573(
            this.ref.pointer,
            _sel_convertRect_toWindow_,
            rect,
            window?.ref.pointer ?? ffi.nullptr);
  }

  /// convertRect:fromWindow:
  void convertRect_fromWindow_(
      ffi.Pointer<CGRect> stret, CGRect rect, UIWindow? window) {
    objc.useMsgSendVariants
        ? _objc_msgSend_573Stret(
            stret,
            this.ref.pointer,
            _sel_convertRect_fromWindow_,
            rect,
            window?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_573(
            this.ref.pointer,
            _sel_convertRect_fromWindow_,
            rect,
            window?.ref.pointer ?? ffi.nullptr);
  }

  /// layerClass
  static objc.ObjCObjectBase getLayerClass() {
    final _ret = _objc_msgSend_4(_class_UIWindow, _sel_layerClass);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithFrame:
  UIWindow initWithFrame_(CGRect frame) {
    final _ret = _objc_msgSend_65(
        this.ref.retainAndReturnPointer(), _sel_initWithFrame_, frame);
    return UIWindow.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIWindow? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIWindow.castFromPointer(_ret, retain: false, release: true);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_(
          UISemanticContentAttribute attribute) {
    final _ret = _objc_msgSend_119(
        _class_UIWindow,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_,
        attribute.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_(
          UISemanticContentAttribute semanticContentAttribute,
          UIUserInterfaceLayoutDirection layoutDirection) {
    final _ret = _objc_msgSend_120(
        _class_UIWindow,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_,
        semanticContentAttribute.value,
        layoutDirection.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// init
  UIWindow init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIWindow.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIWindow new1() {
    final _ret = _objc_msgSend_4(_class_UIWindow, _sel_new);
    return UIWindow.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIWindow allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIWindow, _sel_allocWithZone_, zone);
    return UIWindow.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIWindow alloc() {
    final _ret = _objc_msgSend_4(_class_UIWindow, _sel_alloc);
    return UIWindow.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIWindow = objc.getClass("UIWindow");

/// UIWindowScene
class UIWindowScene extends UIScene {
  UIWindowScene._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIWindowScene] that points to the same underlying object as [other].
  UIWindowScene.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIWindowScene] that wraps the given raw object pointer.
  UIWindowScene.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIWindowScene].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIWindowScene);
  }

  /// screen
  UIScreen get screen {
    final _ret = _objc_msgSend_28(this.ref.pointer, _sel_screen);
    return UIScreen.castFromPointer(_ret, retain: true, release: true);
  }

  /// interfaceOrientation
  UIInterfaceOrientation get interfaceOrientation {
    final _ret = _objc_msgSend_383(this.ref.pointer, _sel_interfaceOrientation);
    return UIInterfaceOrientation.fromValue(_ret);
  }

  /// coordinateSpace
  objc.ObjCObjectBase get coordinateSpace {
    final _ret = _objc_msgSend_4(this.ref.pointer, _sel_coordinateSpace);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// traitCollection
  UITraitCollection get traitCollection {
    final _ret = _objc_msgSend_306(this.ref.pointer, _sel_traitCollection);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// requestGeometryUpdateWithPreferences:errorHandler:
  void requestGeometryUpdateWithPreferences_errorHandler_(
      UIWindowSceneGeometryPreferences geometryPreferences,
      objc.ObjCBlock<ffi.Void Function(objc.NSError)>? errorHandler) {
    _objc_msgSend_384(
        this.ref.pointer,
        _sel_requestGeometryUpdateWithPreferences_errorHandler_,
        geometryPreferences.ref.pointer,
        errorHandler?.ref.pointer ?? ffi.nullptr);
  }

  /// effectiveGeometry
  UIWindowSceneGeometry get effectiveGeometry {
    final _ret = _objc_msgSend_386(this.ref.pointer, _sel_effectiveGeometry);
    return UIWindowSceneGeometry.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// sizeRestrictions
  UISceneSizeRestrictions? get sizeRestrictions {
    final _ret = _objc_msgSend_387(this.ref.pointer, _sel_sizeRestrictions);
    return _ret.address == 0
        ? null
        : UISceneSizeRestrictions.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// windows
  objc.NSArray get windows {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_windows);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// keyWindow
  UIWindow? get keyWindow {
    final _ret = _objc_msgSend_388(this.ref.pointer, _sel_keyWindow);
    return _ret.address == 0
        ? null
        : UIWindow.castFromPointer(_ret, retain: true, release: true);
  }

  /// activityItemsConfigurationSource
  objc.ObjCObjectBase? get activityItemsConfigurationSource {
    final _ret = _objc_msgSend_18(
        this.ref.pointer, _sel_activityItemsConfigurationSource);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setActivityItemsConfigurationSource:
  set activityItemsConfigurationSource(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer,
        _sel_setActivityItemsConfigurationSource_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// windowingBehaviors
  UISceneWindowingBehaviors? get windowingBehaviors {
    final _ret = _objc_msgSend_389(this.ref.pointer, _sel_windowingBehaviors);
    return _ret.address == 0
        ? null
        : UISceneWindowingBehaviors.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// isFullScreen
  bool get fullScreen {
    return _objc_msgSend_11(this.ref.pointer, _sel_isFullScreen);
  }

  /// new
  static UIWindowScene new1() {
    final _ret = _objc_msgSend_4(_class_UIWindowScene, _sel_new);
    return UIWindowScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  UIWindowScene init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIWindowScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithSession:connectionOptions:
  UIWindowScene initWithSession_connectionOptions_(
      UISceneSession session, UISceneConnectionOptions connectionOptions) {
    final _ret = _objc_msgSend_546(
        this.ref.retainAndReturnPointer(),
        _sel_initWithSession_connectionOptions_,
        session.ref.pointer,
        connectionOptions.ref.pointer);
    return UIWindowScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIWindowScene allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIWindowScene, _sel_allocWithZone_, zone);
    return UIWindowScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIWindowScene alloc() {
    final _ret = _objc_msgSend_4(_class_UIWindowScene, _sel_alloc);
    return UIWindowScene.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIWindowScene = objc.getClass("UIWindowScene");

/// UIScreen
class UIScreen extends objc.NSObject {
  UIScreen._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIScreen] that points to the same underlying object as [other].
  UIScreen.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIScreen] that wraps the given raw object pointer.
  UIScreen.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIScreen].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIScreen);
  }

  /// screens
  static objc.NSArray getScreens() {
    final _ret = _objc_msgSend_27(_class_UIScreen, _sel_screens);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// mainScreen
  static UIScreen getMainScreen() {
    final _ret = _objc_msgSend_28(_class_UIScreen, _sel_mainScreen);
    return UIScreen.castFromPointer(_ret, retain: true, release: true);
  }

  /// bounds
  void getBounds(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_bounds)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_bounds);
  }

  /// scale
  double get scale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_scale)
        : _objc_msgSend_24(this.ref.pointer, _sel_scale);
  }

  /// availableModes
  objc.NSArray get availableModes {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_availableModes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredMode
  UIScreenMode? get preferredMode {
    final _ret = _objc_msgSend_31(this.ref.pointer, _sel_preferredMode);
    return _ret.address == 0
        ? null
        : UIScreenMode.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentMode
  UIScreenMode? get currentMode {
    final _ret = _objc_msgSend_31(this.ref.pointer, _sel_currentMode);
    return _ret.address == 0
        ? null
        : UIScreenMode.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrentMode:
  set currentMode(UIScreenMode? value) {
    return _objc_msgSend_32(this.ref.pointer, _sel_setCurrentMode_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// overscanCompensation
  UIScreenOverscanCompensation get overscanCompensation {
    final _ret = _objc_msgSend_33(this.ref.pointer, _sel_overscanCompensation);
    return UIScreenOverscanCompensation.fromValue(_ret);
  }

  /// setOverscanCompensation:
  set overscanCompensation(UIScreenOverscanCompensation value) {
    return _objc_msgSend_34(
        this.ref.pointer, _sel_setOverscanCompensation_, value.value);
  }

  /// overscanCompensationInsets
  void getOverscanCompensationInsets(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(
            stret, this.ref.pointer, _sel_overscanCompensationInsets)
        : stret.ref =
            _objc_msgSend_35(this.ref.pointer, _sel_overscanCompensationInsets);
  }

  /// mirroredScreen
  UIScreen? get mirroredScreen {
    final _ret = _objc_msgSend_36(this.ref.pointer, _sel_mirroredScreen);
    return _ret.address == 0
        ? null
        : UIScreen.castFromPointer(_ret, retain: true, release: true);
  }

  /// isCaptured
  bool get captured {
    return _objc_msgSend_11(this.ref.pointer, _sel_isCaptured);
  }

  /// brightness
  double get brightness {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_brightness)
        : _objc_msgSend_24(this.ref.pointer, _sel_brightness);
  }

  /// setBrightness:
  set brightness(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setBrightness_, value);
  }

  /// wantsSoftwareDimming
  bool get wantsSoftwareDimming {
    return _objc_msgSend_11(this.ref.pointer, _sel_wantsSoftwareDimming);
  }

  /// setWantsSoftwareDimming:
  set wantsSoftwareDimming(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setWantsSoftwareDimming_, value);
  }

  /// coordinateSpace
  objc.ObjCObjectBase get coordinateSpace {
    final _ret = _objc_msgSend_4(this.ref.pointer, _sel_coordinateSpace);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// fixedCoordinateSpace
  objc.ObjCObjectBase get fixedCoordinateSpace {
    final _ret = _objc_msgSend_4(this.ref.pointer, _sel_fixedCoordinateSpace);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// nativeBounds
  void getNativeBounds(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_nativeBounds)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_nativeBounds);
  }

  /// nativeScale
  double get nativeScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_nativeScale)
        : _objc_msgSend_24(this.ref.pointer, _sel_nativeScale);
  }

  /// displayLinkWithTarget:selector:
  CADisplayLink? displayLinkWithTarget_selector_(
      objc.ObjCObjectBase target, ffi.Pointer<objc.ObjCSelector> sel) {
    final _ret = _objc_msgSend_63(this.ref.pointer,
        _sel_displayLinkWithTarget_selector_, target.ref.pointer, sel);
    return _ret.address == 0
        ? null
        : CADisplayLink.castFromPointer(_ret, retain: true, release: true);
  }

  /// maximumFramesPerSecond
  int get maximumFramesPerSecond {
    return _objc_msgSend_59(this.ref.pointer, _sel_maximumFramesPerSecond);
  }

  /// calibratedLatency
  double get calibratedLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_calibratedLatency)
        : _objc_msgSend_24(this.ref.pointer, _sel_calibratedLatency);
  }

  /// referenceDisplayModeStatus
  UIScreenReferenceDisplayModeStatus get referenceDisplayModeStatus {
    final _ret =
        _objc_msgSend_64(this.ref.pointer, _sel_referenceDisplayModeStatus);
    return UIScreenReferenceDisplayModeStatus.fromValue(_ret);
  }

  /// currentEDRHeadroom
  double get currentEDRHeadroom {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_currentEDRHeadroom)
        : _objc_msgSend_24(this.ref.pointer, _sel_currentEDRHeadroom);
  }

  /// potentialEDRHeadroom
  double get potentialEDRHeadroom {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_potentialEDRHeadroom)
        : _objc_msgSend_24(this.ref.pointer, _sel_potentialEDRHeadroom);
  }

  /// focusedItem
  objc.ObjCObjectBase? get focusedItem {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_focusedItem);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// focusedView
  UIView? get focusedView {
    final _ret = _objc_msgSend_131(this.ref.pointer, _sel_focusedView);
    return _ret.address == 0
        ? null
        : UIView.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportsFocus
  bool get supportsFocus {
    return _objc_msgSend_11(this.ref.pointer, _sel_supportsFocus);
  }

  /// applicationFrame
  void getApplicationFrame(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_applicationFrame)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_applicationFrame);
  }

  /// init
  UIScreen init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIScreen.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIScreen new1() {
    final _ret = _objc_msgSend_4(_class_UIScreen, _sel_new);
    return UIScreen.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIScreen allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIScreen, _sel_allocWithZone_, zone);
    return UIScreen.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIScreen alloc() {
    final _ret = _objc_msgSend_4(_class_UIScreen, _sel_alloc);
    return UIScreen.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIScreen = objc.getClass("UIScreen");
late final _sel_screens = objc.registerName("screens");
final _objc_msgSend_27 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainScreen = objc.registerName("mainScreen");
final _objc_msgSend_28 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

late final _sel_bounds = objc.registerName("bounds");
final _objc_msgSend_29 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_29Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CGRect>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGRect>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_scale = objc.registerName("scale");
late final _sel_availableModes = objc.registerName("availableModes");

/// UIScreenMode
class UIScreenMode extends objc.NSObject {
  UIScreenMode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIScreenMode] that points to the same underlying object as [other].
  UIScreenMode.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIScreenMode] that wraps the given raw object pointer.
  UIScreenMode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIScreenMode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIScreenMode);
  }

  /// size
  void getSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_size)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_size);
  }

  /// pixelAspectRatio
  double get pixelAspectRatio {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_pixelAspectRatio)
        : _objc_msgSend_24(this.ref.pointer, _sel_pixelAspectRatio);
  }

  /// init
  UIScreenMode init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIScreenMode.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIScreenMode new1() {
    final _ret = _objc_msgSend_4(_class_UIScreenMode, _sel_new);
    return UIScreenMode.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIScreenMode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIScreenMode, _sel_allocWithZone_, zone);
    return UIScreenMode.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIScreenMode alloc() {
    final _ret = _objc_msgSend_4(_class_UIScreenMode, _sel_alloc);
    return UIScreenMode.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIScreenMode = objc.getClass("UIScreenMode");
late final _sel_size = objc.registerName("size");
final _objc_msgSend_30 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGSize Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGSize Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_30Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<CGSize>, ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGSize>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_pixelAspectRatio = objc.registerName("pixelAspectRatio");
late final _sel_preferredMode = objc.registerName("preferredMode");
final _objc_msgSend_31 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_currentMode = objc.registerName("currentMode");
late final _sel_setCurrentMode_ = objc.registerName("setCurrentMode:");
final _objc_msgSend_32 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum UIScreenOverscanCompensation {
  UIScreenOverscanCompensationScale(0),
  UIScreenOverscanCompensationInsetBounds(1),
  UIScreenOverscanCompensationNone(2);

  static const UIScreenOverscanCompensationInsetApplicationFrame =
      UIScreenOverscanCompensationNone;

  final int value;
  const UIScreenOverscanCompensation(this.value);

  static UIScreenOverscanCompensation fromValue(int value) => switch (value) {
        0 => UIScreenOverscanCompensationScale,
        1 => UIScreenOverscanCompensationInsetBounds,
        2 => UIScreenOverscanCompensationNone,
        _ => throw ArgumentError(
            "Unknown value for UIScreenOverscanCompensation: $value"),
      };

  @override
  String toString() {
    if (this == UIScreenOverscanCompensationNone)
      return "UIScreenOverscanCompensation.UIScreenOverscanCompensationNone, UIScreenOverscanCompensation.UIScreenOverscanCompensationInsetApplicationFrame";
    return super.toString();
  }
}

late final _sel_overscanCompensation =
    objc.registerName("overscanCompensation");
final _objc_msgSend_33 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setOverscanCompensation_ =
    objc.registerName("setOverscanCompensation:");
final _objc_msgSend_34 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

final class UIEdgeInsets extends ffi.Struct {
  @ffi.Double()
  external double top;

  @ffi.Double()
  external double left;

  @ffi.Double()
  external double bottom;

  @ffi.Double()
  external double right;
}

late final _sel_overscanCompensationInsets =
    objc.registerName("overscanCompensationInsets");
final _objc_msgSend_35 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            UIEdgeInsets Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        UIEdgeInsets Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_35Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<UIEdgeInsets>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<UIEdgeInsets>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mirroredScreen = objc.registerName("mirroredScreen");
final _objc_msgSend_36 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isCaptured = objc.registerName("isCaptured");
late final _sel_brightness = objc.registerName("brightness");
late final _sel_setBrightness_ = objc.registerName("setBrightness:");
final _objc_msgSend_37 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_wantsSoftwareDimming =
    objc.registerName("wantsSoftwareDimming");
late final _sel_setWantsSoftwareDimming_ =
    objc.registerName("setWantsSoftwareDimming:");
late final _sel_coordinateSpace = objc.registerName("coordinateSpace");
late final _sel_fixedCoordinateSpace =
    objc.registerName("fixedCoordinateSpace");
late final _sel_nativeBounds = objc.registerName("nativeBounds");
late final _sel_nativeScale = objc.registerName("nativeScale");

/// CADisplayLink
class CADisplayLink extends objc.NSObject {
  CADisplayLink._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CADisplayLink] that points to the same underlying object as [other].
  CADisplayLink.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CADisplayLink] that wraps the given raw object pointer.
  CADisplayLink.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CADisplayLink].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CADisplayLink);
  }

  /// displayLinkWithTarget:selector:
  static CADisplayLink displayLinkWithTarget_selector_(
      objc.ObjCObjectBase target, ffi.Pointer<objc.ObjCSelector> sel) {
    final _ret = _objc_msgSend_38(_class_CADisplayLink,
        _sel_displayLinkWithTarget_selector_, target.ref.pointer, sel);
    return CADisplayLink.castFromPointer(_ret, retain: true, release: true);
  }

  /// addToRunLoop:forMode:
  void addToRunLoop_forMode_(NSRunLoop runloop, objc.NSString mode) {
    _objc_msgSend_52(this.ref.pointer, _sel_addToRunLoop_forMode_,
        runloop.ref.pointer, mode.ref.pointer);
  }

  /// removeFromRunLoop:forMode:
  void removeFromRunLoop_forMode_(NSRunLoop runloop, objc.NSString mode) {
    _objc_msgSend_52(this.ref.pointer, _sel_removeFromRunLoop_forMode_,
        runloop.ref.pointer, mode.ref.pointer);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_12(this.ref.pointer, _sel_invalidate);
  }

  /// timestamp
  double get timestamp {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_timestamp)
        : _objc_msgSend_24(this.ref.pointer, _sel_timestamp);
  }

  /// duration
  double get duration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_duration)
        : _objc_msgSend_24(this.ref.pointer, _sel_duration);
  }

  /// targetTimestamp
  double get targetTimestamp {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_targetTimestamp)
        : _objc_msgSend_24(this.ref.pointer, _sel_targetTimestamp);
  }

  /// isPaused
  bool get paused {
    return _objc_msgSend_11(this.ref.pointer, _sel_isPaused);
  }

  /// setPaused:
  set paused(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setPaused_, value);
  }

  /// frameInterval
  int get frameInterval {
    return _objc_msgSend_59(this.ref.pointer, _sel_frameInterval);
  }

  /// setFrameInterval:
  set frameInterval(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setFrameInterval_, value);
  }

  /// preferredFramesPerSecond
  int get preferredFramesPerSecond {
    return _objc_msgSend_59(this.ref.pointer, _sel_preferredFramesPerSecond);
  }

  /// setPreferredFramesPerSecond:
  set preferredFramesPerSecond(int value) {
    return _objc_msgSend_60(
        this.ref.pointer, _sel_setPreferredFramesPerSecond_, value);
  }

  /// preferredFrameRateRange
  void getPreferredFrameRateRange(ffi.Pointer<CAFrameRateRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_61Stret(
            stret, this.ref.pointer, _sel_preferredFrameRateRange)
        : stret.ref =
            _objc_msgSend_61(this.ref.pointer, _sel_preferredFrameRateRange);
  }

  /// setPreferredFrameRateRange:
  set preferredFrameRateRange(CAFrameRateRange value) {
    return _objc_msgSend_62(
        this.ref.pointer, _sel_setPreferredFrameRateRange_, value);
  }

  /// init
  CADisplayLink init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return CADisplayLink.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static CADisplayLink new1() {
    final _ret = _objc_msgSend_4(_class_CADisplayLink, _sel_new);
    return CADisplayLink.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CADisplayLink allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_CADisplayLink, _sel_allocWithZone_, zone);
    return CADisplayLink.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CADisplayLink alloc() {
    final _ret = _objc_msgSend_4(_class_CADisplayLink, _sel_alloc);
    return CADisplayLink.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_CADisplayLink = objc.getClass("CADisplayLink");
late final _sel_displayLinkWithTarget_selector_ =
    objc.registerName("displayLinkWithTarget:selector:");
final _objc_msgSend_38 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCSelector> sel)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();

/// NSRunLoop
class NSRunLoop extends objc.NSObject {
  NSRunLoop._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSRunLoop] that points to the same underlying object as [other].
  NSRunLoop.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSRunLoop] that wraps the given raw object pointer.
  NSRunLoop.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSRunLoop].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSRunLoop);
  }

  /// currentRunLoop
  static NSRunLoop getCurrentRunLoop() {
    final _ret = _objc_msgSend_39(_class_NSRunLoop, _sel_currentRunLoop);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  /// mainRunLoop
  static NSRunLoop getMainRunLoop() {
    final _ret = _objc_msgSend_39(_class_NSRunLoop, _sel_mainRunLoop);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  /// currentMode
  objc.NSString? get currentMode {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_currentMode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// getCFRunLoop
  ffi.Pointer<__CFRunLoop> getCFRunLoop() {
    return _objc_msgSend_41(this.ref.pointer, _sel_getCFRunLoop);
  }

  /// addTimer:forMode:
  void addTimer_forMode_(NSTimer timer, objc.NSString mode) {
    _objc_msgSend_49(this.ref.pointer, _sel_addTimer_forMode_,
        timer.ref.pointer, mode.ref.pointer);
  }

  /// addPort:forMode:
  void addPort_forMode_(NSPort aPort, objc.NSString mode) {
    _objc_msgSend_56(this.ref.pointer, _sel_addPort_forMode_, aPort.ref.pointer,
        mode.ref.pointer);
  }

  /// removePort:forMode:
  void removePort_forMode_(NSPort aPort, objc.NSString mode) {
    _objc_msgSend_56(this.ref.pointer, _sel_removePort_forMode_,
        aPort.ref.pointer, mode.ref.pointer);
  }

  /// limitDateForMode:
  objc.NSDate? limitDateForMode_(objc.NSString mode) {
    final _ret = _objc_msgSend_57(
        this.ref.pointer, _sel_limitDateForMode_, mode.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// acceptInputForMode:beforeDate:
  void acceptInputForMode_beforeDate_(
      objc.NSString mode, objc.NSDate limitDate) {
    _objc_msgSend_58(this.ref.pointer, _sel_acceptInputForMode_beforeDate_,
        mode.ref.pointer, limitDate.ref.pointer);
  }

  /// init
  NSRunLoop init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSRunLoop new1() {
    final _ret = _objc_msgSend_4(_class_NSRunLoop, _sel_new);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSRunLoop allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSRunLoop, _sel_allocWithZone_, zone);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSRunLoop alloc() {
    final _ret = _objc_msgSend_4(_class_NSRunLoop, _sel_alloc);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSRunLoop = objc.getClass("NSRunLoop");
late final _sel_currentRunLoop = objc.registerName("currentRunLoop");
final _objc_msgSend_39 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainRunLoop = objc.registerName("mainRunLoop");
final _objc_msgSend_40 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

final class __CFRunLoop extends ffi.Opaque {}

late final _sel_getCFRunLoop = objc.registerName("getCFRunLoop");
final _objc_msgSend_41 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__CFRunLoop> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__CFRunLoop> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSTimer
class NSTimer extends objc.NSObject {
  NSTimer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTimer] that points to the same underlying object as [other].
  NSTimer.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSTimer] that wraps the given raw object pointer.
  NSTimer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTimer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSTimer);
  }

  /// timerWithTimeInterval:invocation:repeats:
  static NSTimer timerWithTimeInterval_invocation_repeats_(
      double ti, objc.NSInvocation invocation, bool yesOrNo) {
    final _ret = _objc_msgSend_42(
        _class_NSTimer,
        _sel_timerWithTimeInterval_invocation_repeats_,
        ti,
        invocation.ref.pointer,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduledTimerWithTimeInterval:invocation:repeats:
  static NSTimer scheduledTimerWithTimeInterval_invocation_repeats_(
      double ti, objc.NSInvocation invocation, bool yesOrNo) {
    final _ret = _objc_msgSend_42(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_invocation_repeats_,
        ti,
        invocation.ref.pointer,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// timerWithTimeInterval:target:selector:userInfo:repeats:
  static NSTimer timerWithTimeInterval_target_selector_userInfo_repeats_(
      double ti,
      objc.ObjCObjectBase aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.ObjCObjectBase? userInfo,
      bool yesOrNo) {
    final _ret = _objc_msgSend_43(
        _class_NSTimer,
        _sel_timerWithTimeInterval_target_selector_userInfo_repeats_,
        ti,
        aTarget.ref.pointer,
        aSelector,
        userInfo?.ref.pointer ?? ffi.nullptr,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
  static NSTimer
      scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
          double ti,
          objc.ObjCObjectBase aTarget,
          ffi.Pointer<objc.ObjCSelector> aSelector,
          objc.ObjCObjectBase? userInfo,
          bool yesOrNo) {
    final _ret = _objc_msgSend_43(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_,
        ti,
        aTarget.ref.pointer,
        aSelector,
        userInfo?.ref.pointer ?? ffi.nullptr,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// timerWithTimeInterval:repeats:block:
  static NSTimer timerWithTimeInterval_repeats_block_(double interval,
      bool repeats, objc.ObjCBlock<ffi.Void Function(NSTimer)> block) {
    final _ret = _objc_msgSend_44(
        _class_NSTimer,
        _sel_timerWithTimeInterval_repeats_block_,
        interval,
        repeats,
        block.ref.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// scheduledTimerWithTimeInterval:repeats:block:
  static NSTimer scheduledTimerWithTimeInterval_repeats_block_(double interval,
      bool repeats, objc.ObjCBlock<ffi.Void Function(NSTimer)> block) {
    final _ret = _objc_msgSend_44(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_repeats_block_,
        interval,
        repeats,
        block.ref.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFireDate:interval:repeats:block:
  NSTimer initWithFireDate_interval_repeats_block_(
      objc.NSDate date,
      double interval,
      bool repeats,
      objc.ObjCBlock<ffi.Void Function(NSTimer)> block) {
    final _ret = _objc_msgSend_45(
        this.ref.retainAndReturnPointer(),
        _sel_initWithFireDate_interval_repeats_block_,
        date.ref.pointer,
        interval,
        repeats,
        block.ref.pointer);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithFireDate:interval:target:selector:userInfo:repeats:
  NSTimer initWithFireDate_interval_target_selector_userInfo_repeats_(
      objc.NSDate date,
      double ti,
      objc.ObjCObjectBase t,
      ffi.Pointer<objc.ObjCSelector> s,
      objc.ObjCObjectBase? ui,
      bool rep) {
    final _ret = _objc_msgSend_46(
        this.ref.retainAndReturnPointer(),
        _sel_initWithFireDate_interval_target_selector_userInfo_repeats_,
        date.ref.pointer,
        ti,
        t.ref.pointer,
        s,
        ui?.ref.pointer ?? ffi.nullptr,
        rep);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// fire
  void fire() {
    _objc_msgSend_12(this.ref.pointer, _sel_fire);
  }

  /// fireDate
  objc.NSDate get fireDate {
    final _ret = _objc_msgSend_47(this.ref.pointer, _sel_fireDate);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFireDate:
  set fireDate(objc.NSDate value) {
    return _objc_msgSend_48(
        this.ref.pointer, _sel_setFireDate_, value.ref.pointer);
  }

  /// timeInterval
  double get timeInterval {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_timeInterval)
        : _objc_msgSend_24(this.ref.pointer, _sel_timeInterval);
  }

  /// tolerance
  double get tolerance {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_tolerance)
        : _objc_msgSend_24(this.ref.pointer, _sel_tolerance);
  }

  /// setTolerance:
  set tolerance(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setTolerance_, value);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_12(this.ref.pointer, _sel_invalidate);
  }

  /// isValid
  bool get valid {
    return _objc_msgSend_11(this.ref.pointer, _sel_isValid);
  }

  /// userInfo
  objc.ObjCObjectBase? get userInfo {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// init
  NSTimer init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSTimer new1() {
    final _ret = _objc_msgSend_4(_class_NSTimer, _sel_new);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSTimer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSTimer, _sel_allocWithZone_, zone);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSTimer alloc() {
    final _ret = _objc_msgSend_4(_class_NSTimer, _sel_alloc);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSTimer = objc.getClass("NSTimer");
late final _sel_timerWithTimeInterval_invocation_repeats_ =
    objc.registerName("timerWithTimeInterval:invocation:repeats:");
final _objc_msgSend_42 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double ti,
                ffi.Pointer<objc.ObjCObject> invocation,
                ffi.Bool yesOrNo)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_scheduledTimerWithTimeInterval_invocation_repeats_ =
    objc.registerName("scheduledTimerWithTimeInterval:invocation:repeats:");
late final _sel_timerWithTimeInterval_target_selector_userInfo_repeats_ = objc
    .registerName("timerWithTimeInterval:target:selector:userInfo:repeats:");
final _objc_msgSend_43 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double ti,
                ffi.Pointer<objc.ObjCObject> aTarget,
                ffi.Pointer<objc.ObjCSelector> aSelector,
                ffi.Pointer<objc.ObjCObject> userInfo,
                ffi.Bool yesOrNo)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_ =
    objc.registerName(
        "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
void _ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSTimer_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(NSTimer)>`.
abstract final class ObjCBlock_ffiVoid_NSTimer {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(NSTimer)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(NSTimer)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)> fromFunction(
          void Function(NSTimer) fn) =>
      objc.ObjCBlock<ffi.Void Function(NSTimer)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSTimer_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(NSTimer.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(NSTimer)> listener(
      void Function(NSTimer) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSTimer_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) =>
            fn(NSTimer.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSTimer(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(NSTimer)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(NSTimer)>`.
extension ObjCBlock_ffiVoid_NSTimer_CallExtension
    on objc.ObjCBlock<ffi.Void Function(NSTimer)> {
  void call(NSTimer arg0) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0.ref.pointer);
}

late final _sel_timerWithTimeInterval_repeats_block_ =
    objc.registerName("timerWithTimeInterval:repeats:block:");
final _objc_msgSend_44 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double interval,
                ffi.Bool repeats,
                ffi.Pointer<objc.ObjCBlockImpl> block)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_scheduledTimerWithTimeInterval_repeats_block_ =
    objc.registerName("scheduledTimerWithTimeInterval:repeats:block:");
late final _sel_initWithFireDate_interval_repeats_block_ =
    objc.registerName("initWithFireDate:interval:repeats:block:");
final _objc_msgSend_45 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.Double interval,
                ffi.Bool repeats,
                ffi.Pointer<objc.ObjCBlockImpl> block)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_initWithFireDate_interval_target_selector_userInfo_repeats_ =
    objc.registerName(
        "initWithFireDate:interval:target:selector:userInfo:repeats:");
final _objc_msgSend_46 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.Double ti,
                ffi.Pointer<objc.ObjCObject> t,
                ffi.Pointer<objc.ObjCSelector> s,
                ffi.Pointer<objc.ObjCObject> ui,
                ffi.Bool rep)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_fire = objc.registerName("fire");
late final _sel_fireDate = objc.registerName("fireDate");
final _objc_msgSend_47 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFireDate_ = objc.registerName("setFireDate:");
final _objc_msgSend_48 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeInterval = objc.registerName("timeInterval");
late final _sel_tolerance = objc.registerName("tolerance");
late final _sel_setTolerance_ = objc.registerName("setTolerance:");
late final _sel_invalidate = objc.registerName("invalidate");
late final _sel_isValid = objc.registerName("isValid");
late final _sel_userInfo = objc.registerName("userInfo");
late final _sel_addTimer_forMode_ = objc.registerName("addTimer:forMode:");
final _objc_msgSend_49 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> timer,
                ffi.Pointer<objc.ObjCObject> mode)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSPort
class NSPort extends objc.NSObject {
  NSPort._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPort] that points to the same underlying object as [other].
  NSPort.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSPort] that wraps the given raw object pointer.
  NSPort.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPort].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_, _class_NSPort);
  }

  /// port
  static NSPort port() {
    final _ret = _objc_msgSend_50(_class_NSPort, _sel_port);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_12(this.ref.pointer, _sel_invalidate);
  }

  /// isValid
  bool get valid {
    return _objc_msgSend_11(this.ref.pointer, _sel_isValid);
  }

  /// setDelegate:
  void setDelegate_(objc.ObjCObjectBase? anObject) {
    _objc_msgSend_51(this.ref.pointer, _sel_setDelegate_,
        anObject?.ref.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? delegate() {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// scheduleInRunLoop:forMode:
  void scheduleInRunLoop_forMode_(NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_52(this.ref.pointer, _sel_scheduleInRunLoop_forMode_,
        runLoop.ref.pointer, mode.ref.pointer);
  }

  /// removeFromRunLoop:forMode:
  void removeFromRunLoop_forMode_(NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_52(this.ref.pointer, _sel_removeFromRunLoop_forMode_,
        runLoop.ref.pointer, mode.ref.pointer);
  }

  /// reservedSpaceLength
  int get reservedSpaceLength {
    return _objc_msgSend_53(this.ref.pointer, _sel_reservedSpaceLength);
  }

  /// sendBeforeDate:components:from:reserved:
  bool sendBeforeDate_components_from_reserved_(
      objc.NSDate limitDate,
      objc.NSMutableArray? components,
      NSPort? receivePort,
      int headerSpaceReserved) {
    return _objc_msgSend_54(
        this.ref.pointer,
        _sel_sendBeforeDate_components_from_reserved_,
        limitDate.ref.pointer,
        components?.ref.pointer ?? ffi.nullptr,
        receivePort?.ref.pointer ?? ffi.nullptr,
        headerSpaceReserved);
  }

  /// sendBeforeDate:msgid:components:from:reserved:
  bool sendBeforeDate_msgid_components_from_reserved_(
      objc.NSDate limitDate,
      int msgID,
      objc.NSMutableArray? components,
      NSPort? receivePort,
      int headerSpaceReserved) {
    return _objc_msgSend_55(
        this.ref.pointer,
        _sel_sendBeforeDate_msgid_components_from_reserved_,
        limitDate.ref.pointer,
        msgID,
        components?.ref.pointer ?? ffi.nullptr,
        receivePort?.ref.pointer ?? ffi.nullptr,
        headerSpaceReserved);
  }

  /// init
  NSPort init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSPort new1() {
    final _ret = _objc_msgSend_4(_class_NSPort, _sel_new);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSPort allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSPort, _sel_allocWithZone_, zone);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSPort alloc() {
    final _ret = _objc_msgSend_4(_class_NSPort, _sel_alloc);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSPort = objc.getClass("NSPort");
late final _sel_port = objc.registerName("port");
final _objc_msgSend_50 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_51 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> anObject)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_scheduleInRunLoop_forMode_ =
    objc.registerName("scheduleInRunLoop:forMode:");
final _objc_msgSend_52 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> runLoop,
                ffi.Pointer<objc.ObjCObject> mode)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeFromRunLoop_forMode_ =
    objc.registerName("removeFromRunLoop:forMode:");
late final _sel_reservedSpaceLength = objc.registerName("reservedSpaceLength");
final _objc_msgSend_53 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sendBeforeDate_components_from_reserved_ =
    objc.registerName("sendBeforeDate:components:from:reserved:");
final _objc_msgSend_54 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> limitDate,
                ffi.Pointer<objc.ObjCObject> components,
                ffi.Pointer<objc.ObjCObject> receivePort,
                ffi.UnsignedLong headerSpaceReserved)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_sendBeforeDate_msgid_components_from_reserved_ =
    objc.registerName("sendBeforeDate:msgid:components:from:reserved:");
final _objc_msgSend_55 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> limitDate,
                ffi.UnsignedLong msgID,
                ffi.Pointer<objc.ObjCObject> components,
                ffi.Pointer<objc.ObjCObject> receivePort,
                ffi.UnsignedLong headerSpaceReserved)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_addPort_forMode_ = objc.registerName("addPort:forMode:");
final _objc_msgSend_56 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aPort,
                ffi.Pointer<objc.ObjCObject> mode)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePort_forMode_ = objc.registerName("removePort:forMode:");
late final _sel_limitDateForMode_ = objc.registerName("limitDateForMode:");
final _objc_msgSend_57 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> mode)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_acceptInputForMode_beforeDate_ =
    objc.registerName("acceptInputForMode:beforeDate:");
final _objc_msgSend_58 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> mode,
                ffi.Pointer<objc.ObjCObject> limitDate)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addToRunLoop_forMode_ =
    objc.registerName("addToRunLoop:forMode:");
late final _sel_duration = objc.registerName("duration");
late final _sel_targetTimestamp = objc.registerName("targetTimestamp");
late final _sel_isPaused = objc.registerName("isPaused");
late final _sel_setPaused_ = objc.registerName("setPaused:");
late final _sel_frameInterval = objc.registerName("frameInterval");
final _objc_msgSend_59 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFrameInterval_ = objc.registerName("setFrameInterval:");
final _objc_msgSend_60 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_preferredFramesPerSecond =
    objc.registerName("preferredFramesPerSecond");
late final _sel_setPreferredFramesPerSecond_ =
    objc.registerName("setPreferredFramesPerSecond:");

final class CAFrameRateRange extends ffi.Struct {
  @ffi.Float()
  external double minimum;

  @ffi.Float()
  external double maximum;

  @ffi.Float()
  external double preferred;
}

late final _sel_preferredFrameRateRange =
    objc.registerName("preferredFrameRateRange");
final _objc_msgSend_61 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CAFrameRateRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CAFrameRateRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_61Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CAFrameRateRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CAFrameRateRange>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreferredFrameRateRange_ =
    objc.registerName("setPreferredFrameRateRange:");
final _objc_msgSend_62 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CAFrameRateRange value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CAFrameRateRange)>();
final _objc_msgSend_63 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCSelector> sel)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_maximumFramesPerSecond =
    objc.registerName("maximumFramesPerSecond");
late final _sel_calibratedLatency = objc.registerName("calibratedLatency");

enum UIScreenReferenceDisplayModeStatus {
  UIScreenReferenceDisplayModeStatusNotSupported(0),
  UIScreenReferenceDisplayModeStatusNotEnabled(1),
  UIScreenReferenceDisplayModeStatusLimited(2),
  UIScreenReferenceDisplayModeStatusEnabled(3);

  final int value;
  const UIScreenReferenceDisplayModeStatus(this.value);

  static UIScreenReferenceDisplayModeStatus fromValue(int value) =>
      switch (value) {
        0 => UIScreenReferenceDisplayModeStatusNotSupported,
        1 => UIScreenReferenceDisplayModeStatusNotEnabled,
        2 => UIScreenReferenceDisplayModeStatusLimited,
        3 => UIScreenReferenceDisplayModeStatusEnabled,
        _ => throw ArgumentError(
            "Unknown value for UIScreenReferenceDisplayModeStatus: $value"),
      };
}

late final _sel_referenceDisplayModeStatus =
    objc.registerName("referenceDisplayModeStatus");
final _objc_msgSend_64 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_currentEDRHeadroom = objc.registerName("currentEDRHeadroom");
late final _sel_potentialEDRHeadroom =
    objc.registerName("potentialEDRHeadroom");
late final _sel_focusedItem = objc.registerName("focusedItem");

/// UIView
class UIView extends UIResponder {
  UIView._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIView] that points to the same underlying object as [other].
  UIView.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIView] that wraps the given raw object pointer.
  UIView.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIView].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_, _class_UIView);
  }

  /// layerClass
  static objc.ObjCObjectBase getLayerClass() {
    final _ret = _objc_msgSend_4(_class_UIView, _sel_layerClass);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithFrame:
  UIView initWithFrame_(CGRect frame) {
    final _ret = _objc_msgSend_65(
        this.ref.retainAndReturnPointer(), _sel_initWithFrame_, frame);
    return UIView.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIView? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIView.castFromPointer(_ret, retain: false, release: true);
  }

  /// isUserInteractionEnabled
  bool get userInteractionEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isUserInteractionEnabled);
  }

  /// setUserInteractionEnabled:
  set userInteractionEnabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setUserInteractionEnabled_, value);
  }

  /// tag
  int get tag {
    return _objc_msgSend_59(this.ref.pointer, _sel_tag);
  }

  /// setTag:
  set tag(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setTag_, value);
  }

  /// layer
  CALayer get layer {
    final _ret = _objc_msgSend_114(this.ref.pointer, _sel_layer);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// canBecomeFocused
  bool get canBecomeFocused {
    return _objc_msgSend_11(this.ref.pointer, _sel_canBecomeFocused);
  }

  /// isFocused
  bool get focused {
    return _objc_msgSend_11(this.ref.pointer, _sel_isFocused);
  }

  /// focusGroupIdentifier
  objc.NSString? get focusGroupIdentifier {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_focusGroupIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFocusGroupIdentifier:
  set focusGroupIdentifier(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setFocusGroupIdentifier_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// focusGroupPriority
  int get focusGroupPriority {
    return _objc_msgSend_59(this.ref.pointer, _sel_focusGroupPriority);
  }

  /// setFocusGroupPriority:
  set focusGroupPriority(int value) {
    return _objc_msgSend_60(
        this.ref.pointer, _sel_setFocusGroupPriority_, value);
  }

  /// focusEffect
  UIFocusEffect? get focusEffect {
    final _ret = _objc_msgSend_115(this.ref.pointer, _sel_focusEffect);
    return _ret.address == 0
        ? null
        : UIFocusEffect.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFocusEffect:
  set focusEffect(UIFocusEffect? value) {
    return _objc_msgSend_116(this.ref.pointer, _sel_setFocusEffect_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// semanticContentAttribute
  UISemanticContentAttribute get semanticContentAttribute {
    final _ret =
        _objc_msgSend_117(this.ref.pointer, _sel_semanticContentAttribute);
    return UISemanticContentAttribute.fromValue(_ret);
  }

  /// setSemanticContentAttribute:
  set semanticContentAttribute(UISemanticContentAttribute value) {
    return _objc_msgSend_118(
        this.ref.pointer, _sel_setSemanticContentAttribute_, value.value);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_(
          UISemanticContentAttribute attribute) {
    final _ret = _objc_msgSend_119(
        _class_UIView,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_,
        attribute.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_(
          UISemanticContentAttribute semanticContentAttribute,
          UIUserInterfaceLayoutDirection layoutDirection) {
    final _ret = _objc_msgSend_120(
        _class_UIView,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_,
        semanticContentAttribute.value,
        layoutDirection.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// effectiveUserInterfaceLayoutDirection
  UIUserInterfaceLayoutDirection get effectiveUserInterfaceLayoutDirection {
    final _ret = _objc_msgSend_121(
        this.ref.pointer, _sel_effectiveUserInterfaceLayoutDirection);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// init
  UIView init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIView.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIView new1() {
    final _ret = _objc_msgSend_4(_class_UIView, _sel_new);
    return UIView.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIView allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIView, _sel_allocWithZone_, zone);
    return UIView.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIView alloc() {
    final _ret = _objc_msgSend_4(_class_UIView, _sel_alloc);
    return UIView.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIView = objc.getClass("UIView");
late final _sel_layerClass = objc.registerName("layerClass");
late final _sel_initWithFrame_ = objc.registerName("initWithFrame:");
final _objc_msgSend_65 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect frame)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_initWithCoder_ = objc.registerName("initWithCoder:");
final _objc_msgSend_66 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> coder)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isUserInteractionEnabled =
    objc.registerName("isUserInteractionEnabled");
late final _sel_setUserInteractionEnabled_ =
    objc.registerName("setUserInteractionEnabled:");
late final _sel_tag = objc.registerName("tag");
late final _sel_setTag_ = objc.registerName("setTag:");

/// CALayer
class CALayer extends objc.NSObject {
  CALayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CALayer] that points to the same underlying object as [other].
  CALayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CALayer] that wraps the given raw object pointer.
  CALayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CALayer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CALayer);
  }

  /// layer
  static CALayer layer() {
    final _ret = _objc_msgSend_4(_class_CALayer, _sel_layer);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CALayer init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithLayer:
  CALayer initWithLayer_(objc.ObjCObjectBase layer) {
    final _ret = _objc_msgSend_67(this.ref.retainAndReturnPointer(),
        _sel_initWithLayer_, layer.ref.pointer);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// presentationLayer
  CALayer? presentationLayer() {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_presentationLayer);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// modelLayer
  CALayer modelLayer() {
    final _ret = _objc_msgSend_4(this.ref.pointer, _sel_modelLayer);
    return CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultValueForKey:
  static objc.ObjCObjectBase? defaultValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_5(
        _class_CALayer, _sel_defaultValueForKey_, key.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// needsDisplayForKey:
  static bool needsDisplayForKey_(objc.NSString key) {
    return _objc_msgSend_68(
        _class_CALayer, _sel_needsDisplayForKey_, key.ref.pointer);
  }

  /// shouldArchiveValueForKey:
  bool shouldArchiveValueForKey_(objc.NSString key) {
    return _objc_msgSend_68(
        this.ref.pointer, _sel_shouldArchiveValueForKey_, key.ref.pointer);
  }

  /// bounds
  void getBounds(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_bounds)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_bounds);
  }

  /// setBounds:
  set bounds(CGRect value) {
    return _objc_msgSend_69(this.ref.pointer, _sel_setBounds_, value);
  }

  /// position
  void getPosition(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_70Stret(stret, this.ref.pointer, _sel_position)
        : stret.ref = _objc_msgSend_70(this.ref.pointer, _sel_position);
  }

  /// setPosition:
  set position(CGPoint value) {
    return _objc_msgSend_71(this.ref.pointer, _sel_setPosition_, value);
  }

  /// zPosition
  double get zPosition {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_zPosition)
        : _objc_msgSend_24(this.ref.pointer, _sel_zPosition);
  }

  /// setZPosition:
  set zPosition(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setZPosition_, value);
  }

  /// anchorPoint
  void getAnchorPoint(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_70Stret(stret, this.ref.pointer, _sel_anchorPoint)
        : stret.ref = _objc_msgSend_70(this.ref.pointer, _sel_anchorPoint);
  }

  /// setAnchorPoint:
  set anchorPoint(CGPoint value) {
    return _objc_msgSend_71(this.ref.pointer, _sel_setAnchorPoint_, value);
  }

  /// anchorPointZ
  double get anchorPointZ {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_anchorPointZ)
        : _objc_msgSend_24(this.ref.pointer, _sel_anchorPointZ);
  }

  /// setAnchorPointZ:
  set anchorPointZ(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setAnchorPointZ_, value);
  }

  /// transform
  void getTransform(ffi.Pointer<CATransform3D> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_72Stret(stret, this.ref.pointer, _sel_transform)
        : stret.ref = _objc_msgSend_72(this.ref.pointer, _sel_transform);
  }

  /// setTransform:
  set transform(CATransform3D value) {
    return _objc_msgSend_73(this.ref.pointer, _sel_setTransform_, value);
  }

  /// affineTransform
  void affineTransform(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_74Stret(stret, this.ref.pointer, _sel_affineTransform)
        : stret.ref = _objc_msgSend_74(this.ref.pointer, _sel_affineTransform);
  }

  /// setAffineTransform:
  void setAffineTransform_(CGAffineTransform m) {
    _objc_msgSend_75(this.ref.pointer, _sel_setAffineTransform_, m);
  }

  /// frame
  void getFrame(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_frame)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_frame);
  }

  /// setFrame:
  set frame(CGRect value) {
    return _objc_msgSend_69(this.ref.pointer, _sel_setFrame_, value);
  }

  /// isHidden
  bool get hidden {
    return _objc_msgSend_11(this.ref.pointer, _sel_isHidden);
  }

  /// setHidden:
  set hidden(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setHidden_, value);
  }

  /// isDoubleSided
  bool get doubleSided {
    return _objc_msgSend_11(this.ref.pointer, _sel_isDoubleSided);
  }

  /// setDoubleSided:
  set doubleSided(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setDoubleSided_, value);
  }

  /// isGeometryFlipped
  bool get geometryFlipped {
    return _objc_msgSend_11(this.ref.pointer, _sel_isGeometryFlipped);
  }

  /// setGeometryFlipped:
  set geometryFlipped(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setGeometryFlipped_, value);
  }

  /// contentsAreFlipped
  bool contentsAreFlipped() {
    return _objc_msgSend_11(this.ref.pointer, _sel_contentsAreFlipped);
  }

  /// superlayer
  CALayer? get superlayer {
    final _ret = _objc_msgSend_76(this.ref.pointer, _sel_superlayer);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// removeFromSuperlayer
  void removeFromSuperlayer() {
    _objc_msgSend_12(this.ref.pointer, _sel_removeFromSuperlayer);
  }

  /// sublayers
  objc.ObjCObjectBase? get sublayers {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_sublayers);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setSublayers:
  set sublayers(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(this.ref.pointer, _sel_setSublayers_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// addSublayer:
  void addSublayer_(CALayer layer) {
    _objc_msgSend_77(this.ref.pointer, _sel_addSublayer_, layer.ref.pointer);
  }

  /// insertSublayer:atIndex:
  void insertSublayer_atIndex_(CALayer layer, int idx) {
    _objc_msgSend_78(
        this.ref.pointer, _sel_insertSublayer_atIndex_, layer.ref.pointer, idx);
  }

  /// insertSublayer:below:
  void insertSublayer_below_(CALayer layer, CALayer? sibling) {
    _objc_msgSend_79(this.ref.pointer, _sel_insertSublayer_below_,
        layer.ref.pointer, sibling?.ref.pointer ?? ffi.nullptr);
  }

  /// insertSublayer:above:
  void insertSublayer_above_(CALayer layer, CALayer? sibling) {
    _objc_msgSend_79(this.ref.pointer, _sel_insertSublayer_above_,
        layer.ref.pointer, sibling?.ref.pointer ?? ffi.nullptr);
  }

  /// replaceSublayer:with:
  void replaceSublayer_with_(CALayer oldLayer, CALayer newLayer) {
    _objc_msgSend_80(this.ref.pointer, _sel_replaceSublayer_with_,
        oldLayer.ref.pointer, newLayer.ref.pointer);
  }

  /// sublayerTransform
  void getSublayerTransform(ffi.Pointer<CATransform3D> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_72Stret(stret, this.ref.pointer, _sel_sublayerTransform)
        : stret.ref =
            _objc_msgSend_72(this.ref.pointer, _sel_sublayerTransform);
  }

  /// setSublayerTransform:
  set sublayerTransform(CATransform3D value) {
    return _objc_msgSend_73(
        this.ref.pointer, _sel_setSublayerTransform_, value);
  }

  /// mask
  CALayer? get mask {
    final _ret = _objc_msgSend_76(this.ref.pointer, _sel_mask);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMask:
  set mask(CALayer? value) {
    return _objc_msgSend_81(
        this.ref.pointer, _sel_setMask_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// masksToBounds
  bool get masksToBounds {
    return _objc_msgSend_11(this.ref.pointer, _sel_masksToBounds);
  }

  /// setMasksToBounds:
  set masksToBounds(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setMasksToBounds_, value);
  }

  /// convertPoint:fromLayer:
  void convertPoint_fromLayer_(
      ffi.Pointer<CGPoint> stret, CGPoint p, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_82Stret(stret, this.ref.pointer,
            _sel_convertPoint_fromLayer_, p, l?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_82(this.ref.pointer,
            _sel_convertPoint_fromLayer_, p, l?.ref.pointer ?? ffi.nullptr);
  }

  /// convertPoint:toLayer:
  void convertPoint_toLayer_(
      ffi.Pointer<CGPoint> stret, CGPoint p, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_82Stret(stret, this.ref.pointer,
            _sel_convertPoint_toLayer_, p, l?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_82(this.ref.pointer,
            _sel_convertPoint_toLayer_, p, l?.ref.pointer ?? ffi.nullptr);
  }

  /// convertRect:fromLayer:
  void convertRect_fromLayer_(ffi.Pointer<CGRect> stret, CGRect r, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_83Stret(stret, this.ref.pointer,
            _sel_convertRect_fromLayer_, r, l?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_83(this.ref.pointer,
            _sel_convertRect_fromLayer_, r, l?.ref.pointer ?? ffi.nullptr);
  }

  /// convertRect:toLayer:
  void convertRect_toLayer_(ffi.Pointer<CGRect> stret, CGRect r, CALayer? l) {
    objc.useMsgSendVariants
        ? _objc_msgSend_83Stret(stret, this.ref.pointer,
            _sel_convertRect_toLayer_, r, l?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_83(this.ref.pointer,
            _sel_convertRect_toLayer_, r, l?.ref.pointer ?? ffi.nullptr);
  }

  /// convertTime:fromLayer:
  double convertTime_fromLayer_(double t, CALayer? l) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_84Fpret(this.ref.pointer, _sel_convertTime_fromLayer_,
            t, l?.ref.pointer ?? ffi.nullptr)
        : _objc_msgSend_84(this.ref.pointer, _sel_convertTime_fromLayer_, t,
            l?.ref.pointer ?? ffi.nullptr);
  }

  /// convertTime:toLayer:
  double convertTime_toLayer_(double t, CALayer? l) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_84Fpret(this.ref.pointer, _sel_convertTime_toLayer_, t,
            l?.ref.pointer ?? ffi.nullptr)
        : _objc_msgSend_84(this.ref.pointer, _sel_convertTime_toLayer_, t,
            l?.ref.pointer ?? ffi.nullptr);
  }

  /// hitTest:
  CALayer? hitTest_(CGPoint p) {
    final _ret = _objc_msgSend_85(this.ref.pointer, _sel_hitTest_, p);
    return _ret.address == 0
        ? null
        : CALayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// containsPoint:
  bool containsPoint_(CGPoint p) {
    return _objc_msgSend_86(this.ref.pointer, _sel_containsPoint_, p);
  }

  /// contents
  objc.ObjCObjectBase? get contents {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_contents);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setContents:
  set contents(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setContents_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// contentsRect
  void getContentsRect(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_contentsRect)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_contentsRect);
  }

  /// setContentsRect:
  set contentsRect(CGRect value) {
    return _objc_msgSend_69(this.ref.pointer, _sel_setContentsRect_, value);
  }

  /// contentsGravity
  objc.NSString get contentsGravity {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_contentsGravity);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setContentsGravity:
  set contentsGravity(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setContentsGravity_, value.ref.pointer);
  }

  /// contentsScale
  double get contentsScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_contentsScale)
        : _objc_msgSend_24(this.ref.pointer, _sel_contentsScale);
  }

  /// setContentsScale:
  set contentsScale(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setContentsScale_, value);
  }

  /// contentsCenter
  void getContentsCenter(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_contentsCenter)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_contentsCenter);
  }

  /// setContentsCenter:
  set contentsCenter(CGRect value) {
    return _objc_msgSend_69(this.ref.pointer, _sel_setContentsCenter_, value);
  }

  /// contentsFormat
  objc.NSString get contentsFormat {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_contentsFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setContentsFormat:
  set contentsFormat(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setContentsFormat_, value.ref.pointer);
  }

  /// wantsExtendedDynamicRangeContent
  bool get wantsExtendedDynamicRangeContent {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_wantsExtendedDynamicRangeContent);
  }

  /// setWantsExtendedDynamicRangeContent:
  set wantsExtendedDynamicRangeContent(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setWantsExtendedDynamicRangeContent_, value);
  }

  /// minificationFilter
  objc.NSString get minificationFilter {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_minificationFilter);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMinificationFilter:
  set minificationFilter(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setMinificationFilter_, value.ref.pointer);
  }

  /// magnificationFilter
  objc.NSString get magnificationFilter {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_magnificationFilter);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMagnificationFilter:
  set magnificationFilter(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setMagnificationFilter_, value.ref.pointer);
  }

  /// minificationFilterBias
  double get minificationFilterBias {
    return objc.useMsgSendVariants
        ? _objc_msgSend_15Fpret(this.ref.pointer, _sel_minificationFilterBias)
        : _objc_msgSend_15(this.ref.pointer, _sel_minificationFilterBias);
  }

  /// setMinificationFilterBias:
  set minificationFilterBias(double value) {
    return _objc_msgSend_88(
        this.ref.pointer, _sel_setMinificationFilterBias_, value);
  }

  /// isOpaque
  bool get opaque {
    return _objc_msgSend_11(this.ref.pointer, _sel_isOpaque);
  }

  /// setOpaque:
  set opaque(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setOpaque_, value);
  }

  /// display
  void display() {
    _objc_msgSend_12(this.ref.pointer, _sel_display);
  }

  /// setNeedsDisplay
  void setNeedsDisplay() {
    _objc_msgSend_12(this.ref.pointer, _sel_setNeedsDisplay);
  }

  /// setNeedsDisplayInRect:
  void setNeedsDisplayInRect_(CGRect r) {
    _objc_msgSend_89(this.ref.pointer, _sel_setNeedsDisplayInRect_, r);
  }

  /// needsDisplay
  bool needsDisplay() {
    return _objc_msgSend_11(this.ref.pointer, _sel_needsDisplay);
  }

  /// displayIfNeeded
  void displayIfNeeded() {
    _objc_msgSend_12(this.ref.pointer, _sel_displayIfNeeded);
  }

  /// needsDisplayOnBoundsChange
  bool get needsDisplayOnBoundsChange {
    return _objc_msgSend_11(this.ref.pointer, _sel_needsDisplayOnBoundsChange);
  }

  /// setNeedsDisplayOnBoundsChange:
  set needsDisplayOnBoundsChange(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setNeedsDisplayOnBoundsChange_, value);
  }

  /// drawsAsynchronously
  bool get drawsAsynchronously {
    return _objc_msgSend_11(this.ref.pointer, _sel_drawsAsynchronously);
  }

  /// setDrawsAsynchronously:
  set drawsAsynchronously(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setDrawsAsynchronously_, value);
  }

  /// drawInContext:
  void drawInContext_(ffi.Pointer<CGContext> ctx) {
    _objc_msgSend_90(this.ref.pointer, _sel_drawInContext_, ctx);
  }

  /// renderInContext:
  void renderInContext_(ffi.Pointer<CGContext> ctx) {
    _objc_msgSend_90(this.ref.pointer, _sel_renderInContext_, ctx);
  }

  /// edgeAntialiasingMask
  CAEdgeAntialiasingMask get edgeAntialiasingMask {
    final _ret = _objc_msgSend_91(this.ref.pointer, _sel_edgeAntialiasingMask);
    return CAEdgeAntialiasingMask.fromValue(_ret);
  }

  /// setEdgeAntialiasingMask:
  set edgeAntialiasingMask(CAEdgeAntialiasingMask value) {
    return _objc_msgSend_92(
        this.ref.pointer, _sel_setEdgeAntialiasingMask_, value.value);
  }

  /// allowsEdgeAntialiasing
  bool get allowsEdgeAntialiasing {
    return _objc_msgSend_11(this.ref.pointer, _sel_allowsEdgeAntialiasing);
  }

  /// setAllowsEdgeAntialiasing:
  set allowsEdgeAntialiasing(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setAllowsEdgeAntialiasing_, value);
  }

  /// backgroundColor
  ffi.Pointer<CGColor> get backgroundColor {
    return _objc_msgSend_93(this.ref.pointer, _sel_backgroundColor);
  }

  /// setBackgroundColor:
  set backgroundColor(ffi.Pointer<CGColor> value) {
    return _objc_msgSend_94(this.ref.pointer, _sel_setBackgroundColor_, value);
  }

  /// cornerRadius
  double get cornerRadius {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_cornerRadius)
        : _objc_msgSend_24(this.ref.pointer, _sel_cornerRadius);
  }

  /// setCornerRadius:
  set cornerRadius(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setCornerRadius_, value);
  }

  /// maskedCorners
  CACornerMask get maskedCorners {
    final _ret = _objc_msgSend_95(this.ref.pointer, _sel_maskedCorners);
    return CACornerMask.fromValue(_ret);
  }

  /// setMaskedCorners:
  set maskedCorners(CACornerMask value) {
    return _objc_msgSend_96(
        this.ref.pointer, _sel_setMaskedCorners_, value.value);
  }

  /// cornerCurve
  objc.NSString get cornerCurve {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_cornerCurve);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCornerCurve:
  set cornerCurve(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setCornerCurve_, value.ref.pointer);
  }

  /// cornerCurveExpansionFactor:
  static double cornerCurveExpansionFactor_(objc.NSString curve) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_97Fpret(
            _class_CALayer, _sel_cornerCurveExpansionFactor_, curve.ref.pointer)
        : _objc_msgSend_97(_class_CALayer, _sel_cornerCurveExpansionFactor_,
            curve.ref.pointer);
  }

  /// borderWidth
  double get borderWidth {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_borderWidth)
        : _objc_msgSend_24(this.ref.pointer, _sel_borderWidth);
  }

  /// setBorderWidth:
  set borderWidth(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setBorderWidth_, value);
  }

  /// borderColor
  ffi.Pointer<CGColor> get borderColor {
    return _objc_msgSend_93(this.ref.pointer, _sel_borderColor);
  }

  /// setBorderColor:
  set borderColor(ffi.Pointer<CGColor> value) {
    return _objc_msgSend_94(this.ref.pointer, _sel_setBorderColor_, value);
  }

  /// opacity
  double get opacity {
    return objc.useMsgSendVariants
        ? _objc_msgSend_15Fpret(this.ref.pointer, _sel_opacity)
        : _objc_msgSend_15(this.ref.pointer, _sel_opacity);
  }

  /// setOpacity:
  set opacity(double value) {
    return _objc_msgSend_88(this.ref.pointer, _sel_setOpacity_, value);
  }

  /// allowsGroupOpacity
  bool get allowsGroupOpacity {
    return _objc_msgSend_11(this.ref.pointer, _sel_allowsGroupOpacity);
  }

  /// setAllowsGroupOpacity:
  set allowsGroupOpacity(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setAllowsGroupOpacity_, value);
  }

  /// compositingFilter
  objc.ObjCObjectBase? get compositingFilter {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_compositingFilter);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setCompositingFilter:
  set compositingFilter(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(this.ref.pointer, _sel_setCompositingFilter_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// filters
  objc.NSArray? get filters {
    final _ret = _objc_msgSend_98(this.ref.pointer, _sel_filters);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFilters:
  set filters(objc.NSArray? value) {
    return _objc_msgSend_99(
        this.ref.pointer, _sel_setFilters_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// backgroundFilters
  objc.NSArray? get backgroundFilters {
    final _ret = _objc_msgSend_98(this.ref.pointer, _sel_backgroundFilters);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setBackgroundFilters:
  set backgroundFilters(objc.NSArray? value) {
    return _objc_msgSend_99(this.ref.pointer, _sel_setBackgroundFilters_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// shouldRasterize
  bool get shouldRasterize {
    return _objc_msgSend_11(this.ref.pointer, _sel_shouldRasterize);
  }

  /// setShouldRasterize:
  set shouldRasterize(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setShouldRasterize_, value);
  }

  /// rasterizationScale
  double get rasterizationScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_rasterizationScale)
        : _objc_msgSend_24(this.ref.pointer, _sel_rasterizationScale);
  }

  /// setRasterizationScale:
  set rasterizationScale(double value) {
    return _objc_msgSend_37(
        this.ref.pointer, _sel_setRasterizationScale_, value);
  }

  /// shadowColor
  ffi.Pointer<CGColor> get shadowColor {
    return _objc_msgSend_93(this.ref.pointer, _sel_shadowColor);
  }

  /// setShadowColor:
  set shadowColor(ffi.Pointer<CGColor> value) {
    return _objc_msgSend_94(this.ref.pointer, _sel_setShadowColor_, value);
  }

  /// shadowOpacity
  double get shadowOpacity {
    return objc.useMsgSendVariants
        ? _objc_msgSend_15Fpret(this.ref.pointer, _sel_shadowOpacity)
        : _objc_msgSend_15(this.ref.pointer, _sel_shadowOpacity);
  }

  /// setShadowOpacity:
  set shadowOpacity(double value) {
    return _objc_msgSend_88(this.ref.pointer, _sel_setShadowOpacity_, value);
  }

  /// shadowOffset
  void getShadowOffset(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_shadowOffset)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_shadowOffset);
  }

  /// setShadowOffset:
  set shadowOffset(CGSize value) {
    return _objc_msgSend_100(this.ref.pointer, _sel_setShadowOffset_, value);
  }

  /// shadowRadius
  double get shadowRadius {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_shadowRadius)
        : _objc_msgSend_24(this.ref.pointer, _sel_shadowRadius);
  }

  /// setShadowRadius:
  set shadowRadius(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setShadowRadius_, value);
  }

  /// shadowPath
  ffi.Pointer<CGPath> get shadowPath {
    return _objc_msgSend_101(this.ref.pointer, _sel_shadowPath);
  }

  /// setShadowPath:
  set shadowPath(ffi.Pointer<CGPath> value) {
    return _objc_msgSend_102(this.ref.pointer, _sel_setShadowPath_, value);
  }

  /// preferredFrameSize
  void preferredFrameSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(
            stret, this.ref.pointer, _sel_preferredFrameSize)
        : stret.ref =
            _objc_msgSend_30(this.ref.pointer, _sel_preferredFrameSize);
  }

  /// setNeedsLayout
  void setNeedsLayout() {
    _objc_msgSend_12(this.ref.pointer, _sel_setNeedsLayout);
  }

  /// needsLayout
  bool needsLayout() {
    return _objc_msgSend_11(this.ref.pointer, _sel_needsLayout);
  }

  /// layoutIfNeeded
  void layoutIfNeeded() {
    _objc_msgSend_12(this.ref.pointer, _sel_layoutIfNeeded);
  }

  /// layoutSublayers
  void layoutSublayers() {
    _objc_msgSend_12(this.ref.pointer, _sel_layoutSublayers);
  }

  /// defaultActionForKey:
  static objc.ObjCObjectBase? defaultActionForKey_(objc.NSString event) {
    final _ret = _objc_msgSend_5(
        _class_CALayer, _sel_defaultActionForKey_, event.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// actionForKey:
  objc.ObjCObjectBase? actionForKey_(objc.NSString event) {
    final _ret = _objc_msgSend_5(
        this.ref.pointer, _sel_actionForKey_, event.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// actions
  objc.ObjCObjectBase? get actions {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_actions);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setActions:
  set actions(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setActions_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// addAnimation:forKey:
  void addAnimation_forKey_(CAAnimation anim, objc.NSString? key) {
    _objc_msgSend_108(this.ref.pointer, _sel_addAnimation_forKey_,
        anim.ref.pointer, key?.ref.pointer ?? ffi.nullptr);
  }

  /// removeAllAnimations
  void removeAllAnimations() {
    _objc_msgSend_12(this.ref.pointer, _sel_removeAllAnimations);
  }

  /// removeAnimationForKey:
  void removeAnimationForKey_(objc.NSString key) {
    _objc_msgSend_109(
        this.ref.pointer, _sel_removeAnimationForKey_, key.ref.pointer);
  }

  /// animationKeys
  objc.NSArray? animationKeys() {
    final _ret = _objc_msgSend_98(this.ref.pointer, _sel_animationKeys);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// animationForKey:
  CAAnimation? animationForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_110(
        this.ref.pointer, _sel_animationForKey_, key.ref.pointer);
    return _ret.address == 0
        ? null
        : CAAnimation.castFromPointer(_ret, retain: true, release: true);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer, _sel_setName_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// style
  objc.NSDictionary? get style {
    final _ret = _objc_msgSend_112(this.ref.pointer, _sel_style);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStyle:
  set style(objc.NSDictionary? value) {
    return _objc_msgSend_113(
        this.ref.pointer, _sel_setStyle_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// new
  static CALayer new1() {
    final _ret = _objc_msgSend_4(_class_CALayer, _sel_new);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CALayer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_CALayer, _sel_allocWithZone_, zone);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CALayer alloc() {
    final _ret = _objc_msgSend_4(_class_CALayer, _sel_alloc);
    return CALayer.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_CALayer = objc.getClass("CALayer");
late final _sel_layer = objc.registerName("layer");
late final _sel_initWithLayer_ = objc.registerName("initWithLayer:");
final _objc_msgSend_67 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> layer)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_presentationLayer = objc.registerName("presentationLayer");
late final _sel_modelLayer = objc.registerName("modelLayer");
late final _sel_defaultValueForKey_ = objc.registerName("defaultValueForKey:");
late final _sel_needsDisplayForKey_ = objc.registerName("needsDisplayForKey:");
final _objc_msgSend_68 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> key)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shouldArchiveValueForKey_ =
    objc.registerName("shouldArchiveValueForKey:");
late final _sel_setBounds_ = objc.registerName("setBounds:");
final _objc_msgSend_69 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_position = objc.registerName("position");
final _objc_msgSend_70 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_70Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPosition_ = objc.registerName("setPosition:");
final _objc_msgSend_71 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_zPosition = objc.registerName("zPosition");
late final _sel_setZPosition_ = objc.registerName("setZPosition:");
late final _sel_anchorPoint = objc.registerName("anchorPoint");
late final _sel_setAnchorPoint_ = objc.registerName("setAnchorPoint:");
late final _sel_anchorPointZ = objc.registerName("anchorPointZ");
late final _sel_setAnchorPointZ_ = objc.registerName("setAnchorPointZ:");

final class CATransform3D extends ffi.Struct {
  @ffi.Double()
  external double m11;

  @ffi.Double()
  external double m12;

  @ffi.Double()
  external double m13;

  @ffi.Double()
  external double m14;

  @ffi.Double()
  external double m21;

  @ffi.Double()
  external double m22;

  @ffi.Double()
  external double m23;

  @ffi.Double()
  external double m24;

  @ffi.Double()
  external double m31;

  @ffi.Double()
  external double m32;

  @ffi.Double()
  external double m33;

  @ffi.Double()
  external double m34;

  @ffi.Double()
  external double m41;

  @ffi.Double()
  external double m42;

  @ffi.Double()
  external double m43;

  @ffi.Double()
  external double m44;
}

late final _sel_transform = objc.registerName("transform");
final _objc_msgSend_72 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CATransform3D Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CATransform3D Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_72Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CATransform3D>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CATransform3D>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTransform_ = objc.registerName("setTransform:");
final _objc_msgSend_73 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CATransform3D value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CATransform3D)>();

final class CGAffineTransform extends ffi.Struct {
  @ffi.Double()
  external double a;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double c;

  @ffi.Double()
  external double d;

  @ffi.Double()
  external double tx;

  @ffi.Double()
  external double ty;
}

late final _sel_affineTransform = objc.registerName("affineTransform");
final _objc_msgSend_74 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGAffineTransform Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_74Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGAffineTransform>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGAffineTransform>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAffineTransform_ = objc.registerName("setAffineTransform:");
final _objc_msgSend_75 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform m)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>();
late final _sel_frame = objc.registerName("frame");
late final _sel_setFrame_ = objc.registerName("setFrame:");
late final _sel_isHidden = objc.registerName("isHidden");
late final _sel_setHidden_ = objc.registerName("setHidden:");
late final _sel_isDoubleSided = objc.registerName("isDoubleSided");
late final _sel_setDoubleSided_ = objc.registerName("setDoubleSided:");
late final _sel_isGeometryFlipped = objc.registerName("isGeometryFlipped");
late final _sel_setGeometryFlipped_ = objc.registerName("setGeometryFlipped:");
late final _sel_contentsAreFlipped = objc.registerName("contentsAreFlipped");
late final _sel_superlayer = objc.registerName("superlayer");
final _objc_msgSend_76 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_removeFromSuperlayer =
    objc.registerName("removeFromSuperlayer");
late final _sel_sublayers = objc.registerName("sublayers");
late final _sel_setSublayers_ = objc.registerName("setSublayers:");
late final _sel_addSublayer_ = objc.registerName("addSublayer:");
final _objc_msgSend_77 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> layer)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertSublayer_atIndex_ =
    objc.registerName("insertSublayer:atIndex:");
final _objc_msgSend_78 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> layer,
                ffi.UnsignedInt idx)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_insertSublayer_below_ =
    objc.registerName("insertSublayer:below:");
final _objc_msgSend_79 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> layer,
                ffi.Pointer<objc.ObjCObject> sibling)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertSublayer_above_ =
    objc.registerName("insertSublayer:above:");
late final _sel_replaceSublayer_with_ =
    objc.registerName("replaceSublayer:with:");
final _objc_msgSend_80 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> oldLayer,
                ffi.Pointer<objc.ObjCObject> newLayer)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sublayerTransform = objc.registerName("sublayerTransform");
late final _sel_setSublayerTransform_ =
    objc.registerName("setSublayerTransform:");
late final _sel_mask = objc.registerName("mask");
late final _sel_setMask_ = objc.registerName("setMask:");
final _objc_msgSend_81 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_masksToBounds = objc.registerName("masksToBounds");
late final _sel_setMasksToBounds_ = objc.registerName("setMasksToBounds:");
late final _sel_convertPoint_fromLayer_ =
    objc.registerName("convertPoint:fromLayer:");
final _objc_msgSend_82 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint p,
                ffi.Pointer<objc.ObjCObject> l)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_82Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint p,
                ffi.Pointer<objc.ObjCObject> l)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGPoint>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertPoint_toLayer_ =
    objc.registerName("convertPoint:toLayer:");
late final _sel_convertRect_fromLayer_ =
    objc.registerName("convertRect:fromLayer:");
final _objc_msgSend_83 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect r,
                ffi.Pointer<objc.ObjCObject> l)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_83Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGRect>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect r,
                ffi.Pointer<objc.ObjCObject> l)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGRect>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertRect_toLayer_ =
    objc.registerName("convertRect:toLayer:");
late final _sel_convertTime_fromLayer_ =
    objc.registerName("convertTime:fromLayer:");
final _objc_msgSend_84 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double t,
                ffi.Pointer<objc.ObjCObject> l)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_84Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double t,
                ffi.Pointer<objc.ObjCObject> l)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertTime_toLayer_ =
    objc.registerName("convertTime:toLayer:");
late final _sel_hitTest_ = objc.registerName("hitTest:");
final _objc_msgSend_85 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint p)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_containsPoint_ = objc.registerName("containsPoint:");
final _objc_msgSend_86 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint p)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_contents = objc.registerName("contents");
late final _sel_setContents_ = objc.registerName("setContents:");
late final _sel_contentsRect = objc.registerName("contentsRect");
late final _sel_setContentsRect_ = objc.registerName("setContentsRect:");
late final _sel_contentsGravity = objc.registerName("contentsGravity");
late final _sel_setContentsGravity_ = objc.registerName("setContentsGravity:");
final _objc_msgSend_87 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contentsScale = objc.registerName("contentsScale");
late final _sel_setContentsScale_ = objc.registerName("setContentsScale:");
late final _sel_contentsCenter = objc.registerName("contentsCenter");
late final _sel_setContentsCenter_ = objc.registerName("setContentsCenter:");
late final _sel_contentsFormat = objc.registerName("contentsFormat");
late final _sel_setContentsFormat_ = objc.registerName("setContentsFormat:");
late final _sel_wantsExtendedDynamicRangeContent =
    objc.registerName("wantsExtendedDynamicRangeContent");
late final _sel_setWantsExtendedDynamicRangeContent_ =
    objc.registerName("setWantsExtendedDynamicRangeContent:");
late final _sel_minificationFilter = objc.registerName("minificationFilter");
late final _sel_setMinificationFilter_ =
    objc.registerName("setMinificationFilter:");
late final _sel_magnificationFilter = objc.registerName("magnificationFilter");
late final _sel_setMagnificationFilter_ =
    objc.registerName("setMagnificationFilter:");
late final _sel_minificationFilterBias =
    objc.registerName("minificationFilterBias");
late final _sel_setMinificationFilterBias_ =
    objc.registerName("setMinificationFilterBias:");
final _objc_msgSend_88 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_isOpaque = objc.registerName("isOpaque");
late final _sel_setOpaque_ = objc.registerName("setOpaque:");
late final _sel_display = objc.registerName("display");
late final _sel_setNeedsDisplay = objc.registerName("setNeedsDisplay");
late final _sel_setNeedsDisplayInRect_ =
    objc.registerName("setNeedsDisplayInRect:");
final _objc_msgSend_89 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect r)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_needsDisplay = objc.registerName("needsDisplay");
late final _sel_displayIfNeeded = objc.registerName("displayIfNeeded");
late final _sel_needsDisplayOnBoundsChange =
    objc.registerName("needsDisplayOnBoundsChange");
late final _sel_setNeedsDisplayOnBoundsChange_ =
    objc.registerName("setNeedsDisplayOnBoundsChange:");
late final _sel_drawsAsynchronously = objc.registerName("drawsAsynchronously");
late final _sel_setDrawsAsynchronously_ =
    objc.registerName("setDrawsAsynchronously:");

final class CGContext extends ffi.Opaque {}

late final _sel_drawInContext_ = objc.registerName("drawInContext:");
final _objc_msgSend_90 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGContext> ctx)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGContext>)>();
late final _sel_renderInContext_ = objc.registerName("renderInContext:");

enum CAEdgeAntialiasingMask {
  kCALayerLeftEdge(1),
  kCALayerRightEdge(2),
  kCALayerBottomEdge(4),
  kCALayerTopEdge(8);

  final int value;
  const CAEdgeAntialiasingMask(this.value);

  static CAEdgeAntialiasingMask fromValue(int value) => switch (value) {
        1 => kCALayerLeftEdge,
        2 => kCALayerRightEdge,
        4 => kCALayerBottomEdge,
        8 => kCALayerTopEdge,
        _ => throw ArgumentError(
            "Unknown value for CAEdgeAntialiasingMask: $value"),
      };
}

late final _sel_edgeAntialiasingMask =
    objc.registerName("edgeAntialiasingMask");
final _objc_msgSend_91 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEdgeAntialiasingMask_ =
    objc.registerName("setEdgeAntialiasingMask:");
final _objc_msgSend_92 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_allowsEdgeAntialiasing =
    objc.registerName("allowsEdgeAntialiasing");
late final _sel_setAllowsEdgeAntialiasing_ =
    objc.registerName("setAllowsEdgeAntialiasing:");

final class CGColor extends ffi.Opaque {}

late final _sel_backgroundColor = objc.registerName("backgroundColor");
final _objc_msgSend_93 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGColor> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGColor> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setBackgroundColor_ = objc.registerName("setBackgroundColor:");
final _objc_msgSend_94 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>)>();
late final _sel_cornerRadius = objc.registerName("cornerRadius");
late final _sel_setCornerRadius_ = objc.registerName("setCornerRadius:");

enum CACornerMask {
  kCALayerMinXMinYCorner(1),
  kCALayerMaxXMinYCorner(2),
  kCALayerMinXMaxYCorner(4),
  kCALayerMaxXMaxYCorner(8);

  final int value;
  const CACornerMask(this.value);

  static CACornerMask fromValue(int value) => switch (value) {
        1 => kCALayerMinXMinYCorner,
        2 => kCALayerMaxXMinYCorner,
        4 => kCALayerMinXMaxYCorner,
        8 => kCALayerMaxXMaxYCorner,
        _ => throw ArgumentError("Unknown value for CACornerMask: $value"),
      };
}

late final _sel_maskedCorners = objc.registerName("maskedCorners");
final _objc_msgSend_95 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMaskedCorners_ = objc.registerName("setMaskedCorners:");
final _objc_msgSend_96 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_cornerCurve = objc.registerName("cornerCurve");
late final _sel_setCornerCurve_ = objc.registerName("setCornerCurve:");
late final _sel_cornerCurveExpansionFactor_ =
    objc.registerName("cornerCurveExpansionFactor:");
final _objc_msgSend_97 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> curve)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_97Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> curve)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_borderWidth = objc.registerName("borderWidth");
late final _sel_setBorderWidth_ = objc.registerName("setBorderWidth:");
late final _sel_borderColor = objc.registerName("borderColor");
late final _sel_setBorderColor_ = objc.registerName("setBorderColor:");
late final _sel_opacity = objc.registerName("opacity");
late final _sel_setOpacity_ = objc.registerName("setOpacity:");
late final _sel_allowsGroupOpacity = objc.registerName("allowsGroupOpacity");
late final _sel_setAllowsGroupOpacity_ =
    objc.registerName("setAllowsGroupOpacity:");
late final _sel_compositingFilter = objc.registerName("compositingFilter");
late final _sel_setCompositingFilter_ =
    objc.registerName("setCompositingFilter:");
late final _sel_filters = objc.registerName("filters");
final _objc_msgSend_98 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFilters_ = objc.registerName("setFilters:");
final _objc_msgSend_99 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_backgroundFilters = objc.registerName("backgroundFilters");
late final _sel_setBackgroundFilters_ =
    objc.registerName("setBackgroundFilters:");
late final _sel_shouldRasterize = objc.registerName("shouldRasterize");
late final _sel_setShouldRasterize_ = objc.registerName("setShouldRasterize:");
late final _sel_rasterizationScale = objc.registerName("rasterizationScale");
late final _sel_setRasterizationScale_ =
    objc.registerName("setRasterizationScale:");
late final _sel_shadowColor = objc.registerName("shadowColor");
late final _sel_setShadowColor_ = objc.registerName("setShadowColor:");
late final _sel_shadowOpacity = objc.registerName("shadowOpacity");
late final _sel_setShadowOpacity_ = objc.registerName("setShadowOpacity:");
late final _sel_shadowOffset = objc.registerName("shadowOffset");
late final _sel_setShadowOffset_ = objc.registerName("setShadowOffset:");
final _objc_msgSend_100 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGSize value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGSize)>();
late final _sel_shadowRadius = objc.registerName("shadowRadius");
late final _sel_setShadowRadius_ = objc.registerName("setShadowRadius:");

final class CGPath extends ffi.Opaque {}

late final _sel_shadowPath = objc.registerName("shadowPath");
final _objc_msgSend_101 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGPath> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGPath> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setShadowPath_ = objc.registerName("setShadowPath:");
final _objc_msgSend_102 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGPath> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGPath>)>();
late final _sel_preferredFrameSize = objc.registerName("preferredFrameSize");
late final _sel_setNeedsLayout = objc.registerName("setNeedsLayout");
late final _sel_needsLayout = objc.registerName("needsLayout");
late final _sel_layoutIfNeeded = objc.registerName("layoutIfNeeded");
late final _sel_layoutSublayers = objc.registerName("layoutSublayers");
late final _sel_defaultActionForKey_ =
    objc.registerName("defaultActionForKey:");
late final _sel_actionForKey_ = objc.registerName("actionForKey:");
late final _sel_actions = objc.registerName("actions");
late final _sel_setActions_ = objc.registerName("setActions:");

/// CAAnimation
class CAAnimation extends objc.NSObject {
  CAAnimation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CAAnimation] that points to the same underlying object as [other].
  CAAnimation.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CAAnimation] that wraps the given raw object pointer.
  CAAnimation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CAAnimation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CAAnimation);
  }

  /// animation
  static CAAnimation animation() {
    final _ret = _objc_msgSend_4(_class_CAAnimation, _sel_animation);
    return CAAnimation.castFromPointer(_ret, retain: true, release: true);
  }

  /// defaultValueForKey:
  static objc.ObjCObjectBase? defaultValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_5(
        _class_CAAnimation, _sel_defaultValueForKey_, key.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// shouldArchiveValueForKey:
  bool shouldArchiveValueForKey_(objc.NSString key) {
    return _objc_msgSend_68(
        this.ref.pointer, _sel_shouldArchiveValueForKey_, key.ref.pointer);
  }

  /// timingFunction
  CAMediaTimingFunction? get timingFunction {
    final _ret = _objc_msgSend_106(this.ref.pointer, _sel_timingFunction);
    return _ret.address == 0
        ? null
        : CAMediaTimingFunction.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setTimingFunction:
  set timingFunction(CAMediaTimingFunction? value) {
    return _objc_msgSend_107(this.ref.pointer, _sel_setTimingFunction_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// isRemovedOnCompletion
  bool get removedOnCompletion {
    return _objc_msgSend_11(this.ref.pointer, _sel_isRemovedOnCompletion);
  }

  /// setRemovedOnCompletion:
  set removedOnCompletion(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setRemovedOnCompletion_, value);
  }

  /// preferredFrameRateRange
  void getPreferredFrameRateRange(ffi.Pointer<CAFrameRateRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_61Stret(
            stret, this.ref.pointer, _sel_preferredFrameRateRange)
        : stret.ref =
            _objc_msgSend_61(this.ref.pointer, _sel_preferredFrameRateRange);
  }

  /// setPreferredFrameRateRange:
  set preferredFrameRateRange(CAFrameRateRange value) {
    return _objc_msgSend_62(
        this.ref.pointer, _sel_setPreferredFrameRateRange_, value);
  }

  /// init
  CAAnimation init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return CAAnimation.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static CAAnimation new1() {
    final _ret = _objc_msgSend_4(_class_CAAnimation, _sel_new);
    return CAAnimation.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CAAnimation allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_CAAnimation, _sel_allocWithZone_, zone);
    return CAAnimation.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CAAnimation alloc() {
    final _ret = _objc_msgSend_4(_class_CAAnimation, _sel_alloc);
    return CAAnimation.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_CAAnimation = objc.getClass("CAAnimation");
late final _sel_animation = objc.registerName("animation");

/// CAMediaTimingFunction
class CAMediaTimingFunction extends objc.NSObject {
  CAMediaTimingFunction._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CAMediaTimingFunction] that points to the same underlying object as [other].
  CAMediaTimingFunction.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CAMediaTimingFunction] that wraps the given raw object pointer.
  CAMediaTimingFunction.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CAMediaTimingFunction].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CAMediaTimingFunction);
  }

  /// functionWithName:
  static CAMediaTimingFunction functionWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_103(
        _class_CAMediaTimingFunction, _sel_functionWithName_, name.ref.pointer);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// functionWithControlPoints::::
  static CAMediaTimingFunction functionWithControlPoints____(
      double c1x, double c1y, double c2x, double c2y) {
    final _ret = _objc_msgSend_104(_class_CAMediaTimingFunction,
        _sel_functionWithControlPoints____, c1x, c1y, c2x, c2y);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithControlPoints::::
  CAMediaTimingFunction initWithControlPoints____(
      double c1x, double c1y, double c2x, double c2y) {
    final _ret = _objc_msgSend_104(this.ref.retainAndReturnPointer(),
        _sel_initWithControlPoints____, c1x, c1y, c2x, c2y);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// getControlPointAtIndex:values:
  void getControlPointAtIndex_values_(int idx, ffi.Pointer<ffi.Float> ptr) {
    _objc_msgSend_105(
        this.ref.pointer, _sel_getControlPointAtIndex_values_, idx, ptr);
  }

  /// init
  CAMediaTimingFunction init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static CAMediaTimingFunction new1() {
    final _ret = _objc_msgSend_4(_class_CAMediaTimingFunction, _sel_new);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static CAMediaTimingFunction allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_CAMediaTimingFunction, _sel_allocWithZone_, zone);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static CAMediaTimingFunction alloc() {
    final _ret = _objc_msgSend_4(_class_CAMediaTimingFunction, _sel_alloc);
    return CAMediaTimingFunction.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_CAMediaTimingFunction =
    objc.getClass("CAMediaTimingFunction");
late final _sel_functionWithName_ = objc.registerName("functionWithName:");
final _objc_msgSend_103 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_functionWithControlPoints____ =
    objc.registerName("functionWithControlPoints::::");
final _objc_msgSend_104 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float c1x,
                ffi.Float c1y,
                ffi.Float c2x,
                ffi.Float c2y)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double, double)>();
late final _sel_initWithControlPoints____ =
    objc.registerName("initWithControlPoints::::");
late final _sel_getControlPointAtIndex_values_ =
    objc.registerName("getControlPointAtIndex:values:");
final _objc_msgSend_105 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Size idx,
                ffi.Pointer<ffi.Float> ptr)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Float>)>();
late final _sel_timingFunction = objc.registerName("timingFunction");
final _objc_msgSend_106 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTimingFunction_ = objc.registerName("setTimingFunction:");
final _objc_msgSend_107 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isRemovedOnCompletion =
    objc.registerName("isRemovedOnCompletion");
late final _sel_setRemovedOnCompletion_ =
    objc.registerName("setRemovedOnCompletion:");
late final _sel_addAnimation_forKey_ =
    objc.registerName("addAnimation:forKey:");
final _objc_msgSend_108 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> anim,
                ffi.Pointer<objc.ObjCObject> key)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeAllAnimations = objc.registerName("removeAllAnimations");
late final _sel_removeAnimationForKey_ =
    objc.registerName("removeAnimationForKey:");
final _objc_msgSend_109 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> key)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_animationKeys = objc.registerName("animationKeys");
late final _sel_animationForKey_ = objc.registerName("animationForKey:");
final _objc_msgSend_110 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> key)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setName_ = objc.registerName("setName:");
final _objc_msgSend_111 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_style = objc.registerName("style");
final _objc_msgSend_112 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setStyle_ = objc.registerName("setStyle:");
final _objc_msgSend_113 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_114 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_canBecomeFocused = objc.registerName("canBecomeFocused");
late final _sel_isFocused = objc.registerName("isFocused");
late final _sel_focusGroupIdentifier =
    objc.registerName("focusGroupIdentifier");
late final _sel_setFocusGroupIdentifier_ =
    objc.registerName("setFocusGroupIdentifier:");
late final _sel_focusGroupPriority = objc.registerName("focusGroupPriority");
late final _sel_setFocusGroupPriority_ =
    objc.registerName("setFocusGroupPriority:");

/// UIFocusEffect
class UIFocusEffect extends objc.NSObject {
  UIFocusEffect._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIFocusEffect] that points to the same underlying object as [other].
  UIFocusEffect.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIFocusEffect] that wraps the given raw object pointer.
  UIFocusEffect.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIFocusEffect].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIFocusEffect);
  }

  /// effect
  static UIFocusEffect effect() {
    final _ret = _objc_msgSend_4(_class_UIFocusEffect, _sel_effect);
    return UIFocusEffect.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIFocusEffect init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIFocusEffect.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIFocusEffect new1() {
    final _ret = _objc_msgSend_4(_class_UIFocusEffect, _sel_new);
    return UIFocusEffect.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIFocusEffect allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIFocusEffect, _sel_allocWithZone_, zone);
    return UIFocusEffect.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIFocusEffect alloc() {
    final _ret = _objc_msgSend_4(_class_UIFocusEffect, _sel_alloc);
    return UIFocusEffect.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIFocusEffect = objc.getClass("UIFocusEffect");
late final _sel_effect = objc.registerName("effect");
late final _sel_focusEffect = objc.registerName("focusEffect");
final _objc_msgSend_115 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFocusEffect_ = objc.registerName("setFocusEffect:");
final _objc_msgSend_116 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum UISemanticContentAttribute {
  UISemanticContentAttributeUnspecified(0),
  UISemanticContentAttributePlayback(1),
  UISemanticContentAttributeSpatial(2),
  UISemanticContentAttributeForceLeftToRight(3),
  UISemanticContentAttributeForceRightToLeft(4);

  final int value;
  const UISemanticContentAttribute(this.value);

  static UISemanticContentAttribute fromValue(int value) => switch (value) {
        0 => UISemanticContentAttributeUnspecified,
        1 => UISemanticContentAttributePlayback,
        2 => UISemanticContentAttributeSpatial,
        3 => UISemanticContentAttributeForceLeftToRight,
        4 => UISemanticContentAttributeForceRightToLeft,
        _ => throw ArgumentError(
            "Unknown value for UISemanticContentAttribute: $value"),
      };
}

late final _sel_semanticContentAttribute =
    objc.registerName("semanticContentAttribute");
final _objc_msgSend_117 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSemanticContentAttribute_ =
    objc.registerName("setSemanticContentAttribute:");
final _objc_msgSend_118 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum UIUserInterfaceLayoutDirection {
  UIUserInterfaceLayoutDirectionLeftToRight(0),
  UIUserInterfaceLayoutDirectionRightToLeft(1);

  final int value;
  const UIUserInterfaceLayoutDirection(this.value);

  static UIUserInterfaceLayoutDirection fromValue(int value) => switch (value) {
        0 => UIUserInterfaceLayoutDirectionLeftToRight,
        1 => UIUserInterfaceLayoutDirectionRightToLeft,
        _ => throw ArgumentError(
            "Unknown value for UIUserInterfaceLayoutDirection: $value"),
      };
}

late final _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_ = objc
    .registerName("userInterfaceLayoutDirectionForSemanticContentAttribute:");
final _objc_msgSend_119 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong attribute)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_ =
    objc.registerName(
        "userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:");
final _objc_msgSend_120 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong semanticContentAttribute,
                ffi.UnsignedLong layoutDirection)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_effectiveUserInterfaceLayoutDirection =
    objc.registerName("effectiveUserInterfaceLayoutDirection");
final _objc_msgSend_121 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIResponder
class UIResponder extends objc.NSObject {
  UIResponder._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIResponder] that points to the same underlying object as [other].
  UIResponder.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIResponder] that wraps the given raw object pointer.
  UIResponder.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIResponder].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIResponder);
  }

  /// nextResponder
  UIResponder? get nextResponder {
    final _ret = _objc_msgSend_122(this.ref.pointer, _sel_nextResponder);
    return _ret.address == 0
        ? null
        : UIResponder.castFromPointer(_ret, retain: true, release: true);
  }

  /// canBecomeFirstResponder
  bool get canBecomeFirstResponder {
    return _objc_msgSend_11(this.ref.pointer, _sel_canBecomeFirstResponder);
  }

  /// becomeFirstResponder
  bool becomeFirstResponder() {
    return _objc_msgSend_11(this.ref.pointer, _sel_becomeFirstResponder);
  }

  /// canResignFirstResponder
  bool get canResignFirstResponder {
    return _objc_msgSend_11(this.ref.pointer, _sel_canResignFirstResponder);
  }

  /// resignFirstResponder
  bool resignFirstResponder() {
    return _objc_msgSend_11(this.ref.pointer, _sel_resignFirstResponder);
  }

  /// isFirstResponder
  bool get isFirstResponder {
    return _objc_msgSend_11(this.ref.pointer, _sel_isFirstResponder);
  }

  /// touchesBegan:withEvent:
  void touchesBegan_withEvent_(objc.ObjCObjectBase touches, UIEvent? event) {
    _objc_msgSend_123(this.ref.pointer, _sel_touchesBegan_withEvent_,
        touches.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// touchesMoved:withEvent:
  void touchesMoved_withEvent_(objc.NSSet touches, UIEvent? event) {
    _objc_msgSend_124(this.ref.pointer, _sel_touchesMoved_withEvent_,
        touches.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// touchesEnded:withEvent:
  void touchesEnded_withEvent_(objc.NSSet touches, UIEvent? event) {
    _objc_msgSend_124(this.ref.pointer, _sel_touchesEnded_withEvent_,
        touches.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// touchesCancelled:withEvent:
  void touchesCancelled_withEvent_(objc.NSSet touches, UIEvent? event) {
    _objc_msgSend_124(this.ref.pointer, _sel_touchesCancelled_withEvent_,
        touches.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// touchesEstimatedPropertiesUpdated:
  void touchesEstimatedPropertiesUpdated_(objc.NSSet touches) {
    _objc_msgSend_125(this.ref.pointer, _sel_touchesEstimatedPropertiesUpdated_,
        touches.ref.pointer);
  }

  /// pressesBegan:withEvent:
  void pressesBegan_withEvent_(objc.NSSet presses, UIPressesEvent? event) {
    _objc_msgSend_137(this.ref.pointer, _sel_pressesBegan_withEvent_,
        presses.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// pressesChanged:withEvent:
  void pressesChanged_withEvent_(objc.NSSet presses, UIPressesEvent? event) {
    _objc_msgSend_137(this.ref.pointer, _sel_pressesChanged_withEvent_,
        presses.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// pressesEnded:withEvent:
  void pressesEnded_withEvent_(objc.NSSet presses, UIPressesEvent? event) {
    _objc_msgSend_137(this.ref.pointer, _sel_pressesEnded_withEvent_,
        presses.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// pressesCancelled:withEvent:
  void pressesCancelled_withEvent_(objc.NSSet presses, UIPressesEvent? event) {
    _objc_msgSend_137(this.ref.pointer, _sel_pressesCancelled_withEvent_,
        presses.ref.pointer, event?.ref.pointer ?? ffi.nullptr);
  }

  /// motionBegan:withEvent:
  void motionBegan_withEvent_(UIEventSubtype motion, UIEvent? event) {
    _objc_msgSend_138(this.ref.pointer, _sel_motionBegan_withEvent_,
        motion.value, event?.ref.pointer ?? ffi.nullptr);
  }

  /// motionEnded:withEvent:
  void motionEnded_withEvent_(UIEventSubtype motion, UIEvent? event) {
    _objc_msgSend_138(this.ref.pointer, _sel_motionEnded_withEvent_,
        motion.value, event?.ref.pointer ?? ffi.nullptr);
  }

  /// motionCancelled:withEvent:
  void motionCancelled_withEvent_(UIEventSubtype motion, UIEvent? event) {
    _objc_msgSend_138(this.ref.pointer, _sel_motionCancelled_withEvent_,
        motion.value, event?.ref.pointer ?? ffi.nullptr);
  }

  /// remoteControlReceivedWithEvent:
  void remoteControlReceivedWithEvent_(UIEvent? event) {
    _objc_msgSend_139(this.ref.pointer, _sel_remoteControlReceivedWithEvent_,
        event?.ref.pointer ?? ffi.nullptr);
  }

  /// canPerformAction:withSender:
  bool canPerformAction_withSender_(
      ffi.Pointer<objc.ObjCSelector> action, objc.ObjCObjectBase? sender) {
    return _objc_msgSend_140(
        this.ref.pointer,
        _sel_canPerformAction_withSender_,
        action,
        sender?.ref.pointer ?? ffi.nullptr);
  }

  /// targetForAction:withSender:
  objc.ObjCObjectBase? targetForAction_withSender_(
      ffi.Pointer<objc.ObjCSelector> action, objc.ObjCObjectBase? sender) {
    final _ret = _objc_msgSend_141(
        this.ref.pointer,
        _sel_targetForAction_withSender_,
        action,
        sender?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// buildMenuWithBuilder:
  void buildMenuWithBuilder_(objc.ObjCObjectBase builder) {
    _objc_msgSend_142(
        this.ref.pointer, _sel_buildMenuWithBuilder_, builder.ref.pointer);
  }

  /// validateCommand:
  void validateCommand_(UICommand command) {
    _objc_msgSend_375(
        this.ref.pointer, _sel_validateCommand_, command.ref.pointer);
  }

  /// undoManager
  NSUndoManager? get undoManager {
    final _ret = _objc_msgSend_381(this.ref.pointer, _sel_undoManager);
    return _ret.address == 0
        ? null
        : NSUndoManager.castFromPointer(_ret, retain: true, release: true);
  }

  /// editingInteractionConfiguration
  UIEditingInteractionConfiguration get editingInteractionConfiguration {
    final _ret = _objc_msgSend_382(
        this.ref.pointer, _sel_editingInteractionConfiguration);
    return UIEditingInteractionConfiguration.fromValue(_ret);
  }

  /// init
  UIResponder init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIResponder.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIResponder new1() {
    final _ret = _objc_msgSend_4(_class_UIResponder, _sel_new);
    return UIResponder.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIResponder allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIResponder, _sel_allocWithZone_, zone);
    return UIResponder.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIResponder alloc() {
    final _ret = _objc_msgSend_4(_class_UIResponder, _sel_alloc);
    return UIResponder.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIResponder = objc.getClass("UIResponder");
late final _sel_nextResponder = objc.registerName("nextResponder");
final _objc_msgSend_122 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_canBecomeFirstResponder =
    objc.registerName("canBecomeFirstResponder");
late final _sel_becomeFirstResponder =
    objc.registerName("becomeFirstResponder");
late final _sel_canResignFirstResponder =
    objc.registerName("canResignFirstResponder");
late final _sel_resignFirstResponder =
    objc.registerName("resignFirstResponder");
late final _sel_isFirstResponder = objc.registerName("isFirstResponder");
late final _sel_touchesBegan_withEvent_ =
    objc.registerName("touchesBegan:withEvent:");
final _objc_msgSend_123 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> touches,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_touchesMoved_withEvent_ =
    objc.registerName("touchesMoved:withEvent:");
final _objc_msgSend_124 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> touches,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_touchesEnded_withEvent_ =
    objc.registerName("touchesEnded:withEvent:");
late final _sel_touchesCancelled_withEvent_ =
    objc.registerName("touchesCancelled:withEvent:");
late final _sel_touchesEstimatedPropertiesUpdated_ =
    objc.registerName("touchesEstimatedPropertiesUpdated:");
final _objc_msgSend_125 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> touches)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// UIPressesEvent
class UIPressesEvent extends UIEvent {
  UIPressesEvent._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIPressesEvent] that points to the same underlying object as [other].
  UIPressesEvent.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIPressesEvent] that wraps the given raw object pointer.
  UIPressesEvent.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIPressesEvent].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIPressesEvent);
  }

  /// allPresses
  objc.NSSet get allPresses {
    final _ret = _objc_msgSend_126(this.ref.pointer, _sel_allPresses);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// pressesForGestureRecognizer:
  objc.NSSet pressesForGestureRecognizer_(UIGestureRecognizer gesture) {
    final _ret = _objc_msgSend_136(this.ref.pointer,
        _sel_pressesForGestureRecognizer_, gesture.ref.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_UIPressesEvent = objc.getClass("UIPressesEvent");
late final _sel_allPresses = objc.registerName("allPresses");
final _objc_msgSend_126 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIGestureRecognizer
class UIGestureRecognizer extends objc.NSObject {
  UIGestureRecognizer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIGestureRecognizer] that points to the same underlying object as [other].
  UIGestureRecognizer.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIGestureRecognizer] that wraps the given raw object pointer.
  UIGestureRecognizer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIGestureRecognizer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIGestureRecognizer);
  }

  /// initWithTarget:action:
  UIGestureRecognizer initWithTarget_action_(
      objc.ObjCObjectBase? target, ffi.Pointer<objc.ObjCSelector> action) {
    final _ret = _objc_msgSend_127(
        this.ref.retainAndReturnPointer(),
        _sel_initWithTarget_action_,
        target?.ref.pointer ?? ffi.nullptr,
        action);
    return UIGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIGestureRecognizer init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithCoder:
  UIGestureRecognizer? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIGestureRecognizer.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// addTarget:action:
  void addTarget_action_(
      objc.ObjCObjectBase target, ffi.Pointer<objc.ObjCSelector> action) {
    _objc_msgSend_128(
        this.ref.pointer, _sel_addTarget_action_, target.ref.pointer, action);
  }

  /// removeTarget:action:
  void removeTarget_action_(
      objc.ObjCObjectBase? target, ffi.Pointer<objc.ObjCSelector> action) {
    _objc_msgSend_129(this.ref.pointer, _sel_removeTarget_action_,
        target?.ref.pointer ?? ffi.nullptr, action);
  }

  /// state
  UIGestureRecognizerState get state {
    final _ret = _objc_msgSend_130(this.ref.pointer, _sel_state);
    return UIGestureRecognizerState.fromValue(_ret);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setEnabled_, value);
  }

  /// view
  UIView? get view {
    final _ret = _objc_msgSend_131(this.ref.pointer, _sel_view);
    return _ret.address == 0
        ? null
        : UIView.castFromPointer(_ret, retain: true, release: true);
  }

  /// cancelsTouchesInView
  bool get cancelsTouchesInView {
    return _objc_msgSend_11(this.ref.pointer, _sel_cancelsTouchesInView);
  }

  /// setCancelsTouchesInView:
  set cancelsTouchesInView(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setCancelsTouchesInView_, value);
  }

  /// delaysTouchesBegan
  bool get delaysTouchesBegan {
    return _objc_msgSend_11(this.ref.pointer, _sel_delaysTouchesBegan);
  }

  /// setDelaysTouchesBegan:
  set delaysTouchesBegan(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setDelaysTouchesBegan_, value);
  }

  /// delaysTouchesEnded
  bool get delaysTouchesEnded {
    return _objc_msgSend_11(this.ref.pointer, _sel_delaysTouchesEnded);
  }

  /// setDelaysTouchesEnded:
  set delaysTouchesEnded(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setDelaysTouchesEnded_, value);
  }

  /// allowedTouchTypes
  objc.NSArray get allowedTouchTypes {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_allowedTouchTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAllowedTouchTypes:
  set allowedTouchTypes(objc.NSArray value) {
    return _objc_msgSend_132(
        this.ref.pointer, _sel_setAllowedTouchTypes_, value.ref.pointer);
  }

  /// allowedPressTypes
  objc.NSArray get allowedPressTypes {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_allowedPressTypes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAllowedPressTypes:
  set allowedPressTypes(objc.NSArray value) {
    return _objc_msgSend_132(
        this.ref.pointer, _sel_setAllowedPressTypes_, value.ref.pointer);
  }

  /// requiresExclusiveTouchType
  bool get requiresExclusiveTouchType {
    return _objc_msgSend_11(this.ref.pointer, _sel_requiresExclusiveTouchType);
  }

  /// setRequiresExclusiveTouchType:
  set requiresExclusiveTouchType(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setRequiresExclusiveTouchType_, value);
  }

  /// requireGestureRecognizerToFail:
  void requireGestureRecognizerToFail_(
      UIGestureRecognizer otherGestureRecognizer) {
    _objc_msgSend_133(this.ref.pointer, _sel_requireGestureRecognizerToFail_,
        otherGestureRecognizer.ref.pointer);
  }

  /// locationInView:
  void locationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(stret, this.ref.pointer, _sel_locationInView_,
            view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(this.ref.pointer, _sel_locationInView_,
            view?.ref.pointer ?? ffi.nullptr);
  }

  /// numberOfTouches
  int get numberOfTouches {
    return _objc_msgSend_53(this.ref.pointer, _sel_numberOfTouches);
  }

  /// locationOfTouch:inView:
  void locationOfTouch_inView_(
      ffi.Pointer<CGPoint> stret, int touchIndex, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_135Stret(
            stret,
            this.ref.pointer,
            _sel_locationOfTouch_inView_,
            touchIndex,
            view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_135(
            this.ref.pointer,
            _sel_locationOfTouch_inView_,
            touchIndex,
            view?.ref.pointer ?? ffi.nullptr);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setName:
  set name(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer, _sel_setName_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// modifierFlags
  UIKeyModifierFlags get modifierFlags {
    final _ret = _objc_msgSend_25(this.ref.pointer, _sel_modifierFlags);
    return UIKeyModifierFlags.fromValue(_ret);
  }

  /// buttonMask
  UIEventButtonMask get buttonMask {
    final _ret = _objc_msgSend_26(this.ref.pointer, _sel_buttonMask);
    return UIEventButtonMask.fromValue(_ret);
  }

  /// new
  static UIGestureRecognizer new1() {
    final _ret = _objc_msgSend_4(_class_UIGestureRecognizer, _sel_new);
    return UIGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIGestureRecognizer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIGestureRecognizer, _sel_allocWithZone_, zone);
    return UIGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIGestureRecognizer alloc() {
    final _ret = _objc_msgSend_4(_class_UIGestureRecognizer, _sel_alloc);
    return UIGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIGestureRecognizer = objc.getClass("UIGestureRecognizer");
late final _sel_initWithTarget_action_ =
    objc.registerName("initWithTarget:action:");
final _objc_msgSend_127 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCSelector> action)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_addTarget_action_ = objc.registerName("addTarget:action:");
final _objc_msgSend_128 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCSelector> action)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_removeTarget_action_ =
    objc.registerName("removeTarget:action:");
final _objc_msgSend_129 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCSelector> action)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();

enum UIGestureRecognizerState {
  UIGestureRecognizerStatePossible(0),
  UIGestureRecognizerStateBegan(1),
  UIGestureRecognizerStateChanged(2),
  UIGestureRecognizerStateEnded(3),
  UIGestureRecognizerStateCancelled(4),
  UIGestureRecognizerStateFailed(5);

  static const UIGestureRecognizerStateRecognized =
      UIGestureRecognizerStateEnded;

  final int value;
  const UIGestureRecognizerState(this.value);

  static UIGestureRecognizerState fromValue(int value) => switch (value) {
        0 => UIGestureRecognizerStatePossible,
        1 => UIGestureRecognizerStateBegan,
        2 => UIGestureRecognizerStateChanged,
        3 => UIGestureRecognizerStateEnded,
        4 => UIGestureRecognizerStateCancelled,
        5 => UIGestureRecognizerStateFailed,
        _ => throw ArgumentError(
            "Unknown value for UIGestureRecognizerState: $value"),
      };

  @override
  String toString() {
    if (this == UIGestureRecognizerStateEnded)
      return "UIGestureRecognizerState.UIGestureRecognizerStateEnded, UIGestureRecognizerState.UIGestureRecognizerStateRecognized";
    return super.toString();
  }
}

late final _sel_state = objc.registerName("state");
final _objc_msgSend_130 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isEnabled = objc.registerName("isEnabled");
late final _sel_setEnabled_ = objc.registerName("setEnabled:");
late final _sel_view = objc.registerName("view");
final _objc_msgSend_131 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_cancelsTouchesInView =
    objc.registerName("cancelsTouchesInView");
late final _sel_setCancelsTouchesInView_ =
    objc.registerName("setCancelsTouchesInView:");
late final _sel_delaysTouchesBegan = objc.registerName("delaysTouchesBegan");
late final _sel_setDelaysTouchesBegan_ =
    objc.registerName("setDelaysTouchesBegan:");
late final _sel_delaysTouchesEnded = objc.registerName("delaysTouchesEnded");
late final _sel_setDelaysTouchesEnded_ =
    objc.registerName("setDelaysTouchesEnded:");
late final _sel_allowedTouchTypes = objc.registerName("allowedTouchTypes");
late final _sel_setAllowedTouchTypes_ =
    objc.registerName("setAllowedTouchTypes:");
final _objc_msgSend_132 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allowedPressTypes = objc.registerName("allowedPressTypes");
late final _sel_setAllowedPressTypes_ =
    objc.registerName("setAllowedPressTypes:");
late final _sel_requiresExclusiveTouchType =
    objc.registerName("requiresExclusiveTouchType");
late final _sel_setRequiresExclusiveTouchType_ =
    objc.registerName("setRequiresExclusiveTouchType:");
late final _sel_requireGestureRecognizerToFail_ =
    objc.registerName("requireGestureRecognizerToFail:");
final _objc_msgSend_133 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> otherGestureRecognizer)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_locationInView_ = objc.registerName("locationInView:");
final _objc_msgSend_134 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        CGPoint Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_134Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_numberOfTouches = objc.registerName("numberOfTouches");
late final _sel_locationOfTouch_inView_ =
    objc.registerName("locationOfTouch:inView:");
final _objc_msgSend_135 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong touchIndex,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_135Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong touchIndex,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGPoint>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pressesForGestureRecognizer_ =
    objc.registerName("pressesForGestureRecognizer:");
final _objc_msgSend_136 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> gesture)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pressesBegan_withEvent_ =
    objc.registerName("pressesBegan:withEvent:");
final _objc_msgSend_137 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> presses,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pressesChanged_withEvent_ =
    objc.registerName("pressesChanged:withEvent:");
late final _sel_pressesEnded_withEvent_ =
    objc.registerName("pressesEnded:withEvent:");
late final _sel_pressesCancelled_withEvent_ =
    objc.registerName("pressesCancelled:withEvent:");
late final _sel_motionBegan_withEvent_ =
    objc.registerName("motionBegan:withEvent:");
final _objc_msgSend_138 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong motion,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_motionEnded_withEvent_ =
    objc.registerName("motionEnded:withEvent:");
late final _sel_motionCancelled_withEvent_ =
    objc.registerName("motionCancelled:withEvent:");
late final _sel_remoteControlReceivedWithEvent_ =
    objc.registerName("remoteControlReceivedWithEvent:");
final _objc_msgSend_139 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_canPerformAction_withSender_ =
    objc.registerName("canPerformAction:withSender:");
final _objc_msgSend_140 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_targetForAction_withSender_ =
    objc.registerName("targetForAction:withSender:");
final _objc_msgSend_141 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_buildMenuWithBuilder_ =
    objc.registerName("buildMenuWithBuilder:");
final _objc_msgSend_142 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> builder)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// UICommand
class UICommand extends UIMenuElement {
  UICommand._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UICommand] that points to the same underlying object as [other].
  UICommand.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UICommand] that wraps the given raw object pointer.
  UICommand.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UICommand].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UICommand);
  }

  /// title
  objc.NSString get title {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_title);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTitle:
  set title(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setTitle_, value.ref.pointer);
  }

  /// image
  UIImage? get image {
    final _ret = _objc_msgSend_363(this.ref.pointer, _sel_image);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// setImage:
  set image(UIImage? value) {
    return _objc_msgSend_367(
        this.ref.pointer, _sel_setImage_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// discoverabilityTitle
  objc.NSString? get discoverabilityTitle {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_discoverabilityTitle);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDiscoverabilityTitle:
  set discoverabilityTitle(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setDiscoverabilityTitle_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// action
  ffi.Pointer<objc.ObjCSelector> get action {
    return _objc_msgSend_368(this.ref.pointer, _sel_action);
  }

  /// propertyList
  objc.ObjCObjectBase? get propertyList {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_propertyList);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// attributes
  UIMenuElementAttributes get attributes {
    final _ret = _objc_msgSend_369(this.ref.pointer, _sel_attributes);
    return UIMenuElementAttributes.fromValue(_ret);
  }

  /// setAttributes:
  set attributes(UIMenuElementAttributes value) {
    return _objc_msgSend_370(
        this.ref.pointer, _sel_setAttributes_, value.value);
  }

  /// state
  UIMenuElementState get state {
    final _ret = _objc_msgSend_371(this.ref.pointer, _sel_state);
    return UIMenuElementState.fromValue(_ret);
  }

  /// setState:
  set state(UIMenuElementState value) {
    return _objc_msgSend_372(this.ref.pointer, _sel_setState_, value.value);
  }

  /// alternates
  objc.NSArray get alternates {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_alternates);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// commandWithTitle:image:action:propertyList:
  static UICommand commandWithTitle_image_action_propertyList_(
      objc.NSString title,
      UIImage? image,
      ffi.Pointer<objc.ObjCSelector> action,
      objc.ObjCObjectBase? propertyList) {
    final _ret = _objc_msgSend_373(
        _class_UICommand,
        _sel_commandWithTitle_image_action_propertyList_,
        title.ref.pointer,
        image?.ref.pointer ?? ffi.nullptr,
        action,
        propertyList?.ref.pointer ?? ffi.nullptr);
    return UICommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// commandWithTitle:image:action:propertyList:alternates:
  static UICommand commandWithTitle_image_action_propertyList_alternates_(
      objc.NSString title,
      UIImage? image,
      ffi.Pointer<objc.ObjCSelector> action,
      objc.ObjCObjectBase? propertyList,
      objc.NSArray alternates) {
    final _ret = _objc_msgSend_374(
        _class_UICommand,
        _sel_commandWithTitle_image_action_propertyList_alternates_,
        title.ref.pointer,
        image?.ref.pointer ?? ffi.nullptr,
        action,
        propertyList?.ref.pointer ?? ffi.nullptr,
        alternates.ref.pointer);
    return UICommand.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static UICommand new1() {
    final _ret = _objc_msgSend_4(_class_UICommand, _sel_new);
    return UICommand.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  UICommand init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UICommand.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UICommand? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UICommand.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UICommand allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UICommand, _sel_allocWithZone_, zone);
    return UICommand.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UICommand alloc() {
    final _ret = _objc_msgSend_4(_class_UICommand, _sel_alloc);
    return UICommand.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UICommand = objc.getClass("UICommand");
late final _sel_title = objc.registerName("title");
late final _sel_setTitle_ = objc.registerName("setTitle:");

/// UIImage
class UIImage extends objc.NSObject {
  UIImage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIImage] that points to the same underlying object as [other].
  UIImage.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIImage] that wraps the given raw object pointer.
  UIImage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIImage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIImage);
  }

  /// systemImageNamed:
  static UIImage? systemImageNamed_(objc.NSString name) {
    final _ret = _objc_msgSend_143(
        _class_UIImage, _sel_systemImageNamed_, name.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemImageNamed:withConfiguration:
  static UIImage? systemImageNamed_withConfiguration_(
      objc.NSString name, UIImageConfiguration? configuration) {
    final _ret = _objc_msgSend_178(
        _class_UIImage,
        _sel_systemImageNamed_withConfiguration_,
        name.ref.pointer,
        configuration?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemImageNamed:compatibleWithTraitCollection:
  static UIImage? systemImageNamed_compatibleWithTraitCollection_(
      objc.NSString name, UITraitCollection? traitCollection) {
    final _ret = _objc_msgSend_179(
        _class_UIImage,
        _sel_systemImageNamed_compatibleWithTraitCollection_,
        name.ref.pointer,
        traitCollection?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemImageNamed:variableValue:withConfiguration:
  static UIImage? systemImageNamed_variableValue_withConfiguration_(
      objc.NSString name, double value, UIImageConfiguration? configuration) {
    final _ret = _objc_msgSend_180(
        _class_UIImage,
        _sel_systemImageNamed_variableValue_withConfiguration_,
        name.ref.pointer,
        value,
        configuration?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageNamed:
  static UIImage? imageNamed_(objc.NSString name) {
    final _ret =
        _objc_msgSend_143(_class_UIImage, _sel_imageNamed_, name.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageNamed:inBundle:withConfiguration:
  static UIImage? imageNamed_inBundle_withConfiguration_(objc.NSString name,
      NSBundle? bundle, UIImageConfiguration? configuration) {
    final _ret = _objc_msgSend_207(
        _class_UIImage,
        _sel_imageNamed_inBundle_withConfiguration_,
        name.ref.pointer,
        bundle?.ref.pointer ?? ffi.nullptr,
        configuration?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageNamed:inBundle:compatibleWithTraitCollection:
  static UIImage? imageNamed_inBundle_compatibleWithTraitCollection_(
      objc.NSString name,
      NSBundle? bundle,
      UITraitCollection? traitCollection) {
    final _ret = _objc_msgSend_208(
        _class_UIImage,
        _sel_imageNamed_inBundle_compatibleWithTraitCollection_,
        name.ref.pointer,
        bundle?.ref.pointer ?? ffi.nullptr,
        traitCollection?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageNamed:inBundle:variableValue:withConfiguration:
  static UIImage? imageNamed_inBundle_variableValue_withConfiguration_(
      objc.NSString name,
      NSBundle? bundle,
      double value,
      UIImageConfiguration? configuration) {
    final _ret = _objc_msgSend_209(
        _class_UIImage,
        _sel_imageNamed_inBundle_variableValue_withConfiguration_,
        name.ref.pointer,
        bundle?.ref.pointer ?? ffi.nullptr,
        value,
        configuration?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithContentsOfFile:
  static UIImage? imageWithContentsOfFile_(objc.NSString path) {
    final _ret = _objc_msgSend_143(
        _class_UIImage, _sel_imageWithContentsOfFile_, path.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithData:
  static UIImage? imageWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_210(
        _class_UIImage, _sel_imageWithData_, data.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithData:scale:
  static UIImage? imageWithData_scale_(objc.NSData data, double scale) {
    final _ret = _objc_msgSend_211(
        _class_UIImage, _sel_imageWithData_scale_, data.ref.pointer, scale);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGImage:
  static UIImage imageWithCGImage_(ffi.Pointer<CGImage> cgImage) {
    final _ret =
        _objc_msgSend_212(_class_UIImage, _sel_imageWithCGImage_, cgImage);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGImage:scale:orientation:
  static UIImage imageWithCGImage_scale_orientation_(
      ffi.Pointer<CGImage> cgImage,
      double scale,
      UIImageOrientation orientation) {
    final _ret = _objc_msgSend_213(
        _class_UIImage,
        _sel_imageWithCGImage_scale_orientation_,
        cgImage,
        scale,
        orientation.value);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCIImage:
  static UIImage imageWithCIImage_(CIImage ciImage) {
    final _ret = _objc_msgSend_282(
        _class_UIImage, _sel_imageWithCIImage_, ciImage.ref.pointer);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCIImage:scale:orientation:
  static UIImage imageWithCIImage_scale_orientation_(
      CIImage ciImage, double scale, UIImageOrientation orientation) {
    final _ret = _objc_msgSend_283(
        _class_UIImage,
        _sel_imageWithCIImage_scale_orientation_,
        ciImage.ref.pointer,
        scale,
        orientation.value);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithContentsOfFile:
  UIImage? initWithContentsOfFile_(objc.NSString path) {
    final _ret = _objc_msgSend_5(this.ref.retainAndReturnPointer(),
        _sel_initWithContentsOfFile_, path.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithData:
  UIImage? initWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_247(this.ref.retainAndReturnPointer(),
        _sel_initWithData_, data.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithData:scale:
  UIImage? initWithData_scale_(objc.NSData data, double scale) {
    final _ret = _objc_msgSend_284(this.ref.retainAndReturnPointer(),
        _sel_initWithData_scale_, data.ref.pointer, scale);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCGImage:
  UIImage initWithCGImage_(ffi.Pointer<CGImage> cgImage) {
    final _ret = _objc_msgSend_242(
        this.ref.retainAndReturnPointer(), _sel_initWithCGImage_, cgImage);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCGImage:scale:orientation:
  UIImage initWithCGImage_scale_orientation_(ffi.Pointer<CGImage> cgImage,
      double scale, UIImageOrientation orientation) {
    final _ret = _objc_msgSend_285(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCGImage_scale_orientation_,
        cgImage,
        scale,
        orientation.value);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCIImage:
  UIImage initWithCIImage_(CIImage ciImage) {
    final _ret = _objc_msgSend_286(this.ref.retainAndReturnPointer(),
        _sel_initWithCIImage_, ciImage.ref.pointer);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCIImage:scale:orientation:
  UIImage initWithCIImage_scale_orientation_(
      CIImage ciImage, double scale, UIImageOrientation orientation) {
    final _ret = _objc_msgSend_287(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCIImage_scale_orientation_,
        ciImage.ref.pointer,
        scale,
        orientation.value);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// size
  void getSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_size)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_size);
  }

  /// CGImage
  ffi.Pointer<CGImage> get CGImage1 {
    return _objc_msgSend_280(this.ref.pointer, _sel_CGImage);
  }

  /// CIImage
  CIImage? get CIImage1 {
    final _ret = _objc_msgSend_288(this.ref.pointer, _sel_CIImage);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageOrientation
  UIImageOrientation get imageOrientation {
    final _ret = _objc_msgSend_289(this.ref.pointer, _sel_imageOrientation);
    return UIImageOrientation.fromValue(_ret);
  }

  /// scale
  double get scale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_scale)
        : _objc_msgSend_24(this.ref.pointer, _sel_scale);
  }

  /// isSymbolImage
  bool get symbolImage {
    return _objc_msgSend_11(this.ref.pointer, _sel_isSymbolImage);
  }

  /// animatedImageNamed:duration:
  static UIImage? animatedImageNamed_duration_(
      objc.NSString name, double duration) {
    final _ret = _objc_msgSend_290(_class_UIImage,
        _sel_animatedImageNamed_duration_, name.ref.pointer, duration);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// animatedResizableImageNamed:capInsets:duration:
  static UIImage? animatedResizableImageNamed_capInsets_duration_(
      objc.NSString name, UIEdgeInsets capInsets, double duration) {
    final _ret = _objc_msgSend_291(
        _class_UIImage,
        _sel_animatedResizableImageNamed_capInsets_duration_,
        name.ref.pointer,
        capInsets,
        duration);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// animatedResizableImageNamed:capInsets:resizingMode:duration:
  static UIImage? animatedResizableImageNamed_capInsets_resizingMode_duration_(
      objc.NSString name,
      UIEdgeInsets capInsets,
      UIImageResizingMode resizingMode,
      double duration) {
    final _ret = _objc_msgSend_292(
        _class_UIImage,
        _sel_animatedResizableImageNamed_capInsets_resizingMode_duration_,
        name.ref.pointer,
        capInsets,
        resizingMode.value,
        duration);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// animatedImageWithImages:duration:
  static UIImage? animatedImageWithImages_duration_(
      objc.NSArray images, double duration) {
    final _ret = _objc_msgSend_293(_class_UIImage,
        _sel_animatedImageWithImages_duration_, images.ref.pointer, duration);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// images
  objc.NSArray? get images {
    final _ret = _objc_msgSend_98(this.ref.pointer, _sel_images);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// duration
  double get duration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_duration)
        : _objc_msgSend_24(this.ref.pointer, _sel_duration);
  }

  /// drawAtPoint:
  void drawAtPoint_(CGPoint point) {
    _objc_msgSend_294(this.ref.pointer, _sel_drawAtPoint_, point);
  }

  /// drawAtPoint:blendMode:alpha:
  void drawAtPoint_blendMode_alpha_(
      CGPoint point, CGBlendMode blendMode, double alpha) {
    _objc_msgSend_295(this.ref.pointer, _sel_drawAtPoint_blendMode_alpha_,
        point, blendMode.value, alpha);
  }

  /// drawInRect:
  void drawInRect_(CGRect rect) {
    _objc_msgSend_89(this.ref.pointer, _sel_drawInRect_, rect);
  }

  /// drawInRect:blendMode:alpha:
  void drawInRect_blendMode_alpha_(
      CGRect rect, CGBlendMode blendMode, double alpha) {
    _objc_msgSend_296(this.ref.pointer, _sel_drawInRect_blendMode_alpha_, rect,
        blendMode.value, alpha);
  }

  /// drawAsPatternInRect:
  void drawAsPatternInRect_(CGRect rect) {
    _objc_msgSend_89(this.ref.pointer, _sel_drawAsPatternInRect_, rect);
  }

  /// resizableImageWithCapInsets:
  UIImage resizableImageWithCapInsets_(UIEdgeInsets capInsets) {
    final _ret = _objc_msgSend_297(
        this.ref.pointer, _sel_resizableImageWithCapInsets_, capInsets);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// resizableImageWithCapInsets:resizingMode:
  UIImage resizableImageWithCapInsets_resizingMode_(
      UIEdgeInsets capInsets, UIImageResizingMode resizingMode) {
    final _ret = _objc_msgSend_298(
        this.ref.pointer,
        _sel_resizableImageWithCapInsets_resizingMode_,
        capInsets,
        resizingMode.value);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// capInsets
  void getCapInsets(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(stret, this.ref.pointer, _sel_capInsets)
        : stret.ref = _objc_msgSend_35(this.ref.pointer, _sel_capInsets);
  }

  /// resizingMode
  UIImageResizingMode get resizingMode {
    final _ret = _objc_msgSend_299(this.ref.pointer, _sel_resizingMode);
    return UIImageResizingMode.fromValue(_ret);
  }

  /// imageWithAlignmentRectInsets:
  UIImage imageWithAlignmentRectInsets_(UIEdgeInsets alignmentInsets) {
    final _ret = _objc_msgSend_297(
        this.ref.pointer, _sel_imageWithAlignmentRectInsets_, alignmentInsets);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// alignmentRectInsets
  void getAlignmentRectInsets(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(
            stret, this.ref.pointer, _sel_alignmentRectInsets)
        : stret.ref =
            _objc_msgSend_35(this.ref.pointer, _sel_alignmentRectInsets);
  }

  /// imageWithRenderingMode:
  UIImage imageWithRenderingMode_(UIImageRenderingMode renderingMode) {
    final _ret = _objc_msgSend_300(
        this.ref.pointer, _sel_imageWithRenderingMode_, renderingMode.value);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// renderingMode
  UIImageRenderingMode get renderingMode {
    final _ret = _objc_msgSend_301(this.ref.pointer, _sel_renderingMode);
    return UIImageRenderingMode.fromValue(_ret);
  }

  /// imageRendererFormat
  UIGraphicsImageRendererFormat get imageRendererFormat {
    final _ret = _objc_msgSend_305(this.ref.pointer, _sel_imageRendererFormat);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// traitCollection
  UITraitCollection get traitCollection {
    final _ret = _objc_msgSend_306(this.ref.pointer, _sel_traitCollection);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageAsset
  UIImageAsset? get imageAsset {
    final _ret = _objc_msgSend_313(this.ref.pointer, _sel_imageAsset);
    return _ret.address == 0
        ? null
        : UIImageAsset.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageFlippedForRightToLeftLayoutDirection
  UIImage imageFlippedForRightToLeftLayoutDirection() {
    final _ret = _objc_msgSend_314(
        this.ref.pointer, _sel_imageFlippedForRightToLeftLayoutDirection);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// flipsForRightToLeftLayoutDirection
  bool get flipsForRightToLeftLayoutDirection {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_flipsForRightToLeftLayoutDirection);
  }

  /// imageWithHorizontallyFlippedOrientation
  UIImage imageWithHorizontallyFlippedOrientation() {
    final _ret = _objc_msgSend_314(
        this.ref.pointer, _sel_imageWithHorizontallyFlippedOrientation);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// baselineOffsetFromBottom
  double get baselineOffsetFromBottom {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_baselineOffsetFromBottom)
        : _objc_msgSend_24(this.ref.pointer, _sel_baselineOffsetFromBottom);
  }

  /// hasBaseline
  bool get hasBaseline {
    return _objc_msgSend_11(this.ref.pointer, _sel_hasBaseline);
  }

  /// imageWithBaselineOffsetFromBottom:
  UIImage imageWithBaselineOffsetFromBottom_(double baselineOffset) {
    final _ret = _objc_msgSend_315(this.ref.pointer,
        _sel_imageWithBaselineOffsetFromBottom_, baselineOffset);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithoutBaseline
  UIImage imageWithoutBaseline() {
    final _ret = _objc_msgSend_314(this.ref.pointer, _sel_imageWithoutBaseline);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// configuration
  UIImageConfiguration? get configuration {
    final _ret = _objc_msgSend_316(this.ref.pointer, _sel_configuration);
    return _ret.address == 0
        ? null
        : UIImageConfiguration.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// imageWithConfiguration:
  UIImage imageWithConfiguration_(UIImageConfiguration configuration) {
    final _ret = _objc_msgSend_307(this.ref.pointer,
        _sel_imageWithConfiguration_, configuration.ref.pointer);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// symbolConfiguration
  UIImageSymbolConfiguration? get symbolConfiguration {
    final _ret = _objc_msgSend_359(this.ref.pointer, _sel_symbolConfiguration);
    return _ret.address == 0
        ? null
        : UIImageSymbolConfiguration.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// imageByApplyingSymbolConfiguration:
  UIImage? imageByApplyingSymbolConfiguration_(
      UIImageSymbolConfiguration configuration) {
    final _ret = _objc_msgSend_360(this.ref.pointer,
        _sel_imageByApplyingSymbolConfiguration_, configuration.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithTintColor:
  UIImage imageWithTintColor_(UIColor color) {
    final _ret = _objc_msgSend_361(
        this.ref.pointer, _sel_imageWithTintColor_, color.ref.pointer);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithTintColor:renderingMode:
  UIImage imageWithTintColor_renderingMode_(
      UIColor color, UIImageRenderingMode renderingMode) {
    final _ret = _objc_msgSend_362(
        this.ref.pointer,
        _sel_imageWithTintColor_renderingMode_,
        color.ref.pointer,
        renderingMode.value);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByPreparingForDisplay
  UIImage? imageByPreparingForDisplay() {
    final _ret =
        _objc_msgSend_363(this.ref.pointer, _sel_imageByPreparingForDisplay);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// prepareForDisplayWithCompletionHandler:
  void prepareForDisplayWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_364(
        this.ref.pointer,
        _sel_prepareForDisplayWithCompletionHandler_,
        completionHandler.ref.pointer);
  }

  /// imageByPreparingThumbnailOfSize:
  UIImage? imageByPreparingThumbnailOfSize_(CGSize size) {
    final _ret = _objc_msgSend_365(
        this.ref.pointer, _sel_imageByPreparingThumbnailOfSize_, size);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// prepareThumbnailOfSize:completionHandler:
  void prepareThumbnailOfSize_completionHandler_(
      CGSize size,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_366(
        this.ref.pointer,
        _sel_prepareThumbnailOfSize_completionHandler_,
        size,
        completionHandler.ref.pointer);
  }

  /// isHighDynamicRange
  bool get isHighDynamicRange {
    return _objc_msgSend_11(this.ref.pointer, _sel_isHighDynamicRange);
  }

  /// imageRestrictedToStandardDynamicRange
  UIImage imageRestrictedToStandardDynamicRange() {
    final _ret = _objc_msgSend_314(
        this.ref.pointer, _sel_imageRestrictedToStandardDynamicRange);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIImage init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIImage new1() {
    final _ret = _objc_msgSend_4(_class_UIImage, _sel_new);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIImage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIImage, _sel_allocWithZone_, zone);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIImage alloc() {
    final _ret = _objc_msgSend_4(_class_UIImage, _sel_alloc);
    return UIImage.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIImage = objc.getClass("UIImage");
late final _sel_systemImageNamed_ = objc.registerName("systemImageNamed:");
final _objc_msgSend_143 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// UIImageConfiguration
class UIImageConfiguration extends objc.NSObject {
  UIImageConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIImageConfiguration] that points to the same underlying object as [other].
  UIImageConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIImageConfiguration] that wraps the given raw object pointer.
  UIImageConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIImageConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIImageConfiguration);
  }

  /// new
  static UIImageConfiguration new1() {
    final _ret = _objc_msgSend_4(_class_UIImageConfiguration, _sel_new);
    return UIImageConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIImageConfiguration init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIImageConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// traitCollection
  UITraitCollection? get traitCollection {
    final _ret = _objc_msgSend_173(this.ref.pointer, _sel_traitCollection);
    return _ret.address == 0
        ? null
        : UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// configurationWithTraitCollection:
  static UIImageConfiguration configurationWithTraitCollection_(
      UITraitCollection? traitCollection) {
    final _ret = _objc_msgSend_174(
        _class_UIImageConfiguration,
        _sel_configurationWithTraitCollection_,
        traitCollection?.ref.pointer ?? ffi.nullptr);
    return UIImageConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// locale
  objc.NSLocale? get locale {
    final _ret = _objc_msgSend_175(this.ref.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// configurationWithLocale:
  static UIImageConfiguration configurationWithLocale_(objc.NSLocale? locale) {
    final _ret = _objc_msgSend_176(_class_UIImageConfiguration,
        _sel_configurationWithLocale_, locale?.ref.pointer ?? ffi.nullptr);
    return UIImageConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationByApplyingConfiguration:
  UIImageConfiguration configurationByApplyingConfiguration_(
      UIImageConfiguration? otherConfiguration) {
    final _ret = _objc_msgSend_177(
        this.ref.pointer,
        _sel_configurationByApplyingConfiguration_,
        otherConfiguration?.ref.pointer ?? ffi.nullptr);
    return UIImageConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// allocWithZone:
  static UIImageConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIImageConfiguration, _sel_allocWithZone_, zone);
    return UIImageConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIImageConfiguration alloc() {
    final _ret = _objc_msgSend_4(_class_UIImageConfiguration, _sel_alloc);
    return UIImageConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIImageConfiguration = objc.getClass("UIImageConfiguration");

/// UITraitCollection
class UITraitCollection extends objc.NSObject {
  UITraitCollection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UITraitCollection] that points to the same underlying object as [other].
  UITraitCollection.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UITraitCollection] that wraps the given raw object pointer.
  UITraitCollection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UITraitCollection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UITraitCollection);
  }

  /// init
  UITraitCollection init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UITraitCollection.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithCoder:
  UITraitCollection? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UITraitCollection.castFromPointer(_ret, retain: false, release: true);
  }

  /// containsTraitsInCollection:
  bool containsTraitsInCollection_(UITraitCollection? trait) {
    return _objc_msgSend_144(this.ref.pointer, _sel_containsTraitsInCollection_,
        trait?.ref.pointer ?? ffi.nullptr);
  }

  /// traitCollectionWithTraitsFromCollections:
  static UITraitCollection traitCollectionWithTraitsFromCollections_(
      objc.NSArray traitCollections) {
    final _ret = _objc_msgSend_145(
        _class_UITraitCollection,
        _sel_traitCollectionWithTraitsFromCollections_,
        traitCollections.ref.pointer);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// traitCollectionWithUserInterfaceIdiom:
  static UITraitCollection traitCollectionWithUserInterfaceIdiom_(
      UIUserInterfaceIdiom idiom) {
    final _ret = _objc_msgSend_146(_class_UITraitCollection,
        _sel_traitCollectionWithUserInterfaceIdiom_, idiom.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// userInterfaceIdiom
  UIUserInterfaceIdiom get userInterfaceIdiom {
    final _ret = _objc_msgSend_16(this.ref.pointer, _sel_userInterfaceIdiom);
    return UIUserInterfaceIdiom.fromValue(_ret);
  }

  /// traitCollectionWithUserInterfaceStyle:
  static UITraitCollection traitCollectionWithUserInterfaceStyle_(
      UIUserInterfaceStyle userInterfaceStyle) {
    final _ret = _objc_msgSend_147(_class_UITraitCollection,
        _sel_traitCollectionWithUserInterfaceStyle_, userInterfaceStyle.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// userInterfaceStyle
  UIUserInterfaceStyle get userInterfaceStyle {
    final _ret = _objc_msgSend_148(this.ref.pointer, _sel_userInterfaceStyle);
    return UIUserInterfaceStyle.fromValue(_ret);
  }

  /// traitCollectionWithLayoutDirection:
  static UITraitCollection traitCollectionWithLayoutDirection_(
      UITraitEnvironmentLayoutDirection layoutDirection) {
    final _ret = _objc_msgSend_149(_class_UITraitCollection,
        _sel_traitCollectionWithLayoutDirection_, layoutDirection.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// layoutDirection
  UITraitEnvironmentLayoutDirection get layoutDirection {
    final _ret = _objc_msgSend_150(this.ref.pointer, _sel_layoutDirection);
    return UITraitEnvironmentLayoutDirection.fromValue(_ret);
  }

  /// traitCollectionWithDisplayScale:
  static UITraitCollection traitCollectionWithDisplayScale_(double scale) {
    final _ret = _objc_msgSend_151(
        _class_UITraitCollection, _sel_traitCollectionWithDisplayScale_, scale);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// displayScale
  double get displayScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_displayScale)
        : _objc_msgSend_24(this.ref.pointer, _sel_displayScale);
  }

  /// traitCollectionWithHorizontalSizeClass:
  static UITraitCollection traitCollectionWithHorizontalSizeClass_(
      UIUserInterfaceSizeClass horizontalSizeClass) {
    final _ret = _objc_msgSend_152(
        _class_UITraitCollection,
        _sel_traitCollectionWithHorizontalSizeClass_,
        horizontalSizeClass.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// horizontalSizeClass
  UIUserInterfaceSizeClass get horizontalSizeClass {
    final _ret = _objc_msgSend_153(this.ref.pointer, _sel_horizontalSizeClass);
    return UIUserInterfaceSizeClass.fromValue(_ret);
  }

  /// traitCollectionWithVerticalSizeClass:
  static UITraitCollection traitCollectionWithVerticalSizeClass_(
      UIUserInterfaceSizeClass verticalSizeClass) {
    final _ret = _objc_msgSend_152(_class_UITraitCollection,
        _sel_traitCollectionWithVerticalSizeClass_, verticalSizeClass.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// verticalSizeClass
  UIUserInterfaceSizeClass get verticalSizeClass {
    final _ret = _objc_msgSend_153(this.ref.pointer, _sel_verticalSizeClass);
    return UIUserInterfaceSizeClass.fromValue(_ret);
  }

  /// traitCollectionWithForceTouchCapability:
  static UITraitCollection traitCollectionWithForceTouchCapability_(
      UIForceTouchCapability capability) {
    final _ret = _objc_msgSend_154(_class_UITraitCollection,
        _sel_traitCollectionWithForceTouchCapability_, capability.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// forceTouchCapability
  UIForceTouchCapability get forceTouchCapability {
    final _ret = _objc_msgSend_155(this.ref.pointer, _sel_forceTouchCapability);
    return UIForceTouchCapability.fromValue(_ret);
  }

  /// traitCollectionWithPreferredContentSizeCategory:
  static UITraitCollection traitCollectionWithPreferredContentSizeCategory_(
      objc.NSString preferredContentSizeCategory) {
    final _ret = _objc_msgSend_156(
        _class_UITraitCollection,
        _sel_traitCollectionWithPreferredContentSizeCategory_,
        preferredContentSizeCategory.ref.pointer);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredContentSizeCategory
  objc.NSString get preferredContentSizeCategory {
    final _ret =
        _objc_msgSend_2(this.ref.pointer, _sel_preferredContentSizeCategory);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// traitCollectionWithDisplayGamut:
  static UITraitCollection traitCollectionWithDisplayGamut_(
      UIDisplayGamut displayGamut) {
    final _ret = _objc_msgSend_157(_class_UITraitCollection,
        _sel_traitCollectionWithDisplayGamut_, displayGamut.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// displayGamut
  UIDisplayGamut get displayGamut {
    final _ret = _objc_msgSend_158(this.ref.pointer, _sel_displayGamut);
    return UIDisplayGamut.fromValue(_ret);
  }

  /// traitCollectionWithAccessibilityContrast:
  static UITraitCollection traitCollectionWithAccessibilityContrast_(
      UIAccessibilityContrast accessibilityContrast) {
    final _ret = _objc_msgSend_159(
        _class_UITraitCollection,
        _sel_traitCollectionWithAccessibilityContrast_,
        accessibilityContrast.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// accessibilityContrast
  UIAccessibilityContrast get accessibilityContrast {
    final _ret =
        _objc_msgSend_160(this.ref.pointer, _sel_accessibilityContrast);
    return UIAccessibilityContrast.fromValue(_ret);
  }

  /// traitCollectionWithUserInterfaceLevel:
  static UITraitCollection traitCollectionWithUserInterfaceLevel_(
      UIUserInterfaceLevel userInterfaceLevel) {
    final _ret = _objc_msgSend_161(_class_UITraitCollection,
        _sel_traitCollectionWithUserInterfaceLevel_, userInterfaceLevel.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// userInterfaceLevel
  UIUserInterfaceLevel get userInterfaceLevel {
    final _ret = _objc_msgSend_162(this.ref.pointer, _sel_userInterfaceLevel);
    return UIUserInterfaceLevel.fromValue(_ret);
  }

  /// traitCollectionWithLegibilityWeight:
  static UITraitCollection traitCollectionWithLegibilityWeight_(
      UILegibilityWeight legibilityWeight) {
    final _ret = _objc_msgSend_163(_class_UITraitCollection,
        _sel_traitCollectionWithLegibilityWeight_, legibilityWeight.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// legibilityWeight
  UILegibilityWeight get legibilityWeight {
    final _ret = _objc_msgSend_164(this.ref.pointer, _sel_legibilityWeight);
    return UILegibilityWeight.fromValue(_ret);
  }

  /// traitCollectionWithActiveAppearance:
  static UITraitCollection traitCollectionWithActiveAppearance_(
      UIUserInterfaceActiveAppearance userInterfaceActiveAppearance) {
    final _ret = _objc_msgSend_165(
        _class_UITraitCollection,
        _sel_traitCollectionWithActiveAppearance_,
        userInterfaceActiveAppearance.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// activeAppearance
  UIUserInterfaceActiveAppearance get activeAppearance {
    final _ret = _objc_msgSend_166(this.ref.pointer, _sel_activeAppearance);
    return UIUserInterfaceActiveAppearance.fromValue(_ret);
  }

  /// traitCollectionWithToolbarItemPresentationSize:
  static UITraitCollection traitCollectionWithToolbarItemPresentationSize_(
      UINSToolbarItemPresentationSize toolbarItemPresentationSize) {
    final _ret = _objc_msgSend_167(
        _class_UITraitCollection,
        _sel_traitCollectionWithToolbarItemPresentationSize_,
        toolbarItemPresentationSize.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// toolbarItemPresentationSize
  UINSToolbarItemPresentationSize get toolbarItemPresentationSize {
    final _ret =
        _objc_msgSend_168(this.ref.pointer, _sel_toolbarItemPresentationSize);
    return UINSToolbarItemPresentationSize.fromValue(_ret);
  }

  /// traitCollectionWithImageDynamicRange:
  static UITraitCollection traitCollectionWithImageDynamicRange_(
      UIImageDynamicRange imageDynamicRange) {
    final _ret = _objc_msgSend_169(_class_UITraitCollection,
        _sel_traitCollectionWithImageDynamicRange_, imageDynamicRange.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageDynamicRange
  UIImageDynamicRange get imageDynamicRange {
    final _ret = _objc_msgSend_170(this.ref.pointer, _sel_imageDynamicRange);
    return UIImageDynamicRange.fromValue(_ret);
  }

  /// traitCollectionWithTypesettingLanguage:
  static UITraitCollection traitCollectionWithTypesettingLanguage_(
      objc.NSString language) {
    final _ret = _objc_msgSend_156(_class_UITraitCollection,
        _sel_traitCollectionWithTypesettingLanguage_, language.ref.pointer);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// typesettingLanguage
  objc.NSString get typesettingLanguage {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_typesettingLanguage);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// traitCollectionWithSceneCaptureState:
  static UITraitCollection traitCollectionWithSceneCaptureState_(
      UISceneCaptureState sceneCaptureState) {
    final _ret = _objc_msgSend_171(_class_UITraitCollection,
        _sel_traitCollectionWithSceneCaptureState_, sceneCaptureState.value);
    return UITraitCollection.castFromPointer(_ret, retain: true, release: true);
  }

  /// sceneCaptureState
  UISceneCaptureState get sceneCaptureState {
    final _ret = _objc_msgSend_172(this.ref.pointer, _sel_sceneCaptureState);
    return UISceneCaptureState.fromValue(_ret);
  }

  /// new
  static UITraitCollection new1() {
    final _ret = _objc_msgSend_4(_class_UITraitCollection, _sel_new);
    return UITraitCollection.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UITraitCollection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UITraitCollection, _sel_allocWithZone_, zone);
    return UITraitCollection.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UITraitCollection alloc() {
    final _ret = _objc_msgSend_4(_class_UITraitCollection, _sel_alloc);
    return UITraitCollection.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UITraitCollection = objc.getClass("UITraitCollection");
late final _sel_containsTraitsInCollection_ =
    objc.registerName("containsTraitsInCollection:");
final _objc_msgSend_144 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> trait)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_traitCollectionWithTraitsFromCollections_ =
    objc.registerName("traitCollectionWithTraitsFromCollections:");
final _objc_msgSend_145 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> traitCollections)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_traitCollectionWithUserInterfaceIdiom_ =
    objc.registerName("traitCollectionWithUserInterfaceIdiom:");
final _objc_msgSend_146 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long idiom)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum UIUserInterfaceStyle {
  UIUserInterfaceStyleUnspecified(0),
  UIUserInterfaceStyleLight(1),
  UIUserInterfaceStyleDark(2);

  final int value;
  const UIUserInterfaceStyle(this.value);

  static UIUserInterfaceStyle fromValue(int value) => switch (value) {
        0 => UIUserInterfaceStyleUnspecified,
        1 => UIUserInterfaceStyleLight,
        2 => UIUserInterfaceStyleDark,
        _ =>
          throw ArgumentError("Unknown value for UIUserInterfaceStyle: $value"),
      };
}

late final _sel_traitCollectionWithUserInterfaceStyle_ =
    objc.registerName("traitCollectionWithUserInterfaceStyle:");
final _objc_msgSend_147 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong userInterfaceStyle)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_userInterfaceStyle = objc.registerName("userInterfaceStyle");
final _objc_msgSend_148 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UITraitEnvironmentLayoutDirection {
  UITraitEnvironmentLayoutDirectionUnspecified(-1),
  UITraitEnvironmentLayoutDirectionLeftToRight(0),
  UITraitEnvironmentLayoutDirectionRightToLeft(1);

  final int value;
  const UITraitEnvironmentLayoutDirection(this.value);

  static UITraitEnvironmentLayoutDirection fromValue(int value) =>
      switch (value) {
        -1 => UITraitEnvironmentLayoutDirectionUnspecified,
        0 => UITraitEnvironmentLayoutDirectionLeftToRight,
        1 => UITraitEnvironmentLayoutDirectionRightToLeft,
        _ => throw ArgumentError(
            "Unknown value for UITraitEnvironmentLayoutDirection: $value"),
      };
}

late final _sel_traitCollectionWithLayoutDirection_ =
    objc.registerName("traitCollectionWithLayoutDirection:");
final _objc_msgSend_149 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long layoutDirection)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_layoutDirection = objc.registerName("layoutDirection");
final _objc_msgSend_150 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_traitCollectionWithDisplayScale_ =
    objc.registerName("traitCollectionWithDisplayScale:");
final _objc_msgSend_151 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double scale)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_displayScale = objc.registerName("displayScale");

enum UIUserInterfaceSizeClass {
  UIUserInterfaceSizeClassUnspecified(0),
  UIUserInterfaceSizeClassCompact(1),
  UIUserInterfaceSizeClassRegular(2);

  final int value;
  const UIUserInterfaceSizeClass(this.value);

  static UIUserInterfaceSizeClass fromValue(int value) => switch (value) {
        0 => UIUserInterfaceSizeClassUnspecified,
        1 => UIUserInterfaceSizeClassCompact,
        2 => UIUserInterfaceSizeClassRegular,
        _ => throw ArgumentError(
            "Unknown value for UIUserInterfaceSizeClass: $value"),
      };
}

late final _sel_traitCollectionWithHorizontalSizeClass_ =
    objc.registerName("traitCollectionWithHorizontalSizeClass:");
final _objc_msgSend_152 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong horizontalSizeClass)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_horizontalSizeClass = objc.registerName("horizontalSizeClass");
final _objc_msgSend_153 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_traitCollectionWithVerticalSizeClass_ =
    objc.registerName("traitCollectionWithVerticalSizeClass:");
late final _sel_verticalSizeClass = objc.registerName("verticalSizeClass");

enum UIForceTouchCapability {
  UIForceTouchCapabilityUnknown(0),
  UIForceTouchCapabilityUnavailable(1),
  UIForceTouchCapabilityAvailable(2);

  final int value;
  const UIForceTouchCapability(this.value);

  static UIForceTouchCapability fromValue(int value) => switch (value) {
        0 => UIForceTouchCapabilityUnknown,
        1 => UIForceTouchCapabilityUnavailable,
        2 => UIForceTouchCapabilityAvailable,
        _ => throw ArgumentError(
            "Unknown value for UIForceTouchCapability: $value"),
      };
}

late final _sel_traitCollectionWithForceTouchCapability_ =
    objc.registerName("traitCollectionWithForceTouchCapability:");
final _objc_msgSend_154 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong capability)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_forceTouchCapability =
    objc.registerName("forceTouchCapability");
final _objc_msgSend_155 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_traitCollectionWithPreferredContentSizeCategory_ =
    objc.registerName("traitCollectionWithPreferredContentSizeCategory:");
final _objc_msgSend_156 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> preferredContentSizeCategory)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preferredContentSizeCategory =
    objc.registerName("preferredContentSizeCategory");

enum UIDisplayGamut {
  UIDisplayGamutUnspecified(-1),
  UIDisplayGamutSRGB(0),
  UIDisplayGamutP3(1);

  final int value;
  const UIDisplayGamut(this.value);

  static UIDisplayGamut fromValue(int value) => switch (value) {
        -1 => UIDisplayGamutUnspecified,
        0 => UIDisplayGamutSRGB,
        1 => UIDisplayGamutP3,
        _ => throw ArgumentError("Unknown value for UIDisplayGamut: $value"),
      };
}

late final _sel_traitCollectionWithDisplayGamut_ =
    objc.registerName("traitCollectionWithDisplayGamut:");
final _objc_msgSend_157 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long displayGamut)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_displayGamut = objc.registerName("displayGamut");
final _objc_msgSend_158 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIAccessibilityContrast {
  UIAccessibilityContrastUnspecified(-1),
  UIAccessibilityContrastNormal(0),
  UIAccessibilityContrastHigh(1);

  final int value;
  const UIAccessibilityContrast(this.value);

  static UIAccessibilityContrast fromValue(int value) => switch (value) {
        -1 => UIAccessibilityContrastUnspecified,
        0 => UIAccessibilityContrastNormal,
        1 => UIAccessibilityContrastHigh,
        _ => throw ArgumentError(
            "Unknown value for UIAccessibilityContrast: $value"),
      };
}

late final _sel_traitCollectionWithAccessibilityContrast_ =
    objc.registerName("traitCollectionWithAccessibilityContrast:");
final _objc_msgSend_159 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long accessibilityContrast)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_accessibilityContrast =
    objc.registerName("accessibilityContrast");
final _objc_msgSend_160 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIUserInterfaceLevel {
  UIUserInterfaceLevelUnspecified(-1),
  UIUserInterfaceLevelBase(0),
  UIUserInterfaceLevelElevated(1);

  final int value;
  const UIUserInterfaceLevel(this.value);

  static UIUserInterfaceLevel fromValue(int value) => switch (value) {
        -1 => UIUserInterfaceLevelUnspecified,
        0 => UIUserInterfaceLevelBase,
        1 => UIUserInterfaceLevelElevated,
        _ =>
          throw ArgumentError("Unknown value for UIUserInterfaceLevel: $value"),
      };
}

late final _sel_traitCollectionWithUserInterfaceLevel_ =
    objc.registerName("traitCollectionWithUserInterfaceLevel:");
final _objc_msgSend_161 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long userInterfaceLevel)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_userInterfaceLevel = objc.registerName("userInterfaceLevel");
final _objc_msgSend_162 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UILegibilityWeight {
  UILegibilityWeightUnspecified(-1),
  UILegibilityWeightRegular(0),
  UILegibilityWeightBold(1);

  final int value;
  const UILegibilityWeight(this.value);

  static UILegibilityWeight fromValue(int value) => switch (value) {
        -1 => UILegibilityWeightUnspecified,
        0 => UILegibilityWeightRegular,
        1 => UILegibilityWeightBold,
        _ =>
          throw ArgumentError("Unknown value for UILegibilityWeight: $value"),
      };
}

late final _sel_traitCollectionWithLegibilityWeight_ =
    objc.registerName("traitCollectionWithLegibilityWeight:");
final _objc_msgSend_163 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long legibilityWeight)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_legibilityWeight = objc.registerName("legibilityWeight");
final _objc_msgSend_164 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIUserInterfaceActiveAppearance {
  UIUserInterfaceActiveAppearanceUnspecified(-1),
  UIUserInterfaceActiveAppearanceInactive(0),
  UIUserInterfaceActiveAppearanceActive(1);

  final int value;
  const UIUserInterfaceActiveAppearance(this.value);

  static UIUserInterfaceActiveAppearance fromValue(int value) =>
      switch (value) {
        -1 => UIUserInterfaceActiveAppearanceUnspecified,
        0 => UIUserInterfaceActiveAppearanceInactive,
        1 => UIUserInterfaceActiveAppearanceActive,
        _ => throw ArgumentError(
            "Unknown value for UIUserInterfaceActiveAppearance: $value"),
      };
}

late final _sel_traitCollectionWithActiveAppearance_ =
    objc.registerName("traitCollectionWithActiveAppearance:");
final _objc_msgSend_165 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long userInterfaceActiveAppearance)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_activeAppearance = objc.registerName("activeAppearance");
final _objc_msgSend_166 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UINSToolbarItemPresentationSize {
  UINSToolbarItemPresentationSizeUnspecified(-1),
  UINSToolbarItemPresentationSizeRegular(0),
  UINSToolbarItemPresentationSizeSmall(1),
  UINSToolbarItemPresentationSizeLarge(3);

  final int value;
  const UINSToolbarItemPresentationSize(this.value);

  static UINSToolbarItemPresentationSize fromValue(int value) =>
      switch (value) {
        -1 => UINSToolbarItemPresentationSizeUnspecified,
        0 => UINSToolbarItemPresentationSizeRegular,
        1 => UINSToolbarItemPresentationSizeSmall,
        3 => UINSToolbarItemPresentationSizeLarge,
        _ => throw ArgumentError(
            "Unknown value for UINSToolbarItemPresentationSize: $value"),
      };
}

late final _sel_traitCollectionWithToolbarItemPresentationSize_ =
    objc.registerName("traitCollectionWithToolbarItemPresentationSize:");
final _objc_msgSend_167 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long toolbarItemPresentationSize)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_toolbarItemPresentationSize =
    objc.registerName("toolbarItemPresentationSize");
final _objc_msgSend_168 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIImageDynamicRange {
  UIImageDynamicRangeUnspecified(-1),
  UIImageDynamicRangeStandard(0),
  UIImageDynamicRangeConstrainedHigh(1),
  UIImageDynamicRangeHigh(2);

  final int value;
  const UIImageDynamicRange(this.value);

  static UIImageDynamicRange fromValue(int value) => switch (value) {
        -1 => UIImageDynamicRangeUnspecified,
        0 => UIImageDynamicRangeStandard,
        1 => UIImageDynamicRangeConstrainedHigh,
        2 => UIImageDynamicRangeHigh,
        _ =>
          throw ArgumentError("Unknown value for UIImageDynamicRange: $value"),
      };
}

late final _sel_traitCollectionWithImageDynamicRange_ =
    objc.registerName("traitCollectionWithImageDynamicRange:");
final _objc_msgSend_169 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long imageDynamicRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_imageDynamicRange = objc.registerName("imageDynamicRange");
final _objc_msgSend_170 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_traitCollectionWithTypesettingLanguage_ =
    objc.registerName("traitCollectionWithTypesettingLanguage:");
late final _sel_typesettingLanguage = objc.registerName("typesettingLanguage");

enum UISceneCaptureState {
  UISceneCaptureStateUnspecified(-1),
  UISceneCaptureStateInactive(0),
  UISceneCaptureStateActive(1);

  final int value;
  const UISceneCaptureState(this.value);

  static UISceneCaptureState fromValue(int value) => switch (value) {
        -1 => UISceneCaptureStateUnspecified,
        0 => UISceneCaptureStateInactive,
        1 => UISceneCaptureStateActive,
        _ =>
          throw ArgumentError("Unknown value for UISceneCaptureState: $value"),
      };
}

late final _sel_traitCollectionWithSceneCaptureState_ =
    objc.registerName("traitCollectionWithSceneCaptureState:");
final _objc_msgSend_171 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long sceneCaptureState)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_sceneCaptureState = objc.registerName("sceneCaptureState");
final _objc_msgSend_172 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_traitCollection = objc.registerName("traitCollection");
final _objc_msgSend_173 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_configurationWithTraitCollection_ =
    objc.registerName("configurationWithTraitCollection:");
final _objc_msgSend_174 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_locale = objc.registerName("locale");
final _objc_msgSend_175 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_configurationWithLocale_ =
    objc.registerName("configurationWithLocale:");
final _objc_msgSend_176 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> locale)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_configurationByApplyingConfiguration_ =
    objc.registerName("configurationByApplyingConfiguration:");
final _objc_msgSend_177 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> otherConfiguration)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_systemImageNamed_withConfiguration_ =
    objc.registerName("systemImageNamed:withConfiguration:");
final _objc_msgSend_178 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_systemImageNamed_compatibleWithTraitCollection_ =
    objc.registerName("systemImageNamed:compatibleWithTraitCollection:");
final _objc_msgSend_179 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_systemImageNamed_variableValue_withConfiguration_ =
    objc.registerName("systemImageNamed:variableValue:withConfiguration:");
final _objc_msgSend_180 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Double value,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageNamed_ = objc.registerName("imageNamed:");

/// NSBundle
class NSBundle extends objc.NSObject {
  NSBundle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSBundle] that points to the same underlying object as [other].
  NSBundle.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSBundle] that wraps the given raw object pointer.
  NSBundle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSBundle].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSBundle);
  }

  /// mainBundle
  static NSBundle getMainBundle() {
    final _ret = _objc_msgSend_181(_class_NSBundle, _sel_mainBundle);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundleWithPath:
  static NSBundle? bundleWithPath_(objc.NSString path) {
    final _ret = _objc_msgSend_5(
        _class_NSBundle, _sel_bundleWithPath_, path.ref.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithPath:
  NSBundle? initWithPath_(objc.NSString path) {
    final _ret = _objc_msgSend_5(this.ref.retainAndReturnPointer(),
        _sel_initWithPath_, path.ref.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// bundleWithURL:
  static NSBundle? bundleWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_182(
        _class_NSBundle, _sel_bundleWithURL_, url.ref.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithURL:
  NSBundle? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_182(
        this.ref.retainAndReturnPointer(), _sel_initWithURL_, url.ref.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// bundleForClass:
  static NSBundle bundleForClass_(objc.ObjCObjectBase aClass) {
    final _ret = _objc_msgSend_183(
        _class_NSBundle, _sel_bundleForClass_, aClass.ref.pointer);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundleWithIdentifier:
  static NSBundle? bundleWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_184(
        _class_NSBundle, _sel_bundleWithIdentifier_, identifier.ref.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// allBundles
  static objc.NSArray getAllBundles() {
    final _ret = _objc_msgSend_27(_class_NSBundle, _sel_allBundles);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// allFrameworks
  static objc.NSArray getAllFrameworks() {
    final _ret = _objc_msgSend_27(_class_NSBundle, _sel_allFrameworks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// load
  bool load() {
    return _objc_msgSend_11(this.ref.pointer, _sel_load);
  }

  /// isLoaded
  bool get loaded {
    return _objc_msgSend_11(this.ref.pointer, _sel_isLoaded);
  }

  /// unload
  bool unload() {
    return _objc_msgSend_11(this.ref.pointer, _sel_unload);
  }

  /// preflightAndReturnError:
  bool preflightAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_185(
        this.ref.pointer, _sel_preflightAndReturnError_, error);
  }

  /// loadAndReturnError:
  bool loadAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_185(this.ref.pointer, _sel_loadAndReturnError_, error);
  }

  /// bundleURL
  objc.NSURL get bundleURL {
    final _ret = _objc_msgSend_186(this.ref.pointer, _sel_bundleURL);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// resourceURL
  objc.NSURL? get resourceURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_resourceURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// executableURL
  objc.NSURL? get executableURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_executableURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForAuxiliaryExecutable:
  objc.NSURL? URLForAuxiliaryExecutable_(objc.NSString executableName) {
    final _ret = _objc_msgSend_188(this.ref.pointer,
        _sel_URLForAuxiliaryExecutable_, executableName.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// privateFrameworksURL
  objc.NSURL? get privateFrameworksURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_privateFrameworksURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedFrameworksURL
  objc.NSURL? get sharedFrameworksURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_sharedFrameworksURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedSupportURL
  objc.NSURL? get sharedSupportURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_sharedSupportURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// builtInPlugInsURL
  objc.NSURL? get builtInPlugInsURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_builtInPlugInsURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// appStoreReceiptURL
  objc.NSURL? get appStoreReceiptURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_appStoreReceiptURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// bundlePath
  objc.NSString get bundlePath {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_bundlePath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// resourcePath
  objc.NSString? get resourcePath {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_resourcePath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// executablePath
  objc.NSString? get executablePath {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_executablePath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForAuxiliaryExecutable:
  objc.NSString? pathForAuxiliaryExecutable_(objc.NSString executableName) {
    final _ret = _objc_msgSend_189(this.ref.pointer,
        _sel_pathForAuxiliaryExecutable_, executableName.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// privateFrameworksPath
  objc.NSString? get privateFrameworksPath {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_privateFrameworksPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedFrameworksPath
  objc.NSString? get sharedFrameworksPath {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_sharedFrameworksPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sharedSupportPath
  objc.NSString? get sharedSupportPath {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_sharedSupportPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// builtInPlugInsPath
  objc.NSString? get builtInPlugInsPath {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_builtInPlugInsPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:subdirectory:inBundleWithURL:
  static objc.NSURL? URLForResource_withExtension_subdirectory_inBundleWithURL_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSURL bundleURL) {
    final _ret = _objc_msgSend_190(
        _class_NSBundle,
        _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_,
        name?.ref.pointer ?? ffi.nullptr,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr,
        bundleURL.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLsForResourcesWithExtension:subdirectory:inBundleWithURL:
  static objc.NSArray?
      URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
          objc.NSString? ext, objc.NSString? subpath, objc.NSURL bundleURL) {
    final _ret = _objc_msgSend_191(
        _class_NSBundle,
        _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr,
        bundleURL.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:
  objc.NSURL? URLForResource_withExtension_(
      objc.NSString? name, objc.NSString? ext) {
    final _ret = _objc_msgSend_192(
        this.ref.pointer,
        _sel_URLForResource_withExtension_,
        name?.ref.pointer ?? ffi.nullptr,
        ext?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:subdirectory:
  objc.NSURL? URLForResource_withExtension_subdirectory_(
      objc.NSString? name, objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_193(
        this.ref.pointer,
        _sel_URLForResource_withExtension_subdirectory_,
        name?.ref.pointer ?? ffi.nullptr,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLForResource:withExtension:subdirectory:localization:
  objc.NSURL? URLForResource_withExtension_subdirectory_localization_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_194(
        this.ref.pointer,
        _sel_URLForResource_withExtension_subdirectory_localization_,
        name?.ref.pointer ?? ffi.nullptr,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr,
        localizationName?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLsForResourcesWithExtension:subdirectory:
  objc.NSArray? URLsForResourcesWithExtension_subdirectory_(
      objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_195(
        this.ref.pointer,
        _sel_URLsForResourcesWithExtension_subdirectory_,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// URLsForResourcesWithExtension:subdirectory:localization:
  objc.NSArray? URLsForResourcesWithExtension_subdirectory_localization_(
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_196(
        this.ref.pointer,
        _sel_URLsForResourcesWithExtension_subdirectory_localization_,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr,
        localizationName?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForResource:ofType:inDirectory:
  objc.NSString? pathForResource_ofType_inDirectory_(
      objc.NSString? name, objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_197(
        this.ref.pointer,
        _sel_pathForResource_ofType_inDirectory_,
        name?.ref.pointer ?? ffi.nullptr,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathsForResourcesOfType:inDirectory:
  objc.NSArray pathsForResourcesOfType_inDirectory_(
      objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_198(
        this.ref.pointer,
        _sel_pathsForResourcesOfType_inDirectory_,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForResource:ofType:
  objc.NSString? pathForResource_ofType_(
      objc.NSString? name, objc.NSString? ext) {
    final _ret = _objc_msgSend_199(
        this.ref.pointer,
        _sel_pathForResource_ofType_,
        name?.ref.pointer ?? ffi.nullptr,
        ext?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathForResource:ofType:inDirectory:forLocalization:
  objc.NSString? pathForResource_ofType_inDirectory_forLocalization_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_200(
        this.ref.pointer,
        _sel_pathForResource_ofType_inDirectory_forLocalization_,
        name?.ref.pointer ?? ffi.nullptr,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr,
        localizationName?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pathsForResourcesOfType:inDirectory:forLocalization:
  objc.NSArray pathsForResourcesOfType_inDirectory_forLocalization_(
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_201(
        this.ref.pointer,
        _sel_pathsForResourcesOfType_inDirectory_forLocalization_,
        ext?.ref.pointer ?? ffi.nullptr,
        subpath?.ref.pointer ?? ffi.nullptr,
        localizationName?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedStringForKey:value:table:
  objc.NSString localizedStringForKey_value_table_(
      objc.NSString key, objc.NSString? value, objc.NSString? tableName) {
    final _ret = _objc_msgSend_202(
        this.ref.pointer,
        _sel_localizedStringForKey_value_table_,
        key.ref.pointer,
        value?.ref.pointer ?? ffi.nullptr,
        tableName?.ref.pointer ?? ffi.nullptr);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedAttributedStringForKey:value:table:
  NSAttributedString localizedAttributedStringForKey_value_table_(
      objc.NSString key, objc.NSString? value, objc.NSString? tableName) {
    final _ret = _objc_msgSend_204(
        this.ref.pointer,
        _sel_localizedAttributedStringForKey_value_table_,
        key.ref.pointer,
        value?.ref.pointer ?? ffi.nullptr,
        tableName?.ref.pointer ?? ffi.nullptr);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// bundleIdentifier
  objc.NSString? get bundleIdentifier {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_bundleIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// infoDictionary
  objc.NSDictionary? get infoDictionary {
    final _ret = _objc_msgSend_112(this.ref.pointer, _sel_infoDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedInfoDictionary
  objc.NSDictionary? get localizedInfoDictionary {
    final _ret =
        _objc_msgSend_112(this.ref.pointer, _sel_localizedInfoDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// objectForInfoDictionaryKey:
  objc.ObjCObjectBase? objectForInfoDictionaryKey_(objc.NSString key) {
    final _ret = _objc_msgSend_5(
        this.ref.pointer, _sel_objectForInfoDictionaryKey_, key.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// classNamed:
  objc.ObjCObjectBase? classNamed_(objc.NSString className) {
    final _ret = _objc_msgSend_5(
        this.ref.pointer, _sel_classNamed_, className.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// principalClass
  objc.ObjCObjectBase? get principalClass {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_principalClass);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// preferredLocalizations
  objc.NSArray get preferredLocalizations {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_preferredLocalizations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizations
  objc.NSArray get localizations {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_localizations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// developmentLocalization
  objc.NSString? get developmentLocalization {
    final _ret =
        _objc_msgSend_40(this.ref.pointer, _sel_developmentLocalization);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredLocalizationsFromArray:
  static objc.NSArray preferredLocalizationsFromArray_(
      objc.NSArray localizationsArray) {
    final _ret = _objc_msgSend_205(_class_NSBundle,
        _sel_preferredLocalizationsFromArray_, localizationsArray.ref.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredLocalizationsFromArray:forPreferences:
  static objc.NSArray preferredLocalizationsFromArray_forPreferences_(
      objc.NSArray localizationsArray, objc.NSArray? preferencesArray) {
    final _ret = _objc_msgSend_206(
        _class_NSBundle,
        _sel_preferredLocalizationsFromArray_forPreferences_,
        localizationsArray.ref.pointer,
        preferencesArray?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// executableArchitectures
  objc.NSArray? get executableArchitectures {
    final _ret =
        _objc_msgSend_98(this.ref.pointer, _sel_executableArchitectures);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSBundle init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSBundle new1() {
    final _ret = _objc_msgSend_4(_class_NSBundle, _sel_new);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSBundle allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSBundle, _sel_allocWithZone_, zone);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSBundle alloc() {
    final _ret = _objc_msgSend_4(_class_NSBundle, _sel_alloc);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSBundle = objc.getClass("NSBundle");
late final _sel_mainBundle = objc.registerName("mainBundle");
final _objc_msgSend_181 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_bundleWithPath_ = objc.registerName("bundleWithPath:");
late final _sel_initWithPath_ = objc.registerName("initWithPath:");
late final _sel_bundleWithURL_ = objc.registerName("bundleWithURL:");
final _objc_msgSend_182 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithURL_ = objc.registerName("initWithURL:");
late final _sel_bundleForClass_ = objc.registerName("bundleForClass:");
final _objc_msgSend_183 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aClass)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_bundleWithIdentifier_ =
    objc.registerName("bundleWithIdentifier:");
final _objc_msgSend_184 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allBundles = objc.registerName("allBundles");
late final _sel_allFrameworks = objc.registerName("allFrameworks");
late final _sel_load = objc.registerName("load");
late final _sel_isLoaded = objc.registerName("isLoaded");
late final _sel_unload = objc.registerName("unload");
late final _sel_preflightAndReturnError_ =
    objc.registerName("preflightAndReturnError:");
final _objc_msgSend_185 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_loadAndReturnError_ = objc.registerName("loadAndReturnError:");
late final _sel_bundleURL = objc.registerName("bundleURL");
final _objc_msgSend_186 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_resourceURL = objc.registerName("resourceURL");
final _objc_msgSend_187 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_executableURL = objc.registerName("executableURL");
late final _sel_URLForAuxiliaryExecutable_ =
    objc.registerName("URLForAuxiliaryExecutable:");
final _objc_msgSend_188 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> executableName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_privateFrameworksURL =
    objc.registerName("privateFrameworksURL");
late final _sel_sharedFrameworksURL = objc.registerName("sharedFrameworksURL");
late final _sel_sharedSupportURL = objc.registerName("sharedSupportURL");
late final _sel_builtInPlugInsURL = objc.registerName("builtInPlugInsURL");
late final _sel_appStoreReceiptURL = objc.registerName("appStoreReceiptURL");
late final _sel_bundlePath = objc.registerName("bundlePath");
late final _sel_resourcePath = objc.registerName("resourcePath");
late final _sel_executablePath = objc.registerName("executablePath");
late final _sel_pathForAuxiliaryExecutable_ =
    objc.registerName("pathForAuxiliaryExecutable:");
final _objc_msgSend_189 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> executableName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_privateFrameworksPath =
    objc.registerName("privateFrameworksPath");
late final _sel_sharedFrameworksPath =
    objc.registerName("sharedFrameworksPath");
late final _sel_sharedSupportPath = objc.registerName("sharedSupportPath");
late final _sel_builtInPlugInsPath = objc.registerName("builtInPlugInsPath");
late final _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_ =
    objc.registerName(
        "URLForResource:withExtension:subdirectory:inBundleWithURL:");
final _objc_msgSend_190 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath,
                ffi.Pointer<objc.ObjCObject> bundleURL)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_ =
    objc.registerName(
        "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:");
final _objc_msgSend_191 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath,
                ffi.Pointer<objc.ObjCObject> bundleURL)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_ =
    objc.registerName("URLForResource:withExtension:");
final _objc_msgSend_192 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> ext)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_subdirectory_ =
    objc.registerName("URLForResource:withExtension:subdirectory:");
final _objc_msgSend_193 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_subdirectory_localization_ = objc
    .registerName("URLForResource:withExtension:subdirectory:localization:");
final _objc_msgSend_194 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath,
                ffi.Pointer<objc.ObjCObject> localizationName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_ =
    objc.registerName("URLsForResourcesWithExtension:subdirectory:");
final _objc_msgSend_195 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_localization_ = objc
    .registerName("URLsForResourcesWithExtension:subdirectory:localization:");
final _objc_msgSend_196 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath,
                ffi.Pointer<objc.ObjCObject> localizationName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_inDirectory_ =
    objc.registerName("pathForResource:ofType:inDirectory:");
final _objc_msgSend_197 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathsForResourcesOfType_inDirectory_ =
    objc.registerName("pathsForResourcesOfType:inDirectory:");
final _objc_msgSend_198 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_ =
    objc.registerName("pathForResource:ofType:");
final _objc_msgSend_199 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> ext)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_inDirectory_forLocalization_ =
    objc.registerName("pathForResource:ofType:inDirectory:forLocalization:");
final _objc_msgSend_200 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath,
                ffi.Pointer<objc.ObjCObject> localizationName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathsForResourcesOfType_inDirectory_forLocalization_ =
    objc.registerName("pathsForResourcesOfType:inDirectory:forLocalization:");
final _objc_msgSend_201 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ext,
                ffi.Pointer<objc.ObjCObject> subpath,
                ffi.Pointer<objc.ObjCObject> localizationName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedStringForKey_value_table_ =
    objc.registerName("localizedStringForKey:value:table:");
final _objc_msgSend_202 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> key,
                ffi.Pointer<objc.ObjCObject> value,
                ffi.Pointer<objc.ObjCObject> tableName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSAttributedString
class NSAttributedString extends objc.NSObject {
  NSAttributedString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAttributedString] that points to the same underlying object as [other].
  NSAttributedString.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSAttributedString] that wraps the given raw object pointer.
  NSAttributedString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAttributedString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSAttributedString);
  }

  /// string
  objc.NSString get string {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_string);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributesAtIndex:effectiveRange:
  objc.NSDictionary attributesAtIndex_effectiveRange_(
      int location, ffi.Pointer<_NSRange> range) {
    final _ret = _objc_msgSend_203(this.ref.pointer,
        _sel_attributesAtIndex_effectiveRange_, location, range);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSAttributedString init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static NSAttributedString new1() {
    final _ret = _objc_msgSend_4(_class_NSAttributedString, _sel_new);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSAttributedString allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSAttributedString, _sel_allocWithZone_, zone);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSAttributedString alloc() {
    final _ret = _objc_msgSend_4(_class_NSAttributedString, _sel_alloc);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSAttributedString = objc.getClass("NSAttributedString");
late final _sel_string = objc.registerName("string");

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

late final _sel_attributesAtIndex_effectiveRange_ =
    objc.registerName("attributesAtIndex:effectiveRange:");
final _objc_msgSend_203 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong location,
                ffi.Pointer<_NSRange> range)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();
late final _sel_localizedAttributedStringForKey_value_table_ =
    objc.registerName("localizedAttributedStringForKey:value:table:");
final _objc_msgSend_204 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> key,
                ffi.Pointer<objc.ObjCObject> value,
                ffi.Pointer<objc.ObjCObject> tableName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_bundleIdentifier = objc.registerName("bundleIdentifier");
late final _sel_infoDictionary = objc.registerName("infoDictionary");
late final _sel_localizedInfoDictionary =
    objc.registerName("localizedInfoDictionary");
late final _sel_objectForInfoDictionaryKey_ =
    objc.registerName("objectForInfoDictionaryKey:");
late final _sel_classNamed_ = objc.registerName("classNamed:");
late final _sel_principalClass = objc.registerName("principalClass");
late final _sel_preferredLocalizations =
    objc.registerName("preferredLocalizations");
late final _sel_localizations = objc.registerName("localizations");
late final _sel_developmentLocalization =
    objc.registerName("developmentLocalization");
late final _sel_preferredLocalizationsFromArray_ =
    objc.registerName("preferredLocalizationsFromArray:");
final _objc_msgSend_205 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> localizationsArray)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preferredLocalizationsFromArray_forPreferences_ =
    objc.registerName("preferredLocalizationsFromArray:forPreferences:");
final _objc_msgSend_206 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> localizationsArray,
                ffi.Pointer<objc.ObjCObject> preferencesArray)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_executableArchitectures =
    objc.registerName("executableArchitectures");
late final _sel_imageNamed_inBundle_withConfiguration_ =
    objc.registerName("imageNamed:inBundle:withConfiguration:");
final _objc_msgSend_207 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> bundle,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageNamed_inBundle_compatibleWithTraitCollection_ =
    objc.registerName("imageNamed:inBundle:compatibleWithTraitCollection:");
final _objc_msgSend_208 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> bundle,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageNamed_inBundle_variableValue_withConfiguration_ =
    objc.registerName("imageNamed:inBundle:variableValue:withConfiguration:");
final _objc_msgSend_209 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> bundle,
                ffi.Double value,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithContentsOfFile_ =
    objc.registerName("imageWithContentsOfFile:");
late final _sel_imageWithData_ = objc.registerName("imageWithData:");
final _objc_msgSend_210 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithData_scale_ =
    objc.registerName("imageWithData:scale:");
final _objc_msgSend_211 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data,
                ffi.Double scale)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();

final class CGImage extends ffi.Opaque {}

late final _sel_imageWithCGImage_ = objc.registerName("imageWithCGImage:");
final _objc_msgSend_212 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImage> cgImage)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage>)>();

enum UIImageOrientation {
  UIImageOrientationUp(0),
  UIImageOrientationDown(1),
  UIImageOrientationLeft(2),
  UIImageOrientationRight(3),
  UIImageOrientationUpMirrored(4),
  UIImageOrientationDownMirrored(5),
  UIImageOrientationLeftMirrored(6),
  UIImageOrientationRightMirrored(7);

  final int value;
  const UIImageOrientation(this.value);

  static UIImageOrientation fromValue(int value) => switch (value) {
        0 => UIImageOrientationUp,
        1 => UIImageOrientationDown,
        2 => UIImageOrientationLeft,
        3 => UIImageOrientationRight,
        4 => UIImageOrientationUpMirrored,
        5 => UIImageOrientationDownMirrored,
        6 => UIImageOrientationLeftMirrored,
        7 => UIImageOrientationRightMirrored,
        _ =>
          throw ArgumentError("Unknown value for UIImageOrientation: $value"),
      };
}

late final _sel_imageWithCGImage_scale_orientation_ =
    objc.registerName("imageWithCGImage:scale:orientation:");
final _objc_msgSend_213 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImage> cgImage,
                ffi.Double scale,
                ffi.UnsignedLong orientation)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImage>,
            double,
            int)>();

/// CIImage
class CIImage extends objc.NSObject {
  CIImage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIImage] that points to the same underlying object as [other].
  CIImage.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CIImage] that wraps the given raw object pointer.
  CIImage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIImage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CIImage);
  }

  /// imageWithCGImage:
  static CIImage imageWithCGImage_(ffi.Pointer<CGImage> image) {
    final _ret =
        _objc_msgSend_214(_class_CIImage, _sel_imageWithCGImage_, image);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGImage:options:
  static CIImage imageWithCGImage_options_(
      ffi.Pointer<CGImage> image, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_215(
        _class_CIImage,
        _sel_imageWithCGImage_options_,
        image,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGImageSource:index:options:
  static CIImage imageWithCGImageSource_index_options_(
      ffi.Pointer<CGImageSource> source, int index, objc.NSDictionary? dict) {
    final _ret = _objc_msgSend_216(
        _class_CIImage,
        _sel_imageWithCGImageSource_index_options_,
        source,
        index,
        dict?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGLayer:
  static CIImage imageWithCGLayer_(ffi.Pointer<CGLayer> layer) {
    final _ret =
        _objc_msgSend_217(_class_CIImage, _sel_imageWithCGLayer_, layer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCGLayer:options:
  static CIImage imageWithCGLayer_options_(
      ffi.Pointer<CGLayer> layer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_218(
        _class_CIImage,
        _sel_imageWithCGLayer_options_,
        layer,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithBitmapData:bytesPerRow:size:format:colorSpace:
  static CIImage imageWithBitmapData_bytesPerRow_size_format_colorSpace_(
      objc.NSData data,
      int bytesPerRow,
      CGSize size,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_219(
        _class_CIImage,
        _sel_imageWithBitmapData_bytesPerRow_size_format_colorSpace_,
        data.ref.pointer,
        bytesPerRow,
        size,
        format,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithTexture:size:flipped:colorSpace:
  static CIImage imageWithTexture_size_flipped_colorSpace_(int name,
      CGSize size, bool flipped, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_220(
        _class_CIImage,
        _sel_imageWithTexture_size_flipped_colorSpace_,
        name,
        size,
        flipped,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithTexture:size:flipped:options:
  static CIImage imageWithTexture_size_flipped_options_(
      int name, CGSize size, bool flipped, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_221(
        _class_CIImage,
        _sel_imageWithTexture_size_flipped_options_,
        name,
        size,
        flipped,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithMTLTexture:options:
  static CIImage? imageWithMTLTexture_options_(
      objc.ObjCObjectBase texture, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_222(
        _class_CIImage,
        _sel_imageWithMTLTexture_options_,
        texture.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithContentsOfURL:
  static CIImage? imageWithContentsOfURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_223(
        _class_CIImage, _sel_imageWithContentsOfURL_, url.ref.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithContentsOfURL:options:
  static CIImage? imageWithContentsOfURL_options_(
      objc.NSURL url, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_224(
        _class_CIImage,
        _sel_imageWithContentsOfURL_options_,
        url.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithData:
  static CIImage? imageWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_225(
        _class_CIImage, _sel_imageWithData_, data.ref.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithData:options:
  static CIImage? imageWithData_options_(
      objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_226(_class_CIImage, _sel_imageWithData_options_,
        data.ref.pointer, options?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVImageBuffer:
  static CIImage imageWithCVImageBuffer_(ffi.Pointer<__CVBuffer> imageBuffer) {
    final _ret = _objc_msgSend_227(
        _class_CIImage, _sel_imageWithCVImageBuffer_, imageBuffer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVImageBuffer:options:
  static CIImage imageWithCVImageBuffer_options_(
      ffi.Pointer<__CVBuffer> imageBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_228(
        _class_CIImage,
        _sel_imageWithCVImageBuffer_options_,
        imageBuffer,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVPixelBuffer:
  static CIImage imageWithCVPixelBuffer_(ffi.Pointer<__CVBuffer> pixelBuffer) {
    final _ret = _objc_msgSend_227(
        _class_CIImage, _sel_imageWithCVPixelBuffer_, pixelBuffer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithCVPixelBuffer:options:
  static CIImage imageWithCVPixelBuffer_options_(
      ffi.Pointer<__CVBuffer> pixelBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_228(
        _class_CIImage,
        _sel_imageWithCVPixelBuffer_options_,
        pixelBuffer,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithIOSurface:
  static CIImage imageWithIOSurface_(ffi.Pointer<__IOSurface> surface) {
    final _ret =
        _objc_msgSend_229(_class_CIImage, _sel_imageWithIOSurface_, surface);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithIOSurface:options:
  static CIImage imageWithIOSurface_options_(
      ffi.Pointer<__IOSurface> surface, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_230(
        _class_CIImage,
        _sel_imageWithIOSurface_options_,
        surface,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageWithColor:
  static CIImage imageWithColor_(CIColor color) {
    final _ret = _objc_msgSend_240(
        _class_CIImage, _sel_imageWithColor_, color.ref.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// emptyImage
  static CIImage emptyImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_emptyImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// blackImage
  static CIImage getBlackImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_blackImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// whiteImage
  static CIImage getWhiteImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_whiteImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// grayImage
  static CIImage getGrayImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_grayImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// redImage
  static CIImage getRedImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_redImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// greenImage
  static CIImage getGreenImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_greenImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// blueImage
  static CIImage getBlueImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_blueImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// cyanImage
  static CIImage getCyanImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_cyanImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// magentaImage
  static CIImage getMagentaImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_magentaImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// yellowImage
  static CIImage getYellowImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_yellowImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// clearImage
  static CIImage getClearImage() {
    final _ret = _objc_msgSend_241(_class_CIImage, _sel_clearImage);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGImage:
  CIImage initWithCGImage_(ffi.Pointer<CGImage> image) {
    final _ret = _objc_msgSend_242(
        this.ref.retainAndReturnPointer(), _sel_initWithCGImage_, image);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCGImage:options:
  CIImage initWithCGImage_options_(
      ffi.Pointer<CGImage> image, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_243(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCGImage_options_,
        image,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCGImageSource:index:options:
  CIImage initWithCGImageSource_index_options_(
      ffi.Pointer<CGImageSource> source, int index, objc.NSDictionary? dict) {
    final _ret = _objc_msgSend_244(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCGImageSource_index_options_,
        source,
        index,
        dict?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCGLayer:
  CIImage initWithCGLayer_(ffi.Pointer<CGLayer> layer) {
    final _ret = _objc_msgSend_245(
        this.ref.retainAndReturnPointer(), _sel_initWithCGLayer_, layer);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCGLayer:options:
  CIImage initWithCGLayer_options_(
      ffi.Pointer<CGLayer> layer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_246(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCGLayer_options_,
        layer,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithData:
  CIImage? initWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_247(this.ref.retainAndReturnPointer(),
        _sel_initWithData_, data.ref.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithData:options:
  CIImage? initWithData_options_(objc.NSData data, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_248(
        this.ref.retainAndReturnPointer(),
        _sel_initWithData_options_,
        data.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithBitmapData:bytesPerRow:size:format:colorSpace:
  CIImage initWithBitmapData_bytesPerRow_size_format_colorSpace_(
      objc.NSData data,
      int bytesPerRow,
      CGSize size,
      int format,
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_249(
        this.ref.retainAndReturnPointer(),
        _sel_initWithBitmapData_bytesPerRow_size_format_colorSpace_,
        data.ref.pointer,
        bytesPerRow,
        size,
        format,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithTexture:size:flipped:colorSpace:
  CIImage initWithTexture_size_flipped_colorSpace_(int name, CGSize size,
      bool flipped, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_250(
        this.ref.retainAndReturnPointer(),
        _sel_initWithTexture_size_flipped_colorSpace_,
        name,
        size,
        flipped,
        colorSpace);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithTexture:size:flipped:options:
  CIImage initWithTexture_size_flipped_options_(
      int name, CGSize size, bool flipped, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_251(
        this.ref.retainAndReturnPointer(),
        _sel_initWithTexture_size_flipped_options_,
        name,
        size,
        flipped,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithMTLTexture:options:
  CIImage? initWithMTLTexture_options_(
      objc.ObjCObjectBase texture, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_252(
        this.ref.retainAndReturnPointer(),
        _sel_initWithMTLTexture_options_,
        texture.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithContentsOfURL:
  CIImage? initWithContentsOfURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_182(this.ref.retainAndReturnPointer(),
        _sel_initWithContentsOfURL_, url.ref.pointer);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithContentsOfURL:options:
  CIImage? initWithContentsOfURL_options_(
      objc.NSURL url, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_253(
        this.ref.retainAndReturnPointer(),
        _sel_initWithContentsOfURL_options_,
        url.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithIOSurface:
  CIImage initWithIOSurface_(ffi.Pointer<__IOSurface> surface) {
    final _ret = _objc_msgSend_254(
        this.ref.retainAndReturnPointer(), _sel_initWithIOSurface_, surface);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithIOSurface:options:
  CIImage initWithIOSurface_options_(
      ffi.Pointer<__IOSurface> surface, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_255(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIOSurface_options_,
        surface,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCVImageBuffer:
  CIImage initWithCVImageBuffer_(ffi.Pointer<__CVBuffer> imageBuffer) {
    final _ret = _objc_msgSend_256(this.ref.retainAndReturnPointer(),
        _sel_initWithCVImageBuffer_, imageBuffer);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCVImageBuffer:options:
  CIImage initWithCVImageBuffer_options_(
      ffi.Pointer<__CVBuffer> imageBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_257(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCVImageBuffer_options_,
        imageBuffer,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCVPixelBuffer:
  CIImage initWithCVPixelBuffer_(ffi.Pointer<__CVBuffer> pixelBuffer) {
    final _ret = _objc_msgSend_256(this.ref.retainAndReturnPointer(),
        _sel_initWithCVPixelBuffer_, pixelBuffer);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCVPixelBuffer:options:
  CIImage initWithCVPixelBuffer_options_(
      ffi.Pointer<__CVBuffer> pixelBuffer, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_257(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCVPixelBuffer_options_,
        pixelBuffer,
        options?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithColor:
  CIImage initWithColor_(CIColor color) {
    final _ret = _objc_msgSend_258(this.ref.retainAndReturnPointer(),
        _sel_initWithColor_, color.ref.pointer);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// imageByApplyingTransform:
  CIImage imageByApplyingTransform_(CGAffineTransform matrix) {
    final _ret = _objc_msgSend_259(
        this.ref.pointer, _sel_imageByApplyingTransform_, matrix);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingTransform:highQualityDownsample:
  CIImage imageByApplyingTransform_highQualityDownsample_(
      CGAffineTransform matrix, bool highQualityDownsample) {
    final _ret = _objc_msgSend_260(
        this.ref.pointer,
        _sel_imageByApplyingTransform_highQualityDownsample_,
        matrix,
        highQualityDownsample);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingOrientation:
  CIImage imageByApplyingOrientation_(int orientation) {
    final _ret = _objc_msgSend_261(
        this.ref.pointer, _sel_imageByApplyingOrientation_, orientation);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageTransformForOrientation:
  void imageTransformForOrientation_(
      ffi.Pointer<CGAffineTransform> stret, int orientation) {
    objc.useMsgSendVariants
        ? _objc_msgSend_262Stret(stret, this.ref.pointer,
            _sel_imageTransformForOrientation_, orientation)
        : stret.ref = _objc_msgSend_262(
            this.ref.pointer, _sel_imageTransformForOrientation_, orientation);
  }

  /// imageByApplyingCGOrientation:
  CIImage imageByApplyingCGOrientation_(
      CGImagePropertyOrientation orientation) {
    final _ret = _objc_msgSend_263(this.ref.pointer,
        _sel_imageByApplyingCGOrientation_, orientation.value);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageTransformForCGOrientation:
  void imageTransformForCGOrientation_(ffi.Pointer<CGAffineTransform> stret,
      CGImagePropertyOrientation orientation) {
    objc.useMsgSendVariants
        ? _objc_msgSend_264Stret(stret, this.ref.pointer,
            _sel_imageTransformForCGOrientation_, orientation.value)
        : stret.ref = _objc_msgSend_264(this.ref.pointer,
            _sel_imageTransformForCGOrientation_, orientation.value);
  }

  /// imageByCompositingOverImage:
  CIImage imageByCompositingOverImage_(CIImage dest) {
    final _ret = _objc_msgSend_265(
        this.ref.pointer, _sel_imageByCompositingOverImage_, dest.ref.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByCroppingToRect:
  CIImage imageByCroppingToRect_(CGRect rect) {
    final _ret =
        _objc_msgSend_266(this.ref.pointer, _sel_imageByCroppingToRect_, rect);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByClampingToExtent
  CIImage imageByClampingToExtent() {
    final _ret =
        _objc_msgSend_241(this.ref.pointer, _sel_imageByClampingToExtent);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByClampingToRect:
  CIImage imageByClampingToRect_(CGRect rect) {
    final _ret =
        _objc_msgSend_266(this.ref.pointer, _sel_imageByClampingToRect_, rect);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingFilter:withInputParameters:
  CIImage imageByApplyingFilter_withInputParameters_(
      objc.NSString filterName, objc.NSDictionary? params) {
    final _ret = _objc_msgSend_267(
        this.ref.pointer,
        _sel_imageByApplyingFilter_withInputParameters_,
        filterName.ref.pointer,
        params?.ref.pointer ?? ffi.nullptr);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingFilter:
  CIImage imageByApplyingFilter_(objc.NSString filterName) {
    final _ret = _objc_msgSend_268(
        this.ref.pointer, _sel_imageByApplyingFilter_, filterName.ref.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByColorMatchingColorSpaceToWorkingSpace:
  CIImage? imageByColorMatchingColorSpaceToWorkingSpace_(
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_269(this.ref.pointer,
        _sel_imageByColorMatchingColorSpaceToWorkingSpace_, colorSpace);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByColorMatchingWorkingSpaceToColorSpace:
  CIImage? imageByColorMatchingWorkingSpaceToColorSpace_(
      ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_269(this.ref.pointer,
        _sel_imageByColorMatchingWorkingSpaceToColorSpace_, colorSpace);
    return _ret.address == 0
        ? null
        : CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByPremultiplyingAlpha
  CIImage imageByPremultiplyingAlpha() {
    final _ret =
        _objc_msgSend_241(this.ref.pointer, _sel_imageByPremultiplyingAlpha);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByUnpremultiplyingAlpha
  CIImage imageByUnpremultiplyingAlpha() {
    final _ret =
        _objc_msgSend_241(this.ref.pointer, _sel_imageByUnpremultiplyingAlpha);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySettingAlphaOneInExtent:
  CIImage imageBySettingAlphaOneInExtent_(CGRect extent) {
    final _ret = _objc_msgSend_266(
        this.ref.pointer, _sel_imageBySettingAlphaOneInExtent_, extent);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByApplyingGaussianBlurWithSigma:
  CIImage imageByApplyingGaussianBlurWithSigma_(double sigma) {
    final _ret = _objc_msgSend_270(
        this.ref.pointer, _sel_imageByApplyingGaussianBlurWithSigma_, sigma);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySettingProperties:
  CIImage imageBySettingProperties_(objc.NSDictionary properties) {
    final _ret = _objc_msgSend_271(this.ref.pointer,
        _sel_imageBySettingProperties_, properties.ref.pointer);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySamplingLinear
  CIImage imageBySamplingLinear() {
    final _ret =
        _objc_msgSend_241(this.ref.pointer, _sel_imageBySamplingLinear);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageBySamplingNearest
  CIImage imageBySamplingNearest() {
    final _ret =
        _objc_msgSend_241(this.ref.pointer, _sel_imageBySamplingNearest);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByInsertingIntermediate
  CIImage imageByInsertingIntermediate() {
    final _ret =
        _objc_msgSend_241(this.ref.pointer, _sel_imageByInsertingIntermediate);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// imageByInsertingIntermediate:
  CIImage imageByInsertingIntermediate_(bool cache) {
    final _ret = _objc_msgSend_272(
        this.ref.pointer, _sel_imageByInsertingIntermediate_, cache);
    return CIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// extent
  void getExtent(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_extent)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_extent);
  }

  /// properties
  objc.NSDictionary get properties {
    final _ret = _objc_msgSend_273(this.ref.pointer, _sel_properties);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// definition
  CIFilterShape get definition {
    final _ret = _objc_msgSend_278(this.ref.pointer, _sel_definition);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// url
  objc.NSURL? get url {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_url);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorSpace
  ffi.Pointer<CGColorSpace> get colorSpace {
    return _objc_msgSend_238(this.ref.pointer, _sel_colorSpace);
  }

  /// pixelBuffer
  ffi.Pointer<__CVBuffer> get pixelBuffer {
    return _objc_msgSend_279(this.ref.pointer, _sel_pixelBuffer);
  }

  /// CGImage
  ffi.Pointer<CGImage> get CGImage1 {
    return _objc_msgSend_280(this.ref.pointer, _sel_CGImage);
  }

  /// regionOfInterestForImage:inRect:
  void regionOfInterestForImage_inRect_(
      ffi.Pointer<CGRect> stret, CIImage image, CGRect rect) {
    objc.useMsgSendVariants
        ? _objc_msgSend_281Stret(stret, this.ref.pointer,
            _sel_regionOfInterestForImage_inRect_, image.ref.pointer, rect)
        : stret.ref = _objc_msgSend_281(this.ref.pointer,
            _sel_regionOfInterestForImage_inRect_, image.ref.pointer, rect);
  }

  /// init
  CIImage init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static CIImage new1() {
    final _ret = _objc_msgSend_4(_class_CIImage, _sel_new);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIImage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_CIImage, _sel_allocWithZone_, zone);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIImage alloc() {
    final _ret = _objc_msgSend_4(_class_CIImage, _sel_alloc);
    return CIImage.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_CIImage = objc.getClass("CIImage");
final _objc_msgSend_214 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage> image)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage>)>();
late final _sel_imageWithCGImage_options_ =
    objc.registerName("imageWithCGImage:options:");
final _objc_msgSend_215 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImage> image,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImage>,
            ffi.Pointer<objc.ObjCObject>)>();

final class CGImageSource extends ffi.Opaque {}

late final _sel_imageWithCGImageSource_index_options_ =
    objc.registerName("imageWithCGImageSource:index:options:");
final _objc_msgSend_216 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImageSource> source,
                ffi.Size index,
                ffi.Pointer<objc.ObjCObject> dict)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImageSource>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

final class CGLayer extends ffi.Opaque {}

late final _sel_imageWithCGLayer_ = objc.registerName("imageWithCGLayer:");
final _objc_msgSend_217 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer> layer)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer>)>();
late final _sel_imageWithCGLayer_options_ =
    objc.registerName("imageWithCGLayer:options:");
final _objc_msgSend_218 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGLayer> layer,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGLayer>,
            ffi.Pointer<objc.ObjCObject>)>();

final class CGColorSpace extends ffi.Opaque {}

late final _sel_imageWithBitmapData_bytesPerRow_size_format_colorSpace_ = objc
    .registerName("imageWithBitmapData:bytesPerRow:size:format:colorSpace:");
final _objc_msgSend_219 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data,
                ffi.Size bytesPerRow,
                CGSize size,
                ffi.Int format,
                ffi.Pointer<CGColorSpace> colorSpace)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            CGSize,
            int,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_imageWithTexture_size_flipped_colorSpace_ =
    objc.registerName("imageWithTexture:size:flipped:colorSpace:");
final _objc_msgSend_220 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt name,
                CGSize size,
                ffi.Bool flipped,
                ffi.Pointer<CGColorSpace> colorSpace)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_imageWithTexture_size_flipped_options_ =
    objc.registerName("imageWithTexture:size:flipped:options:");
final _objc_msgSend_221 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt name,
                CGSize size,
                ffi.Bool flipped,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithMTLTexture_options_ =
    objc.registerName("imageWithMTLTexture:options:");
final _objc_msgSend_222 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> texture,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithContentsOfURL_ =
    objc.registerName("imageWithContentsOfURL:");
final _objc_msgSend_223 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithContentsOfURL_options_ =
    objc.registerName("imageWithContentsOfURL:options:");
final _objc_msgSend_224 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_225 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithData_options_ =
    objc.registerName("imageWithData:options:");
final _objc_msgSend_226 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

final class __CVBuffer extends ffi.Opaque {}

late final _sel_imageWithCVImageBuffer_ =
    objc.registerName("imageWithCVImageBuffer:");
final _objc_msgSend_227 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer> imageBuffer)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__CVBuffer>)>();
late final _sel_imageWithCVImageBuffer_options_ =
    objc.registerName("imageWithCVImageBuffer:options:");
final _objc_msgSend_228 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer> imageBuffer,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__CVBuffer>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithCVPixelBuffer_ =
    objc.registerName("imageWithCVPixelBuffer:");
late final _sel_imageWithCVPixelBuffer_options_ =
    objc.registerName("imageWithCVPixelBuffer:options:");

final class __IOSurface extends ffi.Opaque {}

late final _sel_imageWithIOSurface_ = objc.registerName("imageWithIOSurface:");
final _objc_msgSend_229 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__IOSurface> surface)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__IOSurface>)>();
late final _sel_imageWithIOSurface_options_ =
    objc.registerName("imageWithIOSurface:options:");
final _objc_msgSend_230 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__IOSurface> surface,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__IOSurface>,
            ffi.Pointer<objc.ObjCObject>)>();

/// CIColor
class CIColor extends objc.NSObject {
  CIColor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIColor] that points to the same underlying object as [other].
  CIColor.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CIColor] that wraps the given raw object pointer.
  CIColor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIColor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CIColor);
  }

  /// colorWithCGColor:
  static CIColor colorWithCGColor_(ffi.Pointer<CGColor> c) {
    final _ret = _objc_msgSend_231(_class_CIColor, _sel_colorWithCGColor_, c);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:alpha:
  static CIColor colorWithRed_green_blue_alpha_(
      double r, double g, double b, double a) {
    final _ret = _objc_msgSend_232(
        _class_CIColor, _sel_colorWithRed_green_blue_alpha_, r, g, b, a);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:
  static CIColor colorWithRed_green_blue_(double r, double g, double b) {
    final _ret = _objc_msgSend_233(
        _class_CIColor, _sel_colorWithRed_green_blue_, r, g, b);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:alpha:colorSpace:
  static CIColor? colorWithRed_green_blue_alpha_colorSpace_(double r, double g,
      double b, double a, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_234(_class_CIColor,
        _sel_colorWithRed_green_blue_alpha_colorSpace_, r, g, b, a, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:colorSpace:
  static CIColor? colorWithRed_green_blue_colorSpace_(
      double r, double g, double b, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_235(_class_CIColor,
        _sel_colorWithRed_green_blue_colorSpace_, r, g, b, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithString:
  static CIColor colorWithString_(objc.NSString representation) {
    final _ret = _objc_msgSend_103(
        _class_CIColor, _sel_colorWithString_, representation.ref.pointer);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCGColor:
  CIColor initWithCGColor_(ffi.Pointer<CGColor> c) {
    final _ret = _objc_msgSend_231(
        this.ref.retainAndReturnPointer(), _sel_initWithCGColor_, c);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithRed:green:blue:alpha:
  CIColor initWithRed_green_blue_alpha_(
      double r, double g, double b, double a) {
    final _ret = _objc_msgSend_232(this.ref.retainAndReturnPointer(),
        _sel_initWithRed_green_blue_alpha_, r, g, b, a);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithRed:green:blue:
  CIColor initWithRed_green_blue_(double r, double g, double b) {
    final _ret = _objc_msgSend_233(this.ref.retainAndReturnPointer(),
        _sel_initWithRed_green_blue_, r, g, b);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithRed:green:blue:alpha:colorSpace:
  CIColor? initWithRed_green_blue_alpha_colorSpace_(double r, double g,
      double b, double a, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_234(this.ref.retainAndReturnPointer(),
        _sel_initWithRed_green_blue_alpha_colorSpace_, r, g, b, a, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithRed:green:blue:colorSpace:
  CIColor? initWithRed_green_blue_colorSpace_(
      double r, double g, double b, ffi.Pointer<CGColorSpace> colorSpace) {
    final _ret = _objc_msgSend_235(this.ref.retainAndReturnPointer(),
        _sel_initWithRed_green_blue_colorSpace_, r, g, b, colorSpace);
    return _ret.address == 0
        ? null
        : CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// numberOfComponents
  int get numberOfComponents {
    return _objc_msgSend_236(this.ref.pointer, _sel_numberOfComponents);
  }

  /// components
  ffi.Pointer<ffi.Double> get components {
    return _objc_msgSend_237(this.ref.pointer, _sel_components);
  }

  /// alpha
  double get alpha {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_alpha)
        : _objc_msgSend_24(this.ref.pointer, _sel_alpha);
  }

  /// colorSpace
  ffi.Pointer<CGColorSpace> get colorSpace {
    return _objc_msgSend_238(this.ref.pointer, _sel_colorSpace);
  }

  /// red
  double get red {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_red)
        : _objc_msgSend_24(this.ref.pointer, _sel_red);
  }

  /// green
  double get green {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_green)
        : _objc_msgSend_24(this.ref.pointer, _sel_green);
  }

  /// blue
  double get blue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_blue)
        : _objc_msgSend_24(this.ref.pointer, _sel_blue);
  }

  /// stringRepresentation
  objc.NSString get stringRepresentation {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_stringRepresentation);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// blackColor
  static CIColor getBlackColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_blackColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// whiteColor
  static CIColor getWhiteColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_whiteColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// grayColor
  static CIColor getGrayColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_grayColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// redColor
  static CIColor getRedColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_redColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// greenColor
  static CIColor getGreenColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_greenColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// blueColor
  static CIColor getBlueColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_blueColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// cyanColor
  static CIColor getCyanColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_cyanColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// magentaColor
  static CIColor getMagentaColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_magentaColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// yellowColor
  static CIColor getYellowColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_yellowColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// clearColor
  static CIColor getClearColor() {
    final _ret = _objc_msgSend_239(_class_CIColor, _sel_clearColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  CIColor init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static CIColor new1() {
    final _ret = _objc_msgSend_4(_class_CIColor, _sel_new);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIColor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_CIColor, _sel_allocWithZone_, zone);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIColor alloc() {
    final _ret = _objc_msgSend_4(_class_CIColor, _sel_alloc);
    return CIColor.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_CIColor = objc.getClass("CIColor");
late final _sel_colorWithCGColor_ = objc.registerName("colorWithCGColor:");
final _objc_msgSend_231 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor> c)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>)>();
late final _sel_colorWithRed_green_blue_alpha_ =
    objc.registerName("colorWithRed:green:blue:alpha:");
final _objc_msgSend_232 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double r,
                ffi.Double g,
                ffi.Double b,
                ffi.Double a)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double, double)>();
late final _sel_colorWithRed_green_blue_ =
    objc.registerName("colorWithRed:green:blue:");
final _objc_msgSend_233 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double r,
                ffi.Double g,
                ffi.Double b)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double)>();
late final _sel_colorWithRed_green_blue_alpha_colorSpace_ =
    objc.registerName("colorWithRed:green:blue:alpha:colorSpace:");
final _objc_msgSend_234 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double r,
                ffi.Double g,
                ffi.Double b,
                ffi.Double a,
                ffi.Pointer<CGColorSpace> colorSpace)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            double,
            double,
            double,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_colorWithRed_green_blue_colorSpace_ =
    objc.registerName("colorWithRed:green:blue:colorSpace:");
final _objc_msgSend_235 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double r,
                ffi.Double g,
                ffi.Double b,
                ffi.Pointer<CGColorSpace> colorSpace)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            double,
            double,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_colorWithString_ = objc.registerName("colorWithString:");
late final _sel_initWithCGColor_ = objc.registerName("initWithCGColor:");
late final _sel_initWithRed_green_blue_alpha_ =
    objc.registerName("initWithRed:green:blue:alpha:");
late final _sel_initWithRed_green_blue_ =
    objc.registerName("initWithRed:green:blue:");
late final _sel_initWithRed_green_blue_alpha_colorSpace_ =
    objc.registerName("initWithRed:green:blue:alpha:colorSpace:");
late final _sel_initWithRed_green_blue_colorSpace_ =
    objc.registerName("initWithRed:green:blue:colorSpace:");
late final _sel_numberOfComponents = objc.registerName("numberOfComponents");
final _objc_msgSend_236 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Size Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_components = objc.registerName("components");
final _objc_msgSend_237 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Double> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Double> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_alpha = objc.registerName("alpha");
late final _sel_colorSpace = objc.registerName("colorSpace");
final _objc_msgSend_238 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGColorSpace> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGColorSpace> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_red = objc.registerName("red");
late final _sel_green = objc.registerName("green");
late final _sel_blue = objc.registerName("blue");
late final _sel_stringRepresentation =
    objc.registerName("stringRepresentation");
late final _sel_blackColor = objc.registerName("blackColor");
final _objc_msgSend_239 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_whiteColor = objc.registerName("whiteColor");
late final _sel_grayColor = objc.registerName("grayColor");
late final _sel_redColor = objc.registerName("redColor");
late final _sel_greenColor = objc.registerName("greenColor");
late final _sel_blueColor = objc.registerName("blueColor");
late final _sel_cyanColor = objc.registerName("cyanColor");
late final _sel_magentaColor = objc.registerName("magentaColor");
late final _sel_yellowColor = objc.registerName("yellowColor");
late final _sel_clearColor = objc.registerName("clearColor");
late final _sel_imageWithColor_ = objc.registerName("imageWithColor:");
final _objc_msgSend_240 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> color)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_emptyImage = objc.registerName("emptyImage");
final _objc_msgSend_241 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_blackImage = objc.registerName("blackImage");
late final _sel_whiteImage = objc.registerName("whiteImage");
late final _sel_grayImage = objc.registerName("grayImage");
late final _sel_redImage = objc.registerName("redImage");
late final _sel_greenImage = objc.registerName("greenImage");
late final _sel_blueImage = objc.registerName("blueImage");
late final _sel_cyanImage = objc.registerName("cyanImage");
late final _sel_magentaImage = objc.registerName("magentaImage");
late final _sel_yellowImage = objc.registerName("yellowImage");
late final _sel_clearImage = objc.registerName("clearImage");
late final _sel_initWithCGImage_ = objc.registerName("initWithCGImage:");
final _objc_msgSend_242 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage> image)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGImage>)>();
late final _sel_initWithCGImage_options_ =
    objc.registerName("initWithCGImage:options:");
final _objc_msgSend_243 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImage> image,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImage>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCGImageSource_index_options_ =
    objc.registerName("initWithCGImageSource:index:options:");
final _objc_msgSend_244 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImageSource> source,
                ffi.Size index,
                ffi.Pointer<objc.ObjCObject> dict)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImageSource>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCGLayer_ = objc.registerName("initWithCGLayer:");
final _objc_msgSend_245 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer> layer)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGLayer>)>();
late final _sel_initWithCGLayer_options_ =
    objc.registerName("initWithCGLayer:options:");
final _objc_msgSend_246 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGLayer> layer,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGLayer>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithData_ = objc.registerName("initWithData:");
final _objc_msgSend_247 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithData_options_ =
    objc.registerName("initWithData:options:");
final _objc_msgSend_248 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithBitmapData_bytesPerRow_size_format_colorSpace_ =
    objc.registerName("initWithBitmapData:bytesPerRow:size:format:colorSpace:");
final _objc_msgSend_249 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data,
                ffi.Size bytesPerRow,
                CGSize size,
                ffi.Int format,
                ffi.Pointer<CGColorSpace> colorSpace)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            CGSize,
            int,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_initWithTexture_size_flipped_colorSpace_ =
    objc.registerName("initWithTexture:size:flipped:colorSpace:");
final _objc_msgSend_250 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt name,
                CGSize size,
                ffi.Bool flipped,
                ffi.Pointer<CGColorSpace> colorSpace)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<CGColorSpace>)>();
late final _sel_initWithTexture_size_flipped_options_ =
    objc.registerName("initWithTexture:size:flipped:options:");
final _objc_msgSend_251 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt name,
                CGSize size,
                ffi.Bool flipped,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            CGSize,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMTLTexture_options_ =
    objc.registerName("initWithMTLTexture:options:");
final _objc_msgSend_252 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> texture,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithContentsOfURL_ =
    objc.registerName("initWithContentsOfURL:");
late final _sel_initWithContentsOfURL_options_ =
    objc.registerName("initWithContentsOfURL:options:");
final _objc_msgSend_253 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithIOSurface_ = objc.registerName("initWithIOSurface:");
final _objc_msgSend_254 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__IOSurface> surface)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__IOSurface>)>();
late final _sel_initWithIOSurface_options_ =
    objc.registerName("initWithIOSurface:options:");
final _objc_msgSend_255 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__IOSurface> surface,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__IOSurface>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCVImageBuffer_ =
    objc.registerName("initWithCVImageBuffer:");
final _objc_msgSend_256 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer> imageBuffer)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__CVBuffer>)>();
late final _sel_initWithCVImageBuffer_options_ =
    objc.registerName("initWithCVImageBuffer:options:");
final _objc_msgSend_257 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__CVBuffer> imageBuffer,
                ffi.Pointer<objc.ObjCObject> options)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__CVBuffer>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCVPixelBuffer_ =
    objc.registerName("initWithCVPixelBuffer:");
late final _sel_initWithCVPixelBuffer_options_ =
    objc.registerName("initWithCVPixelBuffer:options:");
late final _sel_initWithColor_ = objc.registerName("initWithColor:");
final _objc_msgSend_258 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> color)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByApplyingTransform_ =
    objc.registerName("imageByApplyingTransform:");
final _objc_msgSend_259 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform matrix)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>();
late final _sel_imageByApplyingTransform_highQualityDownsample_ =
    objc.registerName("imageByApplyingTransform:highQualityDownsample:");
final _objc_msgSend_260 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGAffineTransform matrix,
                ffi.Bool highQualityDownsample)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform, bool)>();
late final _sel_imageByApplyingOrientation_ =
    objc.registerName("imageByApplyingOrientation:");
final _objc_msgSend_261 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int orientation)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_imageTransformForOrientation_ =
    objc.registerName("imageTransformForOrientation:");
final _objc_msgSend_262 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int orientation)>>()
    .asFunction<
        CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_262Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGAffineTransform>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int orientation)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGAffineTransform>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int)>();

enum CGImagePropertyOrientation {
  kCGImagePropertyOrientationUp(1),
  kCGImagePropertyOrientationUpMirrored(2),
  kCGImagePropertyOrientationDown(3),
  kCGImagePropertyOrientationDownMirrored(4),
  kCGImagePropertyOrientationLeftMirrored(5),
  kCGImagePropertyOrientationRight(6),
  kCGImagePropertyOrientationRightMirrored(7),
  kCGImagePropertyOrientationLeft(8);

  final int value;
  const CGImagePropertyOrientation(this.value);

  static CGImagePropertyOrientation fromValue(int value) => switch (value) {
        1 => kCGImagePropertyOrientationUp,
        2 => kCGImagePropertyOrientationUpMirrored,
        3 => kCGImagePropertyOrientationDown,
        4 => kCGImagePropertyOrientationDownMirrored,
        5 => kCGImagePropertyOrientationLeftMirrored,
        6 => kCGImagePropertyOrientationRight,
        7 => kCGImagePropertyOrientationRightMirrored,
        8 => kCGImagePropertyOrientationLeft,
        _ => throw ArgumentError(
            "Unknown value for CGImagePropertyOrientation: $value"),
      };
}

late final _sel_imageByApplyingCGOrientation_ =
    objc.registerName("imageByApplyingCGOrientation:");
final _objc_msgSend_263 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32 orientation)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_imageTransformForCGOrientation_ =
    objc.registerName("imageTransformForCGOrientation:");
final _objc_msgSend_264 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32 orientation)>>()
    .asFunction<
        CGAffineTransform Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_264Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGAffineTransform>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint32 orientation)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGAffineTransform>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int)>();
late final _sel_imageByCompositingOverImage_ =
    objc.registerName("imageByCompositingOverImage:");
final _objc_msgSend_265 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> dest)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByCroppingToRect_ =
    objc.registerName("imageByCroppingToRect:");
final _objc_msgSend_266 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect rect)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_imageByClampingToExtent =
    objc.registerName("imageByClampingToExtent");
late final _sel_imageByClampingToRect_ =
    objc.registerName("imageByClampingToRect:");
late final _sel_imageByApplyingFilter_withInputParameters_ =
    objc.registerName("imageByApplyingFilter:withInputParameters:");
final _objc_msgSend_267 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> filterName,
                ffi.Pointer<objc.ObjCObject> params)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByApplyingFilter_ =
    objc.registerName("imageByApplyingFilter:");
final _objc_msgSend_268 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> filterName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageByColorMatchingColorSpaceToWorkingSpace_ =
    objc.registerName("imageByColorMatchingColorSpaceToWorkingSpace:");
final _objc_msgSend_269 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGColorSpace> colorSpace)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColorSpace>)>();
late final _sel_imageByColorMatchingWorkingSpaceToColorSpace_ =
    objc.registerName("imageByColorMatchingWorkingSpaceToColorSpace:");
late final _sel_imageByPremultiplyingAlpha =
    objc.registerName("imageByPremultiplyingAlpha");
late final _sel_imageByUnpremultiplyingAlpha =
    objc.registerName("imageByUnpremultiplyingAlpha");
late final _sel_imageBySettingAlphaOneInExtent_ =
    objc.registerName("imageBySettingAlphaOneInExtent:");
late final _sel_imageByApplyingGaussianBlurWithSigma_ =
    objc.registerName("imageByApplyingGaussianBlurWithSigma:");
final _objc_msgSend_270 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double sigma)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_imageBySettingProperties_ =
    objc.registerName("imageBySettingProperties:");
final _objc_msgSend_271 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> properties)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageBySamplingLinear =
    objc.registerName("imageBySamplingLinear");
late final _sel_imageBySamplingNearest =
    objc.registerName("imageBySamplingNearest");
late final _sel_imageByInsertingIntermediate =
    objc.registerName("imageByInsertingIntermediate");
late final _sel_imageByInsertingIntermediate_ =
    objc.registerName("imageByInsertingIntermediate:");
final _objc_msgSend_272 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool cache)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_extent = objc.registerName("extent");
late final _sel_properties = objc.registerName("properties");
final _objc_msgSend_273 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// CIFilterShape
class CIFilterShape extends objc.NSObject {
  CIFilterShape._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [CIFilterShape] that points to the same underlying object as [other].
  CIFilterShape.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CIFilterShape] that wraps the given raw object pointer.
  CIFilterShape.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CIFilterShape].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CIFilterShape);
  }

  /// shapeWithRect:
  static CIFilterShape shapeWithRect_(CGRect r) {
    final _ret = _objc_msgSend_65(_class_CIFilterShape, _sel_shapeWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithRect:
  CIFilterShape initWithRect_(CGRect r) {
    final _ret = _objc_msgSend_65(
        this.ref.retainAndReturnPointer(), _sel_initWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// transformBy:interior:
  CIFilterShape transformBy_interior_(CGAffineTransform m, bool flag) {
    final _ret = _objc_msgSend_274(
        this.ref.pointer, _sel_transformBy_interior_, m, flag);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// insetByX:Y:
  CIFilterShape insetByX_Y_(int dx, int dy) {
    final _ret = _objc_msgSend_275(this.ref.pointer, _sel_insetByX_Y_, dx, dy);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// unionWith:
  CIFilterShape unionWith_(CIFilterShape s2) {
    final _ret =
        _objc_msgSend_276(this.ref.pointer, _sel_unionWith_, s2.ref.pointer);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// unionWithRect:
  CIFilterShape unionWithRect_(CGRect r) {
    final _ret = _objc_msgSend_277(this.ref.pointer, _sel_unionWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// intersectWith:
  CIFilterShape intersectWith_(CIFilterShape s2) {
    final _ret = _objc_msgSend_276(
        this.ref.pointer, _sel_intersectWith_, s2.ref.pointer);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// intersectWithRect:
  CIFilterShape intersectWithRect_(CGRect r) {
    final _ret =
        _objc_msgSend_277(this.ref.pointer, _sel_intersectWithRect_, r);
    return CIFilterShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// extent
  void getExtent(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_extent)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_extent);
  }

  /// init
  CIFilterShape init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static CIFilterShape new1() {
    final _ret = _objc_msgSend_4(_class_CIFilterShape, _sel_new);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static CIFilterShape allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_CIFilterShape, _sel_allocWithZone_, zone);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static CIFilterShape alloc() {
    final _ret = _objc_msgSend_4(_class_CIFilterShape, _sel_alloc);
    return CIFilterShape.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_CIFilterShape = objc.getClass("CIFilterShape");
late final _sel_shapeWithRect_ = objc.registerName("shapeWithRect:");
late final _sel_initWithRect_ = objc.registerName("initWithRect:");
late final _sel_transformBy_interior_ =
    objc.registerName("transformBy:interior:");
final _objc_msgSend_274 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGAffineTransform m,
                ffi.Bool flag)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform, bool)>();
late final _sel_insetByX_Y_ = objc.registerName("insetByX:Y:");
final _objc_msgSend_275 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int dx, ffi.Int dy)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_unionWith_ = objc.registerName("unionWith:");
final _objc_msgSend_276 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> s2)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_unionWithRect_ = objc.registerName("unionWithRect:");
final _objc_msgSend_277 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect r)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_intersectWith_ = objc.registerName("intersectWith:");
late final _sel_intersectWithRect_ = objc.registerName("intersectWithRect:");
late final _sel_definition = objc.registerName("definition");
final _objc_msgSend_278 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_url = objc.registerName("url");
late final _sel_pixelBuffer = objc.registerName("pixelBuffer");
final _objc_msgSend_279 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__CVBuffer> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__CVBuffer> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_CGImage = objc.registerName("CGImage");
final _objc_msgSend_280 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<CGImage> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<CGImage> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_regionOfInterestForImage_inRect_ =
    objc.registerName("regionOfInterestForImage:inRect:");
final _objc_msgSend_281 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> image,
                CGRect rect)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect)>();
final _objc_msgSend_281Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGRect>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> image,
                CGRect rect)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGRect>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGRect)>();
late final _sel_imageWithCIImage_ = objc.registerName("imageWithCIImage:");
final _objc_msgSend_282 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ciImage)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithCIImage_scale_orientation_ =
    objc.registerName("imageWithCIImage:scale:orientation:");
final _objc_msgSend_283 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ciImage,
                ffi.Double scale,
                ffi.UnsignedLong orientation)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            int)>();
late final _sel_initWithContentsOfFile_ =
    objc.registerName("initWithContentsOfFile:");
late final _sel_initWithData_scale_ = objc.registerName("initWithData:scale:");
final _objc_msgSend_284 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data,
                ffi.Double scale)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_initWithCGImage_scale_orientation_ =
    objc.registerName("initWithCGImage:scale:orientation:");
final _objc_msgSend_285 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGImage> cgImage,
                ffi.Double scale,
                ffi.UnsignedLong orientation)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CGImage>,
            double,
            int)>();
late final _sel_initWithCIImage_ = objc.registerName("initWithCIImage:");
final _objc_msgSend_286 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ciImage)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCIImage_scale_orientation_ =
    objc.registerName("initWithCIImage:scale:orientation:");
final _objc_msgSend_287 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ciImage,
                ffi.Double scale,
                ffi.UnsignedLong orientation)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            int)>();
late final _sel_CIImage = objc.registerName("CIImage");
final _objc_msgSend_288 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_imageOrientation = objc.registerName("imageOrientation");
final _objc_msgSend_289 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isSymbolImage = objc.registerName("isSymbolImage");
late final _sel_animatedImageNamed_duration_ =
    objc.registerName("animatedImageNamed:duration:");
final _objc_msgSend_290 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Double duration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_animatedResizableImageNamed_capInsets_duration_ =
    objc.registerName("animatedResizableImageNamed:capInsets:duration:");
final _objc_msgSend_291 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                UIEdgeInsets capInsets,
                ffi.Double duration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            UIEdgeInsets,
            double)>();

enum UIImageResizingMode {
  UIImageResizingModeTile(0),
  UIImageResizingModeStretch(1);

  final int value;
  const UIImageResizingMode(this.value);

  static UIImageResizingMode fromValue(int value) => switch (value) {
        0 => UIImageResizingModeTile,
        1 => UIImageResizingModeStretch,
        _ =>
          throw ArgumentError("Unknown value for UIImageResizingMode: $value"),
      };
}

late final _sel_animatedResizableImageNamed_capInsets_resizingMode_duration_ =
    objc.registerName(
        "animatedResizableImageNamed:capInsets:resizingMode:duration:");
final _objc_msgSend_292 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                UIEdgeInsets capInsets,
                ffi.UnsignedLong resizingMode,
                ffi.Double duration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            UIEdgeInsets,
            int,
            double)>();
late final _sel_animatedImageWithImages_duration_ =
    objc.registerName("animatedImageWithImages:duration:");
final _objc_msgSend_293 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> images,
                ffi.Double duration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_images = objc.registerName("images");
late final _sel_drawAtPoint_ = objc.registerName("drawAtPoint:");
final _objc_msgSend_294 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint point)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();

enum CGBlendMode {
  kCGBlendModeNormal(0),
  kCGBlendModeMultiply(1),
  kCGBlendModeScreen(2),
  kCGBlendModeOverlay(3),
  kCGBlendModeDarken(4),
  kCGBlendModeLighten(5),
  kCGBlendModeColorDodge(6),
  kCGBlendModeColorBurn(7),
  kCGBlendModeSoftLight(8),
  kCGBlendModeHardLight(9),
  kCGBlendModeDifference(10),
  kCGBlendModeExclusion(11),
  kCGBlendModeHue(12),
  kCGBlendModeSaturation(13),
  kCGBlendModeColor(14),
  kCGBlendModeLuminosity(15),
  kCGBlendModeClear(16),
  kCGBlendModeCopy(17),
  kCGBlendModeSourceIn(18),
  kCGBlendModeSourceOut(19),
  kCGBlendModeSourceAtop(20),
  kCGBlendModeDestinationOver(21),
  kCGBlendModeDestinationIn(22),
  kCGBlendModeDestinationOut(23),
  kCGBlendModeDestinationAtop(24),
  kCGBlendModeXOR(25),
  kCGBlendModePlusDarker(26),
  kCGBlendModePlusLighter(27);

  final int value;
  const CGBlendMode(this.value);

  static CGBlendMode fromValue(int value) => switch (value) {
        0 => kCGBlendModeNormal,
        1 => kCGBlendModeMultiply,
        2 => kCGBlendModeScreen,
        3 => kCGBlendModeOverlay,
        4 => kCGBlendModeDarken,
        5 => kCGBlendModeLighten,
        6 => kCGBlendModeColorDodge,
        7 => kCGBlendModeColorBurn,
        8 => kCGBlendModeSoftLight,
        9 => kCGBlendModeHardLight,
        10 => kCGBlendModeDifference,
        11 => kCGBlendModeExclusion,
        12 => kCGBlendModeHue,
        13 => kCGBlendModeSaturation,
        14 => kCGBlendModeColor,
        15 => kCGBlendModeLuminosity,
        16 => kCGBlendModeClear,
        17 => kCGBlendModeCopy,
        18 => kCGBlendModeSourceIn,
        19 => kCGBlendModeSourceOut,
        20 => kCGBlendModeSourceAtop,
        21 => kCGBlendModeDestinationOver,
        22 => kCGBlendModeDestinationIn,
        23 => kCGBlendModeDestinationOut,
        24 => kCGBlendModeDestinationAtop,
        25 => kCGBlendModeXOR,
        26 => kCGBlendModePlusDarker,
        27 => kCGBlendModePlusLighter,
        _ => throw ArgumentError("Unknown value for CGBlendMode: $value"),
      };
}

late final _sel_drawAtPoint_blendMode_alpha_ =
    objc.registerName("drawAtPoint:blendMode:alpha:");
final _objc_msgSend_295 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint point,
                ffi.Int32 blendMode,
                ffi.Double alpha)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint, int, double)>();
late final _sel_drawInRect_ = objc.registerName("drawInRect:");
late final _sel_drawInRect_blendMode_alpha_ =
    objc.registerName("drawInRect:blendMode:alpha:");
final _objc_msgSend_296 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect rect,
                ffi.Int32 blendMode,
                ffi.Double alpha)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect, int, double)>();
late final _sel_drawAsPatternInRect_ =
    objc.registerName("drawAsPatternInRect:");
late final _sel_resizableImageWithCapInsets_ =
    objc.registerName("resizableImageWithCapInsets:");
final _objc_msgSend_297 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, UIEdgeInsets capInsets)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, UIEdgeInsets)>();
late final _sel_resizableImageWithCapInsets_resizingMode_ =
    objc.registerName("resizableImageWithCapInsets:resizingMode:");
final _objc_msgSend_298 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                UIEdgeInsets capInsets,
                ffi.UnsignedLong resizingMode)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, UIEdgeInsets, int)>();
late final _sel_capInsets = objc.registerName("capInsets");
late final _sel_resizingMode = objc.registerName("resizingMode");
final _objc_msgSend_299 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_imageWithAlignmentRectInsets_ =
    objc.registerName("imageWithAlignmentRectInsets:");
late final _sel_alignmentRectInsets = objc.registerName("alignmentRectInsets");

enum UIImageRenderingMode {
  UIImageRenderingModeAutomatic(0),
  UIImageRenderingModeAlwaysOriginal(1),
  UIImageRenderingModeAlwaysTemplate(2);

  final int value;
  const UIImageRenderingMode(this.value);

  static UIImageRenderingMode fromValue(int value) => switch (value) {
        0 => UIImageRenderingModeAutomatic,
        1 => UIImageRenderingModeAlwaysOriginal,
        2 => UIImageRenderingModeAlwaysTemplate,
        _ =>
          throw ArgumentError("Unknown value for UIImageRenderingMode: $value"),
      };
}

late final _sel_imageWithRenderingMode_ =
    objc.registerName("imageWithRenderingMode:");
final _objc_msgSend_300 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong renderingMode)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_renderingMode = objc.registerName("renderingMode");
final _objc_msgSend_301 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIGraphicsImageRendererFormat
class UIGraphicsImageRendererFormat extends UIGraphicsRendererFormat {
  UIGraphicsImageRendererFormat._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIGraphicsImageRendererFormat] that points to the same underlying object as [other].
  UIGraphicsImageRendererFormat.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIGraphicsImageRendererFormat] that wraps the given raw object pointer.
  UIGraphicsImageRendererFormat.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIGraphicsImageRendererFormat].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UIGraphicsImageRendererFormat);
  }

  /// scale
  double get scale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_scale)
        : _objc_msgSend_24(this.ref.pointer, _sel_scale);
  }

  /// setScale:
  set scale(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setScale_, value);
  }

  /// opaque
  bool get opaque {
    return _objc_msgSend_11(this.ref.pointer, _sel_opaque);
  }

  /// setOpaque:
  set opaque(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setOpaque_, value);
  }

  /// prefersExtendedRange
  bool get prefersExtendedRange {
    return _objc_msgSend_11(this.ref.pointer, _sel_prefersExtendedRange);
  }

  /// setPrefersExtendedRange:
  set prefersExtendedRange(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setPrefersExtendedRange_, value);
  }

  /// supportsHighDynamicRange
  bool get supportsHighDynamicRange {
    return _objc_msgSend_11(this.ref.pointer, _sel_supportsHighDynamicRange);
  }

  /// preferredRange
  UIGraphicsImageRendererFormatRange get preferredRange {
    final _ret = _objc_msgSend_302(this.ref.pointer, _sel_preferredRange);
    return UIGraphicsImageRendererFormatRange.fromValue(_ret);
  }

  /// setPreferredRange:
  set preferredRange(UIGraphicsImageRendererFormatRange value) {
    return _objc_msgSend_303(
        this.ref.pointer, _sel_setPreferredRange_, value.value);
  }

  /// formatForTraitCollection:
  static UIGraphicsImageRendererFormat formatForTraitCollection_(
      UITraitCollection traitCollection) {
    final _ret = _objc_msgSend_304(_class_UIGraphicsImageRendererFormat,
        _sel_formatForTraitCollection_, traitCollection.ref.pointer);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// defaultFormat
  static UIGraphicsImageRendererFormat defaultFormat() {
    final _ret = _objc_msgSend_4(
        _class_UIGraphicsImageRendererFormat, _sel_defaultFormat);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// preferredFormat
  static UIGraphicsImageRendererFormat preferredFormat() {
    final _ret = _objc_msgSend_4(
        _class_UIGraphicsImageRendererFormat, _sel_preferredFormat);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  UIGraphicsImageRendererFormat init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIGraphicsImageRendererFormat new1() {
    final _ret =
        _objc_msgSend_4(_class_UIGraphicsImageRendererFormat, _sel_new);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIGraphicsImageRendererFormat allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIGraphicsImageRendererFormat, _sel_allocWithZone_, zone);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIGraphicsImageRendererFormat alloc() {
    final _ret =
        _objc_msgSend_4(_class_UIGraphicsImageRendererFormat, _sel_alloc);
    return UIGraphicsImageRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIGraphicsImageRendererFormat =
    objc.getClass("UIGraphicsImageRendererFormat");
late final _sel_setScale_ = objc.registerName("setScale:");
late final _sel_opaque = objc.registerName("opaque");
late final _sel_prefersExtendedRange =
    objc.registerName("prefersExtendedRange");
late final _sel_setPrefersExtendedRange_ =
    objc.registerName("setPrefersExtendedRange:");
late final _sel_supportsHighDynamicRange =
    objc.registerName("supportsHighDynamicRange");

enum UIGraphicsImageRendererFormatRange {
  UIGraphicsImageRendererFormatRangeUnspecified(-1),
  UIGraphicsImageRendererFormatRangeAutomatic(0),
  UIGraphicsImageRendererFormatRangeExtended(1),
  UIGraphicsImageRendererFormatRangeStandard(2);

  final int value;
  const UIGraphicsImageRendererFormatRange(this.value);

  static UIGraphicsImageRendererFormatRange fromValue(int value) =>
      switch (value) {
        -1 => UIGraphicsImageRendererFormatRangeUnspecified,
        0 => UIGraphicsImageRendererFormatRangeAutomatic,
        1 => UIGraphicsImageRendererFormatRangeExtended,
        2 => UIGraphicsImageRendererFormatRangeStandard,
        _ => throw ArgumentError(
            "Unknown value for UIGraphicsImageRendererFormatRange: $value"),
      };
}

late final _sel_preferredRange = objc.registerName("preferredRange");
final _objc_msgSend_302 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreferredRange_ = objc.registerName("setPreferredRange:");
final _objc_msgSend_303 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_formatForTraitCollection_ =
    objc.registerName("formatForTraitCollection:");
final _objc_msgSend_304 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// UIGraphicsRendererFormat
class UIGraphicsRendererFormat extends objc.NSObject {
  UIGraphicsRendererFormat._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIGraphicsRendererFormat] that points to the same underlying object as [other].
  UIGraphicsRendererFormat.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIGraphicsRendererFormat] that wraps the given raw object pointer.
  UIGraphicsRendererFormat.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIGraphicsRendererFormat].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIGraphicsRendererFormat);
  }

  /// defaultFormat
  static UIGraphicsRendererFormat defaultFormat() {
    final _ret =
        _objc_msgSend_4(_class_UIGraphicsRendererFormat, _sel_defaultFormat);
    return UIGraphicsRendererFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// preferredFormat
  static UIGraphicsRendererFormat preferredFormat() {
    final _ret =
        _objc_msgSend_4(_class_UIGraphicsRendererFormat, _sel_preferredFormat);
    return UIGraphicsRendererFormat.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// bounds
  void getBounds(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_bounds)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_bounds);
  }

  /// init
  UIGraphicsRendererFormat init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIGraphicsRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIGraphicsRendererFormat new1() {
    final _ret = _objc_msgSend_4(_class_UIGraphicsRendererFormat, _sel_new);
    return UIGraphicsRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIGraphicsRendererFormat allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIGraphicsRendererFormat, _sel_allocWithZone_, zone);
    return UIGraphicsRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIGraphicsRendererFormat alloc() {
    final _ret = _objc_msgSend_4(_class_UIGraphicsRendererFormat, _sel_alloc);
    return UIGraphicsRendererFormat.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIGraphicsRendererFormat =
    objc.getClass("UIGraphicsRendererFormat");
late final _sel_defaultFormat = objc.registerName("defaultFormat");
late final _sel_preferredFormat = objc.registerName("preferredFormat");
late final _sel_imageRendererFormat = objc.registerName("imageRendererFormat");
final _objc_msgSend_305 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_306 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIImageAsset
class UIImageAsset extends objc.NSObject {
  UIImageAsset._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIImageAsset] that points to the same underlying object as [other].
  UIImageAsset.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIImageAsset] that wraps the given raw object pointer.
  UIImageAsset.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIImageAsset].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIImageAsset);
  }

  /// init
  UIImageAsset init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIImageAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIImageAsset? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIImageAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// imageWithConfiguration:
  UIImage imageWithConfiguration_(UIImageConfiguration configuration) {
    final _ret = _objc_msgSend_307(this.ref.pointer,
        _sel_imageWithConfiguration_, configuration.ref.pointer);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// registerImage:withConfiguration:
  void registerImage_withConfiguration_(
      UIImage image, UIImageConfiguration configuration) {
    _objc_msgSend_308(this.ref.pointer, _sel_registerImage_withConfiguration_,
        image.ref.pointer, configuration.ref.pointer);
  }

  /// unregisterImageWithConfiguration:
  void unregisterImageWithConfiguration_(UIImageConfiguration configuration) {
    _objc_msgSend_309(this.ref.pointer, _sel_unregisterImageWithConfiguration_,
        configuration.ref.pointer);
  }

  /// imageWithTraitCollection:
  UIImage imageWithTraitCollection_(UITraitCollection traitCollection) {
    final _ret = _objc_msgSend_310(this.ref.pointer,
        _sel_imageWithTraitCollection_, traitCollection.ref.pointer);
    return UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// registerImage:withTraitCollection:
  void registerImage_withTraitCollection_(
      UIImage image, UITraitCollection traitCollection) {
    _objc_msgSend_311(this.ref.pointer, _sel_registerImage_withTraitCollection_,
        image.ref.pointer, traitCollection.ref.pointer);
  }

  /// unregisterImageWithTraitCollection:
  void unregisterImageWithTraitCollection_(UITraitCollection traitCollection) {
    _objc_msgSend_312(this.ref.pointer,
        _sel_unregisterImageWithTraitCollection_, traitCollection.ref.pointer);
  }

  /// new
  static UIImageAsset new1() {
    final _ret = _objc_msgSend_4(_class_UIImageAsset, _sel_new);
    return UIImageAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIImageAsset allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIImageAsset, _sel_allocWithZone_, zone);
    return UIImageAsset.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIImageAsset alloc() {
    final _ret = _objc_msgSend_4(_class_UIImageAsset, _sel_alloc);
    return UIImageAsset.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIImageAsset = objc.getClass("UIImageAsset");
late final _sel_imageWithConfiguration_ =
    objc.registerName("imageWithConfiguration:");
final _objc_msgSend_307 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerImage_withConfiguration_ =
    objc.registerName("registerImage:withConfiguration:");
final _objc_msgSend_308 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> image,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_unregisterImageWithConfiguration_ =
    objc.registerName("unregisterImageWithConfiguration:");
final _objc_msgSend_309 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithTraitCollection_ =
    objc.registerName("imageWithTraitCollection:");
final _objc_msgSend_310 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerImage_withTraitCollection_ =
    objc.registerName("registerImage:withTraitCollection:");
final _objc_msgSend_311 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> image,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_unregisterImageWithTraitCollection_ =
    objc.registerName("unregisterImageWithTraitCollection:");
final _objc_msgSend_312 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageAsset = objc.registerName("imageAsset");
final _objc_msgSend_313 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_imageFlippedForRightToLeftLayoutDirection =
    objc.registerName("imageFlippedForRightToLeftLayoutDirection");
final _objc_msgSend_314 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_flipsForRightToLeftLayoutDirection =
    objc.registerName("flipsForRightToLeftLayoutDirection");
late final _sel_imageWithHorizontallyFlippedOrientation =
    objc.registerName("imageWithHorizontallyFlippedOrientation");
late final _sel_baselineOffsetFromBottom =
    objc.registerName("baselineOffsetFromBottom");
late final _sel_hasBaseline = objc.registerName("hasBaseline");
late final _sel_imageWithBaselineOffsetFromBottom_ =
    objc.registerName("imageWithBaselineOffsetFromBottom:");
final _objc_msgSend_315 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double baselineOffset)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_imageWithoutBaseline =
    objc.registerName("imageWithoutBaseline");
late final _sel_configuration = objc.registerName("configuration");
final _objc_msgSend_316 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIImageSymbolConfiguration
class UIImageSymbolConfiguration extends UIImageConfiguration {
  UIImageSymbolConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIImageSymbolConfiguration] that points to the same underlying object as [other].
  UIImageSymbolConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIImageSymbolConfiguration] that wraps the given raw object pointer.
  UIImageSymbolConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIImageSymbolConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UIImageSymbolConfiguration);
  }

  /// unspecifiedConfiguration
  static UIImageSymbolConfiguration getUnspecifiedConfiguration() {
    final _ret = _objc_msgSend_317(
        _class_UIImageSymbolConfiguration, _sel_unspecifiedConfiguration);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithScale:
  static UIImageSymbolConfiguration configurationWithScale_(
      UIImageSymbolScale scale) {
    final _ret = _objc_msgSend_318(_class_UIImageSymbolConfiguration,
        _sel_configurationWithScale_, scale.value);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithPointSize:
  static UIImageSymbolConfiguration configurationWithPointSize_(
      double pointSize) {
    final _ret = _objc_msgSend_319(_class_UIImageSymbolConfiguration,
        _sel_configurationWithPointSize_, pointSize);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithWeight:
  static UIImageSymbolConfiguration configurationWithWeight_(
      UIImageSymbolWeight weight) {
    final _ret = _objc_msgSend_320(_class_UIImageSymbolConfiguration,
        _sel_configurationWithWeight_, weight.value);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithPointSize:weight:
  static UIImageSymbolConfiguration configurationWithPointSize_weight_(
      double pointSize, UIImageSymbolWeight weight) {
    final _ret = _objc_msgSend_321(_class_UIImageSymbolConfiguration,
        _sel_configurationWithPointSize_weight_, pointSize, weight.value);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithPointSize:weight:scale:
  static UIImageSymbolConfiguration configurationWithPointSize_weight_scale_(
      double pointSize, UIImageSymbolWeight weight, UIImageSymbolScale scale) {
    final _ret = _objc_msgSend_322(
        _class_UIImageSymbolConfiguration,
        _sel_configurationWithPointSize_weight_scale_,
        pointSize,
        weight.value,
        scale.value);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithTextStyle:
  static UIImageSymbolConfiguration configurationWithTextStyle_(
      objc.NSString textStyle) {
    final _ret = _objc_msgSend_103(_class_UIImageSymbolConfiguration,
        _sel_configurationWithTextStyle_, textStyle.ref.pointer);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithTextStyle:scale:
  static UIImageSymbolConfiguration configurationWithTextStyle_scale_(
      objc.NSString textStyle, UIImageSymbolScale scale) {
    final _ret = _objc_msgSend_323(
        _class_UIImageSymbolConfiguration,
        _sel_configurationWithTextStyle_scale_,
        textStyle.ref.pointer,
        scale.value);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithFont:
  static UIImageSymbolConfiguration configurationWithFont_(UIFont font) {
    final _ret = _objc_msgSend_345(_class_UIImageSymbolConfiguration,
        _sel_configurationWithFont_, font.ref.pointer);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithFont:scale:
  static UIImageSymbolConfiguration configurationWithFont_scale_(
      UIFont font, UIImageSymbolScale scale) {
    final _ret = _objc_msgSend_346(_class_UIImageSymbolConfiguration,
        _sel_configurationWithFont_scale_, font.ref.pointer, scale.value);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithHierarchicalColor:
  static UIImageSymbolConfiguration configurationWithHierarchicalColor_(
      UIColor hierarchicalColor) {
    final _ret = _objc_msgSend_356(
        _class_UIImageSymbolConfiguration,
        _sel_configurationWithHierarchicalColor_,
        hierarchicalColor.ref.pointer);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithPaletteColors:
  static UIImageSymbolConfiguration configurationWithPaletteColors_(
      objc.NSArray paletteColors) {
    final _ret = _objc_msgSend_357(_class_UIImageSymbolConfiguration,
        _sel_configurationWithPaletteColors_, paletteColors.ref.pointer);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationPreferringMulticolor
  static UIImageSymbolConfiguration configurationPreferringMulticolor() {
    final _ret = _objc_msgSend_4(_class_UIImageSymbolConfiguration,
        _sel_configurationPreferringMulticolor);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationPreferringMonochrome
  static UIImageSymbolConfiguration configurationPreferringMonochrome() {
    final _ret = _objc_msgSend_4(_class_UIImageSymbolConfiguration,
        _sel_configurationPreferringMonochrome);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithoutTextStyle
  UIImageSymbolConfiguration configurationWithoutTextStyle() {
    final _ret =
        _objc_msgSend_4(this.ref.pointer, _sel_configurationWithoutTextStyle);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithoutScale
  UIImageSymbolConfiguration configurationWithoutScale() {
    final _ret =
        _objc_msgSend_4(this.ref.pointer, _sel_configurationWithoutScale);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithoutWeight
  UIImageSymbolConfiguration configurationWithoutWeight() {
    final _ret =
        _objc_msgSend_4(this.ref.pointer, _sel_configurationWithoutWeight);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithoutPointSizeAndWeight
  UIImageSymbolConfiguration configurationWithoutPointSizeAndWeight() {
    final _ret = _objc_msgSend_4(
        this.ref.pointer, _sel_configurationWithoutPointSizeAndWeight);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// isEqualToConfiguration:
  bool isEqualToConfiguration_(UIImageSymbolConfiguration? otherConfiguration) {
    return _objc_msgSend_358(this.ref.pointer, _sel_isEqualToConfiguration_,
        otherConfiguration?.ref.pointer ?? ffi.nullptr);
  }

  /// new
  static UIImageSymbolConfiguration new1() {
    final _ret = _objc_msgSend_4(_class_UIImageSymbolConfiguration, _sel_new);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIImageSymbolConfiguration init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// configurationWithTraitCollection:
  static UIImageSymbolConfiguration configurationWithTraitCollection_(
      UITraitCollection? traitCollection) {
    final _ret = _objc_msgSend_174(
        _class_UIImageSymbolConfiguration,
        _sel_configurationWithTraitCollection_,
        traitCollection?.ref.pointer ?? ffi.nullptr);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationWithLocale:
  static UIImageSymbolConfiguration configurationWithLocale_(
      objc.NSLocale? locale) {
    final _ret = _objc_msgSend_176(_class_UIImageSymbolConfiguration,
        _sel_configurationWithLocale_, locale?.ref.pointer ?? ffi.nullptr);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// configurationByApplyingConfiguration:
  UIImageSymbolConfiguration configurationByApplyingConfiguration_(
      UIImageConfiguration? otherConfiguration) {
    final _ret = _objc_msgSend_177(
        this.ref.pointer,
        _sel_configurationByApplyingConfiguration_,
        otherConfiguration?.ref.pointer ?? ffi.nullptr);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// allocWithZone:
  static UIImageSymbolConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIImageSymbolConfiguration, _sel_allocWithZone_, zone);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIImageSymbolConfiguration alloc() {
    final _ret = _objc_msgSend_4(_class_UIImageSymbolConfiguration, _sel_alloc);
    return UIImageSymbolConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIImageSymbolConfiguration =
    objc.getClass("UIImageSymbolConfiguration");
late final _sel_unspecifiedConfiguration =
    objc.registerName("unspecifiedConfiguration");
final _objc_msgSend_317 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIImageSymbolScale {
  UIImageSymbolScaleDefault(-1),
  UIImageSymbolScaleUnspecified(0),
  UIImageSymbolScaleSmall(1),
  UIImageSymbolScaleMedium(2),
  UIImageSymbolScaleLarge(3);

  final int value;
  const UIImageSymbolScale(this.value);

  static UIImageSymbolScale fromValue(int value) => switch (value) {
        -1 => UIImageSymbolScaleDefault,
        0 => UIImageSymbolScaleUnspecified,
        1 => UIImageSymbolScaleSmall,
        2 => UIImageSymbolScaleMedium,
        3 => UIImageSymbolScaleLarge,
        _ =>
          throw ArgumentError("Unknown value for UIImageSymbolScale: $value"),
      };
}

late final _sel_configurationWithScale_ =
    objc.registerName("configurationWithScale:");
final _objc_msgSend_318 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long scale)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_configurationWithPointSize_ =
    objc.registerName("configurationWithPointSize:");
final _objc_msgSend_319 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double pointSize)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();

enum UIImageSymbolWeight {
  UIImageSymbolWeightUnspecified(0),
  UIImageSymbolWeightUltraLight(1),
  UIImageSymbolWeightThin(2),
  UIImageSymbolWeightLight(3),
  UIImageSymbolWeightRegular(4),
  UIImageSymbolWeightMedium(5),
  UIImageSymbolWeightSemibold(6),
  UIImageSymbolWeightBold(7),
  UIImageSymbolWeightHeavy(8),
  UIImageSymbolWeightBlack(9);

  final int value;
  const UIImageSymbolWeight(this.value);

  static UIImageSymbolWeight fromValue(int value) => switch (value) {
        0 => UIImageSymbolWeightUnspecified,
        1 => UIImageSymbolWeightUltraLight,
        2 => UIImageSymbolWeightThin,
        3 => UIImageSymbolWeightLight,
        4 => UIImageSymbolWeightRegular,
        5 => UIImageSymbolWeightMedium,
        6 => UIImageSymbolWeightSemibold,
        7 => UIImageSymbolWeightBold,
        8 => UIImageSymbolWeightHeavy,
        9 => UIImageSymbolWeightBlack,
        _ =>
          throw ArgumentError("Unknown value for UIImageSymbolWeight: $value"),
      };
}

late final _sel_configurationWithWeight_ =
    objc.registerName("configurationWithWeight:");
final _objc_msgSend_320 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong weight)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_configurationWithPointSize_weight_ =
    objc.registerName("configurationWithPointSize:weight:");
final _objc_msgSend_321 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double pointSize,
                ffi.UnsignedLong weight)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, int)>();
late final _sel_configurationWithPointSize_weight_scale_ =
    objc.registerName("configurationWithPointSize:weight:scale:");
final _objc_msgSend_322 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double pointSize,
                ffi.UnsignedLong weight,
                ffi.Long scale)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, int, int)>();
late final _sel_configurationWithTextStyle_ =
    objc.registerName("configurationWithTextStyle:");
late final _sel_configurationWithTextStyle_scale_ =
    objc.registerName("configurationWithTextStyle:scale:");
final _objc_msgSend_323 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> textStyle,
                ffi.Long scale)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

/// UIFont
class UIFont extends objc.NSObject {
  UIFont._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIFont] that points to the same underlying object as [other].
  UIFont.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIFont] that wraps the given raw object pointer.
  UIFont.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIFont].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_, _class_UIFont);
  }

  /// preferredFontForTextStyle:
  static UIFont preferredFontForTextStyle_(objc.NSString style) {
    final _ret = _objc_msgSend_324(
        _class_UIFont, _sel_preferredFontForTextStyle_, style.ref.pointer);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredFontForTextStyle:compatibleWithTraitCollection:
  static UIFont preferredFontForTextStyle_compatibleWithTraitCollection_(
      objc.NSString style, UITraitCollection? traitCollection) {
    final _ret = _objc_msgSend_325(
        _class_UIFont,
        _sel_preferredFontForTextStyle_compatibleWithTraitCollection_,
        style.ref.pointer,
        traitCollection?.ref.pointer ?? ffi.nullptr);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontWithName:size:
  static UIFont? fontWithName_size_(objc.NSString fontName, double fontSize) {
    final _ret = _objc_msgSend_326(
        _class_UIFont, _sel_fontWithName_size_, fontName.ref.pointer, fontSize);
    return _ret.address == 0
        ? null
        : UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// familyNames
  static objc.NSArray getFamilyNames() {
    final _ret = _objc_msgSend_27(_class_UIFont, _sel_familyNames);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontNamesForFamilyName:
  static objc.NSArray fontNamesForFamilyName_(objc.NSString familyName) {
    final _ret = _objc_msgSend_327(
        _class_UIFont, _sel_fontNamesForFamilyName_, familyName.ref.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemFontOfSize:
  static UIFont systemFontOfSize_(double fontSize) {
    final _ret =
        _objc_msgSend_328(_class_UIFont, _sel_systemFontOfSize_, fontSize);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// boldSystemFontOfSize:
  static UIFont boldSystemFontOfSize_(double fontSize) {
    final _ret =
        _objc_msgSend_328(_class_UIFont, _sel_boldSystemFontOfSize_, fontSize);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// italicSystemFontOfSize:
  static UIFont italicSystemFontOfSize_(double fontSize) {
    final _ret = _objc_msgSend_328(
        _class_UIFont, _sel_italicSystemFontOfSize_, fontSize);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemFontOfSize:weight:
  static UIFont systemFontOfSize_weight_(double fontSize, double weight) {
    final _ret = _objc_msgSend_329(
        _class_UIFont, _sel_systemFontOfSize_weight_, fontSize, weight);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// monospacedDigitSystemFontOfSize:weight:
  static UIFont monospacedDigitSystemFontOfSize_weight_(
      double fontSize, double weight) {
    final _ret = _objc_msgSend_329(_class_UIFont,
        _sel_monospacedDigitSystemFontOfSize_weight_, fontSize, weight);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// systemFontOfSize:weight:width:
  static UIFont systemFontOfSize_weight_width_(
      double fontSize, double weight, double width) {
    final _ret = _objc_msgSend_330(_class_UIFont,
        _sel_systemFontOfSize_weight_width_, fontSize, weight, width);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// monospacedSystemFontOfSize:weight:
  static UIFont monospacedSystemFontOfSize_weight_(
      double fontSize, double weight) {
    final _ret = _objc_msgSend_329(_class_UIFont,
        _sel_monospacedSystemFontOfSize_weight_, fontSize, weight);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// familyName
  objc.NSString get familyName {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_familyName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontName
  objc.NSString get fontName {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_fontName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pointSize
  double get pointSize {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_pointSize)
        : _objc_msgSend_24(this.ref.pointer, _sel_pointSize);
  }

  /// ascender
  double get ascender {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_ascender)
        : _objc_msgSend_24(this.ref.pointer, _sel_ascender);
  }

  /// descender
  double get descender {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_descender)
        : _objc_msgSend_24(this.ref.pointer, _sel_descender);
  }

  /// capHeight
  double get capHeight {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_capHeight)
        : _objc_msgSend_24(this.ref.pointer, _sel_capHeight);
  }

  /// xHeight
  double get xHeight {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_xHeight)
        : _objc_msgSend_24(this.ref.pointer, _sel_xHeight);
  }

  /// lineHeight
  double get lineHeight {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_lineHeight)
        : _objc_msgSend_24(this.ref.pointer, _sel_lineHeight);
  }

  /// leading
  double get leading {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_leading)
        : _objc_msgSend_24(this.ref.pointer, _sel_leading);
  }

  /// fontWithSize:
  UIFont fontWithSize_(double fontSize) {
    final _ret =
        _objc_msgSend_328(this.ref.pointer, _sel_fontWithSize_, fontSize);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontWithDescriptor:size:
  static UIFont fontWithDescriptor_size_(
      UIFontDescriptor descriptor, double pointSize) {
    final _ret = _objc_msgSend_343(_class_UIFont, _sel_fontWithDescriptor_size_,
        descriptor.ref.pointer, pointSize);
    return UIFont.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptor
  UIFontDescriptor get fontDescriptor {
    final _ret = _objc_msgSend_344(this.ref.pointer, _sel_fontDescriptor);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIFont init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIFont.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIFont new1() {
    final _ret = _objc_msgSend_4(_class_UIFont, _sel_new);
    return UIFont.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIFont allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIFont, _sel_allocWithZone_, zone);
    return UIFont.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIFont alloc() {
    final _ret = _objc_msgSend_4(_class_UIFont, _sel_alloc);
    return UIFont.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIFont = objc.getClass("UIFont");
late final _sel_preferredFontForTextStyle_ =
    objc.registerName("preferredFontForTextStyle:");
final _objc_msgSend_324 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> style)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preferredFontForTextStyle_compatibleWithTraitCollection_ = objc
    .registerName("preferredFontForTextStyle:compatibleWithTraitCollection:");
final _objc_msgSend_325 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> style,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fontWithName_size_ = objc.registerName("fontWithName:size:");
final _objc_msgSend_326 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> fontName,
                ffi.Double fontSize)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_familyNames = objc.registerName("familyNames");
late final _sel_fontNamesForFamilyName_ =
    objc.registerName("fontNamesForFamilyName:");
final _objc_msgSend_327 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> familyName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_systemFontOfSize_ = objc.registerName("systemFontOfSize:");
final _objc_msgSend_328 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double fontSize)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_boldSystemFontOfSize_ =
    objc.registerName("boldSystemFontOfSize:");
late final _sel_italicSystemFontOfSize_ =
    objc.registerName("italicSystemFontOfSize:");
late final _sel_systemFontOfSize_weight_ =
    objc.registerName("systemFontOfSize:weight:");
final _objc_msgSend_329 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double fontSize,
                ffi.Double weight)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double)>();
late final _sel_monospacedDigitSystemFontOfSize_weight_ =
    objc.registerName("monospacedDigitSystemFontOfSize:weight:");
late final _sel_systemFontOfSize_weight_width_ =
    objc.registerName("systemFontOfSize:weight:width:");
final _objc_msgSend_330 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double fontSize,
                ffi.Double weight,
                ffi.Double width)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double)>();
late final _sel_monospacedSystemFontOfSize_weight_ =
    objc.registerName("monospacedSystemFontOfSize:weight:");
late final _sel_familyName = objc.registerName("familyName");
late final _sel_fontName = objc.registerName("fontName");
late final _sel_pointSize = objc.registerName("pointSize");
late final _sel_ascender = objc.registerName("ascender");
late final _sel_descender = objc.registerName("descender");
late final _sel_capHeight = objc.registerName("capHeight");
late final _sel_xHeight = objc.registerName("xHeight");
late final _sel_lineHeight = objc.registerName("lineHeight");
late final _sel_leading = objc.registerName("leading");
late final _sel_fontWithSize_ = objc.registerName("fontWithSize:");

/// UIFontDescriptor
class UIFontDescriptor extends objc.NSObject {
  UIFontDescriptor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIFontDescriptor] that points to the same underlying object as [other].
  UIFontDescriptor.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIFontDescriptor] that wraps the given raw object pointer.
  UIFontDescriptor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIFontDescriptor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIFontDescriptor);
  }

  /// init
  UIFontDescriptor init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIFontDescriptor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIFontDescriptor? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIFontDescriptor.castFromPointer(_ret, retain: false, release: true);
  }

  /// postscriptName
  objc.NSString get postscriptName {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_postscriptName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// pointSize
  double get pointSize {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_pointSize)
        : _objc_msgSend_24(this.ref.pointer, _sel_pointSize);
  }

  /// matrix
  void getMatrix(ffi.Pointer<CGAffineTransform> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_74Stret(stret, this.ref.pointer, _sel_matrix)
        : stret.ref = _objc_msgSend_74(this.ref.pointer, _sel_matrix);
  }

  /// symbolicTraits
  UIFontDescriptorSymbolicTraits get symbolicTraits {
    final _ret = _objc_msgSend_331(this.ref.pointer, _sel_symbolicTraits);
    return UIFontDescriptorSymbolicTraits.fromValue(_ret);
  }

  /// objectForKey:
  objc.ObjCObjectBase? objectForKey_(objc.NSString anAttribute) {
    final _ret = _objc_msgSend_5(
        this.ref.pointer, _sel_objectForKey_, anAttribute.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// fontAttributes
  objc.NSDictionary get fontAttributes {
    final _ret = _objc_msgSend_273(this.ref.pointer, _sel_fontAttributes);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// matchingFontDescriptorsWithMandatoryKeys:
  objc.NSArray matchingFontDescriptorsWithMandatoryKeys_(
      objc.ObjCObjectBase? mandatoryKeys) {
    final _ret = _objc_msgSend_332(
        this.ref.pointer,
        _sel_matchingFontDescriptorsWithMandatoryKeys_,
        mandatoryKeys?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithFontAttributes:
  static UIFontDescriptor fontDescriptorWithFontAttributes_(
      objc.NSDictionary attributes) {
    final _ret = _objc_msgSend_333(_class_UIFontDescriptor,
        _sel_fontDescriptorWithFontAttributes_, attributes.ref.pointer);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithName:size:
  static UIFontDescriptor fontDescriptorWithName_size_(
      objc.NSString fontName, double size) {
    final _ret = _objc_msgSend_334(_class_UIFontDescriptor,
        _sel_fontDescriptorWithName_size_, fontName.ref.pointer, size);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithName:matrix:
  static UIFontDescriptor fontDescriptorWithName_matrix_(
      objc.NSString fontName, CGAffineTransform matrix) {
    final _ret = _objc_msgSend_335(_class_UIFontDescriptor,
        _sel_fontDescriptorWithName_matrix_, fontName.ref.pointer, matrix);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredFontDescriptorWithTextStyle:
  static UIFontDescriptor preferredFontDescriptorWithTextStyle_(
      objc.NSString style) {
    final _ret = _objc_msgSend_336(_class_UIFontDescriptor,
        _sel_preferredFontDescriptorWithTextStyle_, style.ref.pointer);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:
  static UIFontDescriptor
      preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_(
          objc.NSString style, UITraitCollection? traitCollection) {
    final _ret = _objc_msgSend_337(
        _class_UIFontDescriptor,
        _sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_,
        style.ref.pointer,
        traitCollection?.ref.pointer ?? ffi.nullptr);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithFontAttributes:
  UIFontDescriptor initWithFontAttributes_(objc.NSDictionary attributes) {
    final _ret = _objc_msgSend_338(this.ref.retainAndReturnPointer(),
        _sel_initWithFontAttributes_, attributes.ref.pointer);
    return UIFontDescriptor.castFromPointer(_ret, retain: false, release: true);
  }

  /// fontDescriptorByAddingAttributes:
  UIFontDescriptor fontDescriptorByAddingAttributes_(
      objc.NSDictionary attributes) {
    final _ret = _objc_msgSend_333(this.ref.pointer,
        _sel_fontDescriptorByAddingAttributes_, attributes.ref.pointer);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithSize:
  UIFontDescriptor fontDescriptorWithSize_(double newPointSize) {
    final _ret = _objc_msgSend_339(
        this.ref.pointer, _sel_fontDescriptorWithSize_, newPointSize);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithMatrix:
  UIFontDescriptor fontDescriptorWithMatrix_(CGAffineTransform matrix) {
    final _ret = _objc_msgSend_340(
        this.ref.pointer, _sel_fontDescriptorWithMatrix_, matrix);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithFace:
  UIFontDescriptor fontDescriptorWithFace_(objc.NSString newFace) {
    final _ret = _objc_msgSend_336(
        this.ref.pointer, _sel_fontDescriptorWithFace_, newFace.ref.pointer);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithFamily:
  UIFontDescriptor fontDescriptorWithFamily_(objc.NSString newFamily) {
    final _ret = _objc_msgSend_336(this.ref.pointer,
        _sel_fontDescriptorWithFamily_, newFamily.ref.pointer);
    return UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithSymbolicTraits:
  UIFontDescriptor? fontDescriptorWithSymbolicTraits_(
      UIFontDescriptorSymbolicTraits symbolicTraits) {
    final _ret = _objc_msgSend_341(this.ref.pointer,
        _sel_fontDescriptorWithSymbolicTraits_, symbolicTraits.value);
    return _ret.address == 0
        ? null
        : UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// fontDescriptorWithDesign:
  UIFontDescriptor? fontDescriptorWithDesign_(objc.NSString design) {
    final _ret = _objc_msgSend_342(
        this.ref.pointer, _sel_fontDescriptorWithDesign_, design.ref.pointer);
    return _ret.address == 0
        ? null
        : UIFontDescriptor.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static UIFontDescriptor new1() {
    final _ret = _objc_msgSend_4(_class_UIFontDescriptor, _sel_new);
    return UIFontDescriptor.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIFontDescriptor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIFontDescriptor, _sel_allocWithZone_, zone);
    return UIFontDescriptor.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIFontDescriptor alloc() {
    final _ret = _objc_msgSend_4(_class_UIFontDescriptor, _sel_alloc);
    return UIFontDescriptor.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIFontDescriptor = objc.getClass("UIFontDescriptor");
late final _sel_postscriptName = objc.registerName("postscriptName");
late final _sel_matrix = objc.registerName("matrix");

enum UIFontDescriptorSymbolicTraits {
  UIFontDescriptorTraitItalic(1),
  UIFontDescriptorTraitBold(2),
  UIFontDescriptorTraitExpanded(32),
  UIFontDescriptorTraitCondensed(64),
  UIFontDescriptorTraitMonoSpace(1024),
  UIFontDescriptorTraitVertical(2048),
  UIFontDescriptorTraitUIOptimized(4096),
  UIFontDescriptorTraitTightLeading(32768),
  UIFontDescriptorTraitLooseLeading(65536),
  UIFontDescriptorClassMask(-268435456),
  UIFontDescriptorClassUnknown(0),
  UIFontDescriptorClassOldStyleSerifs(268435456),
  UIFontDescriptorClassTransitionalSerifs(536870912),
  UIFontDescriptorClassModernSerifs(805306368),
  UIFontDescriptorClassClarendonSerifs(1073741824),
  UIFontDescriptorClassSlabSerifs(1342177280),
  UIFontDescriptorClassFreeformSerifs(1879048192),
  UIFontDescriptorClassSansSerif(-2147483648),
  UIFontDescriptorClassOrnamentals(-1879048192),
  UIFontDescriptorClassScripts(-1610612736),
  UIFontDescriptorClassSymbolic(-1073741824);

  final int value;
  const UIFontDescriptorSymbolicTraits(this.value);

  static UIFontDescriptorSymbolicTraits fromValue(int value) => switch (value) {
        1 => UIFontDescriptorTraitItalic,
        2 => UIFontDescriptorTraitBold,
        32 => UIFontDescriptorTraitExpanded,
        64 => UIFontDescriptorTraitCondensed,
        1024 => UIFontDescriptorTraitMonoSpace,
        2048 => UIFontDescriptorTraitVertical,
        4096 => UIFontDescriptorTraitUIOptimized,
        32768 => UIFontDescriptorTraitTightLeading,
        65536 => UIFontDescriptorTraitLooseLeading,
        -268435456 => UIFontDescriptorClassMask,
        0 => UIFontDescriptorClassUnknown,
        268435456 => UIFontDescriptorClassOldStyleSerifs,
        536870912 => UIFontDescriptorClassTransitionalSerifs,
        805306368 => UIFontDescriptorClassModernSerifs,
        1073741824 => UIFontDescriptorClassClarendonSerifs,
        1342177280 => UIFontDescriptorClassSlabSerifs,
        1879048192 => UIFontDescriptorClassFreeformSerifs,
        -2147483648 => UIFontDescriptorClassSansSerif,
        -1879048192 => UIFontDescriptorClassOrnamentals,
        -1610612736 => UIFontDescriptorClassScripts,
        -1073741824 => UIFontDescriptorClassSymbolic,
        _ => throw ArgumentError(
            "Unknown value for UIFontDescriptorSymbolicTraits: $value"),
      };
}

late final _sel_symbolicTraits = objc.registerName("symbolicTraits");
final _objc_msgSend_331 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_objectForKey_ = objc.registerName("objectForKey:");
late final _sel_fontAttributes = objc.registerName("fontAttributes");
late final _sel_matchingFontDescriptorsWithMandatoryKeys_ =
    objc.registerName("matchingFontDescriptorsWithMandatoryKeys:");
final _objc_msgSend_332 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> mandatoryKeys)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fontDescriptorWithFontAttributes_ =
    objc.registerName("fontDescriptorWithFontAttributes:");
final _objc_msgSend_333 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> attributes)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fontDescriptorWithName_size_ =
    objc.registerName("fontDescriptorWithName:size:");
final _objc_msgSend_334 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> fontName,
                ffi.Double size)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_fontDescriptorWithName_matrix_ =
    objc.registerName("fontDescriptorWithName:matrix:");
final _objc_msgSend_335 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> fontName,
                CGAffineTransform matrix)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            CGAffineTransform)>();
late final _sel_preferredFontDescriptorWithTextStyle_ =
    objc.registerName("preferredFontDescriptorWithTextStyle:");
final _objc_msgSend_336 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> style)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_ =
    objc.registerName(
        "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:");
final _objc_msgSend_337 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> style,
                ffi.Pointer<objc.ObjCObject> traitCollection)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFontAttributes_ =
    objc.registerName("initWithFontAttributes:");
final _objc_msgSend_338 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> attributes)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fontDescriptorByAddingAttributes_ =
    objc.registerName("fontDescriptorByAddingAttributes:");
late final _sel_fontDescriptorWithSize_ =
    objc.registerName("fontDescriptorWithSize:");
final _objc_msgSend_339 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double newPointSize)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_fontDescriptorWithMatrix_ =
    objc.registerName("fontDescriptorWithMatrix:");
final _objc_msgSend_340 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGAffineTransform matrix)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGAffineTransform)>();
late final _sel_fontDescriptorWithFace_ =
    objc.registerName("fontDescriptorWithFace:");
late final _sel_fontDescriptorWithFamily_ =
    objc.registerName("fontDescriptorWithFamily:");
late final _sel_fontDescriptorWithSymbolicTraits_ =
    objc.registerName("fontDescriptorWithSymbolicTraits:");
final _objc_msgSend_341 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint32 symbolicTraits)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_fontDescriptorWithDesign_ =
    objc.registerName("fontDescriptorWithDesign:");
final _objc_msgSend_342 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> design)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fontWithDescriptor_size_ =
    objc.registerName("fontWithDescriptor:size:");
final _objc_msgSend_343 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> descriptor,
                ffi.Double pointSize)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_fontDescriptor = objc.registerName("fontDescriptor");
final _objc_msgSend_344 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_configurationWithFont_ =
    objc.registerName("configurationWithFont:");
final _objc_msgSend_345 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> font)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_configurationWithFont_scale_ =
    objc.registerName("configurationWithFont:scale:");
final _objc_msgSend_346 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> font,
                ffi.Long scale)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

/// UIColor
class UIColor extends objc.NSObject {
  UIColor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIColor] that points to the same underlying object as [other].
  UIColor.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIColor] that wraps the given raw object pointer.
  UIColor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIColor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIColor);
  }

  /// colorWithWhite:alpha:
  static UIColor colorWithWhite_alpha_(double white, double alpha) {
    final _ret = _objc_msgSend_347(
        _class_UIColor, _sel_colorWithWhite_alpha_, white, alpha);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithHue:saturation:brightness:alpha:
  static UIColor colorWithHue_saturation_brightness_alpha_(
      double hue, double saturation, double brightness, double alpha) {
    final _ret = _objc_msgSend_348(
        _class_UIColor,
        _sel_colorWithHue_saturation_brightness_alpha_,
        hue,
        saturation,
        brightness,
        alpha);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithRed:green:blue:alpha:
  static UIColor colorWithRed_green_blue_alpha_(
      double red, double green, double blue, double alpha) {
    final _ret = _objc_msgSend_348(_class_UIColor,
        _sel_colorWithRed_green_blue_alpha_, red, green, blue, alpha);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithDisplayP3Red:green:blue:alpha:
  static UIColor colorWithDisplayP3Red_green_blue_alpha_(
      double displayP3Red, double green, double blue, double alpha) {
    final _ret = _objc_msgSend_348(
        _class_UIColor,
        _sel_colorWithDisplayP3Red_green_blue_alpha_,
        displayP3Red,
        green,
        blue,
        alpha);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithCGColor:
  static UIColor colorWithCGColor_(ffi.Pointer<CGColor> cgColor) {
    final _ret =
        _objc_msgSend_349(_class_UIColor, _sel_colorWithCGColor_, cgColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithPatternImage:
  static UIColor colorWithPatternImage_(UIImage image) {
    final _ret = _objc_msgSend_350(
        _class_UIColor, _sel_colorWithPatternImage_, image.ref.pointer);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// colorWithCIColor:
  static UIColor colorWithCIColor_(CIColor ciColor) {
    final _ret = _objc_msgSend_351(
        _class_UIColor, _sel_colorWithCIColor_, ciColor.ref.pointer);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithWhite:alpha:
  UIColor initWithWhite_alpha_(double white, double alpha) {
    final _ret = _objc_msgSend_347(this.ref.retainAndReturnPointer(),
        _sel_initWithWhite_alpha_, white, alpha);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithHue:saturation:brightness:alpha:
  UIColor initWithHue_saturation_brightness_alpha_(
      double hue, double saturation, double brightness, double alpha) {
    final _ret = _objc_msgSend_348(
        this.ref.retainAndReturnPointer(),
        _sel_initWithHue_saturation_brightness_alpha_,
        hue,
        saturation,
        brightness,
        alpha);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithRed:green:blue:alpha:
  UIColor initWithRed_green_blue_alpha_(
      double red, double green, double blue, double alpha) {
    final _ret = _objc_msgSend_348(this.ref.retainAndReturnPointer(),
        _sel_initWithRed_green_blue_alpha_, red, green, blue, alpha);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithDisplayP3Red:green:blue:alpha:
  UIColor initWithDisplayP3Red_green_blue_alpha_(
      double displayP3Red, double green, double blue, double alpha) {
    final _ret = _objc_msgSend_348(
        this.ref.retainAndReturnPointer(),
        _sel_initWithDisplayP3Red_green_blue_alpha_,
        displayP3Red,
        green,
        blue,
        alpha);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCGColor:
  UIColor initWithCGColor_(ffi.Pointer<CGColor> cgColor) {
    final _ret = _objc_msgSend_349(
        this.ref.retainAndReturnPointer(), _sel_initWithCGColor_, cgColor);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithPatternImage:
  UIColor initWithPatternImage_(UIImage image) {
    final _ret = _objc_msgSend_350(this.ref.retainAndReturnPointer(),
        _sel_initWithPatternImage_, image.ref.pointer);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCIColor:
  UIColor initWithCIColor_(CIColor ciColor) {
    final _ret = _objc_msgSend_351(this.ref.retainAndReturnPointer(),
        _sel_initWithCIColor_, ciColor.ref.pointer);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// blackColor
  static UIColor getBlackColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_blackColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// darkGrayColor
  static UIColor getDarkGrayColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_darkGrayColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// lightGrayColor
  static UIColor getLightGrayColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_lightGrayColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// whiteColor
  static UIColor getWhiteColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_whiteColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// grayColor
  static UIColor getGrayColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_grayColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// redColor
  static UIColor getRedColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_redColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// greenColor
  static UIColor getGreenColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_greenColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// blueColor
  static UIColor getBlueColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_blueColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// cyanColor
  static UIColor getCyanColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_cyanColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// yellowColor
  static UIColor getYellowColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_yellowColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// magentaColor
  static UIColor getMagentaColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_magentaColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// orangeColor
  static UIColor getOrangeColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_orangeColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// purpleColor
  static UIColor getPurpleColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_purpleColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// brownColor
  static UIColor getBrownColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_brownColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// clearColor
  static UIColor getClearColor() {
    final _ret = _objc_msgSend_352(_class_UIColor, _sel_clearColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// set
  void set1() {
    _objc_msgSend_12(this.ref.pointer, _sel_set);
  }

  /// setFill
  void setFill() {
    _objc_msgSend_12(this.ref.pointer, _sel_setFill);
  }

  /// setStroke
  void setStroke() {
    _objc_msgSend_12(this.ref.pointer, _sel_setStroke);
  }

  /// getWhite:alpha:
  bool getWhite_alpha_(
      ffi.Pointer<ffi.Double> white, ffi.Pointer<ffi.Double> alpha) {
    return _objc_msgSend_353(
        this.ref.pointer, _sel_getWhite_alpha_, white, alpha);
  }

  /// getHue:saturation:brightness:alpha:
  bool getHue_saturation_brightness_alpha_(
      ffi.Pointer<ffi.Double> hue,
      ffi.Pointer<ffi.Double> saturation,
      ffi.Pointer<ffi.Double> brightness,
      ffi.Pointer<ffi.Double> alpha) {
    return _objc_msgSend_354(
        this.ref.pointer,
        _sel_getHue_saturation_brightness_alpha_,
        hue,
        saturation,
        brightness,
        alpha);
  }

  /// getRed:green:blue:alpha:
  bool getRed_green_blue_alpha_(
      ffi.Pointer<ffi.Double> red,
      ffi.Pointer<ffi.Double> green,
      ffi.Pointer<ffi.Double> blue,
      ffi.Pointer<ffi.Double> alpha) {
    return _objc_msgSend_354(this.ref.pointer, _sel_getRed_green_blue_alpha_,
        red, green, blue, alpha);
  }

  /// colorWithAlphaComponent:
  UIColor colorWithAlphaComponent_(double alpha) {
    final _ret = _objc_msgSend_355(
        this.ref.pointer, _sel_colorWithAlphaComponent_, alpha);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// CGColor
  ffi.Pointer<CGColor> get CGColor1 {
    return _objc_msgSend_93(this.ref.pointer, _sel_CGColor);
  }

  /// CIColor
  CIColor get CIColor1 {
    final _ret = _objc_msgSend_239(this.ref.pointer, _sel_CIColor);
    return CIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIColor init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIColor new1() {
    final _ret = _objc_msgSend_4(_class_UIColor, _sel_new);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIColor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIColor, _sel_allocWithZone_, zone);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIColor alloc() {
    final _ret = _objc_msgSend_4(_class_UIColor, _sel_alloc);
    return UIColor.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIColor = objc.getClass("UIColor");
late final _sel_colorWithWhite_alpha_ =
    objc.registerName("colorWithWhite:alpha:");
final _objc_msgSend_347 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double white,
                ffi.Double alpha)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double)>();
late final _sel_colorWithHue_saturation_brightness_alpha_ =
    objc.registerName("colorWithHue:saturation:brightness:alpha:");
final _objc_msgSend_348 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double hue,
                ffi.Double saturation,
                ffi.Double brightness,
                ffi.Double alpha)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double, double, double)>();
late final _sel_colorWithDisplayP3Red_green_blue_alpha_ =
    objc.registerName("colorWithDisplayP3Red:green:blue:alpha:");
final _objc_msgSend_349 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CGColor> cgColor)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<CGColor>)>();
late final _sel_colorWithPatternImage_ =
    objc.registerName("colorWithPatternImage:");
final _objc_msgSend_350 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> image)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_colorWithCIColor_ = objc.registerName("colorWithCIColor:");
final _objc_msgSend_351 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> ciColor)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithWhite_alpha_ =
    objc.registerName("initWithWhite:alpha:");
late final _sel_initWithHue_saturation_brightness_alpha_ =
    objc.registerName("initWithHue:saturation:brightness:alpha:");
late final _sel_initWithDisplayP3Red_green_blue_alpha_ =
    objc.registerName("initWithDisplayP3Red:green:blue:alpha:");
late final _sel_initWithPatternImage_ =
    objc.registerName("initWithPatternImage:");
late final _sel_initWithCIColor_ = objc.registerName("initWithCIColor:");
final _objc_msgSend_352 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_darkGrayColor = objc.registerName("darkGrayColor");
late final _sel_lightGrayColor = objc.registerName("lightGrayColor");
late final _sel_orangeColor = objc.registerName("orangeColor");
late final _sel_purpleColor = objc.registerName("purpleColor");
late final _sel_brownColor = objc.registerName("brownColor");
late final _sel_set = objc.registerName("set");
late final _sel_setFill = objc.registerName("setFill");
late final _sel_setStroke = objc.registerName("setStroke");
late final _sel_getWhite_alpha_ = objc.registerName("getWhite:alpha:");
final _objc_msgSend_353 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Double> white,
                ffi.Pointer<ffi.Double> alpha)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>)>();
late final _sel_getHue_saturation_brightness_alpha_ =
    objc.registerName("getHue:saturation:brightness:alpha:");
final _objc_msgSend_354 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Double> hue,
                ffi.Pointer<ffi.Double> saturation,
                ffi.Pointer<ffi.Double> brightness,
                ffi.Pointer<ffi.Double> alpha)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>)>();
late final _sel_getRed_green_blue_alpha_ =
    objc.registerName("getRed:green:blue:alpha:");
late final _sel_colorWithAlphaComponent_ =
    objc.registerName("colorWithAlphaComponent:");
final _objc_msgSend_355 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double alpha)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_CGColor = objc.registerName("CGColor");
late final _sel_CIColor = objc.registerName("CIColor");
late final _sel_configurationWithHierarchicalColor_ =
    objc.registerName("configurationWithHierarchicalColor:");
final _objc_msgSend_356 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> hierarchicalColor)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_configurationWithPaletteColors_ =
    objc.registerName("configurationWithPaletteColors:");
final _objc_msgSend_357 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> paletteColors)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_configurationPreferringMulticolor =
    objc.registerName("configurationPreferringMulticolor");
late final _sel_configurationPreferringMonochrome =
    objc.registerName("configurationPreferringMonochrome");
late final _sel_configurationWithoutTextStyle =
    objc.registerName("configurationWithoutTextStyle");
late final _sel_configurationWithoutScale =
    objc.registerName("configurationWithoutScale");
late final _sel_configurationWithoutWeight =
    objc.registerName("configurationWithoutWeight");
late final _sel_configurationWithoutPointSizeAndWeight =
    objc.registerName("configurationWithoutPointSizeAndWeight");
late final _sel_isEqualToConfiguration_ =
    objc.registerName("isEqualToConfiguration:");
final _objc_msgSend_358 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> otherConfiguration)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_symbolConfiguration = objc.registerName("symbolConfiguration");
final _objc_msgSend_359 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_imageByApplyingSymbolConfiguration_ =
    objc.registerName("imageByApplyingSymbolConfiguration:");
final _objc_msgSend_360 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithTintColor_ = objc.registerName("imageWithTintColor:");
final _objc_msgSend_361 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> color)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_imageWithTintColor_renderingMode_ =
    objc.registerName("imageWithTintColor:renderingMode:");
final _objc_msgSend_362 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> color,
                ffi.UnsignedLong renderingMode)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_imageByPreparingForDisplay =
    objc.registerName("imageByPreparingForDisplay");
final _objc_msgSend_363 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void _ObjCBlock_ffiVoid_UIImage_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_UIImage_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_UIImage {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_UIImage_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(UIImage?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_UIImage_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : UIImage.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(UIImage?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_UIImage_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : UIImage.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_UIImage(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_UIImage_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(UIImage? arg0) => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      ref.pointer, arg0?.ref.pointer ?? ffi.nullptr);
}

late final _sel_prepareForDisplayWithCompletionHandler_ =
    objc.registerName("prepareForDisplayWithCompletionHandler:");
final _objc_msgSend_364 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> completionHandler)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_imageByPreparingThumbnailOfSize_ =
    objc.registerName("imageByPreparingThumbnailOfSize:");
final _objc_msgSend_365 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGSize size)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGSize)>();
late final _sel_prepareThumbnailOfSize_completionHandler_ =
    objc.registerName("prepareThumbnailOfSize:completionHandler:");
final _objc_msgSend_366 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGSize size,
                ffi.Pointer<objc.ObjCBlockImpl> completionHandler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGSize,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_isHighDynamicRange = objc.registerName("isHighDynamicRange");
late final _sel_imageRestrictedToStandardDynamicRange =
    objc.registerName("imageRestrictedToStandardDynamicRange");
late final _sel_image = objc.registerName("image");
late final _sel_setImage_ = objc.registerName("setImage:");
final _objc_msgSend_367 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_discoverabilityTitle =
    objc.registerName("discoverabilityTitle");
late final _sel_setDiscoverabilityTitle_ =
    objc.registerName("setDiscoverabilityTitle:");
late final _sel_action = objc.registerName("action");
final _objc_msgSend_368 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCSelector> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCSelector> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_propertyList = objc.registerName("propertyList");

enum UIMenuElementAttributes {
  UIMenuElementAttributesDisabled(1),
  UIMenuElementAttributesDestructive(2),
  UIMenuElementAttributesHidden(4),
  UIMenuElementAttributesKeepsMenuPresented(8);

  final int value;
  const UIMenuElementAttributes(this.value);

  static UIMenuElementAttributes fromValue(int value) => switch (value) {
        1 => UIMenuElementAttributesDisabled,
        2 => UIMenuElementAttributesDestructive,
        4 => UIMenuElementAttributesHidden,
        8 => UIMenuElementAttributesKeepsMenuPresented,
        _ => throw ArgumentError(
            "Unknown value for UIMenuElementAttributes: $value"),
      };
}

late final _sel_attributes = objc.registerName("attributes");
final _objc_msgSend_369 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAttributes_ = objc.registerName("setAttributes:");
final _objc_msgSend_370 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum UIMenuElementState {
  UIMenuElementStateOff(0),
  UIMenuElementStateOn(1),
  UIMenuElementStateMixed(2);

  final int value;
  const UIMenuElementState(this.value);

  static UIMenuElementState fromValue(int value) => switch (value) {
        0 => UIMenuElementStateOff,
        1 => UIMenuElementStateOn,
        2 => UIMenuElementStateMixed,
        _ =>
          throw ArgumentError("Unknown value for UIMenuElementState: $value"),
      };
}

final _objc_msgSend_371 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setState_ = objc.registerName("setState:");
final _objc_msgSend_372 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_alternates = objc.registerName("alternates");
late final _sel_commandWithTitle_image_action_propertyList_ =
    objc.registerName("commandWithTitle:image:action:propertyList:");
final _objc_msgSend_373 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> title,
                ffi.Pointer<objc.ObjCObject> image,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> propertyList)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_commandWithTitle_image_action_propertyList_alternates_ =
    objc.registerName("commandWithTitle:image:action:propertyList:alternates:");
final _objc_msgSend_374 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> title,
                ffi.Pointer<objc.ObjCObject> image,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> propertyList,
                ffi.Pointer<objc.ObjCObject> alternates)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// UIMenuElement
class UIMenuElement extends objc.NSObject {
  UIMenuElement._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIMenuElement] that points to the same underlying object as [other].
  UIMenuElement.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIMenuElement] that wraps the given raw object pointer.
  UIMenuElement.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIMenuElement].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIMenuElement);
  }

  /// title
  objc.NSString get title {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_title);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// subtitle
  objc.NSString? get subtitle {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_subtitle);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSubtitle:
  set subtitle(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer, _sel_setSubtitle_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// image
  UIImage? get image {
    final _ret = _objc_msgSend_363(this.ref.pointer, _sel_image);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  UIMenuElement? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIMenuElement.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  UIMenuElement init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIMenuElement.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIMenuElement new1() {
    final _ret = _objc_msgSend_4(_class_UIMenuElement, _sel_new);
    return UIMenuElement.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIMenuElement allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIMenuElement, _sel_allocWithZone_, zone);
    return UIMenuElement.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIMenuElement alloc() {
    final _ret = _objc_msgSend_4(_class_UIMenuElement, _sel_alloc);
    return UIMenuElement.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIMenuElement = objc.getClass("UIMenuElement");
late final _sel_subtitle = objc.registerName("subtitle");
late final _sel_setSubtitle_ = objc.registerName("setSubtitle:");
late final _sel_validateCommand_ = objc.registerName("validateCommand:");
final _objc_msgSend_375 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> command)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSUndoManager
class NSUndoManager extends objc.NSObject {
  NSUndoManager._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSUndoManager] that points to the same underlying object as [other].
  NSUndoManager.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSUndoManager] that wraps the given raw object pointer.
  NSUndoManager.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSUndoManager].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSUndoManager);
  }

  /// beginUndoGrouping
  void beginUndoGrouping() {
    _objc_msgSend_12(this.ref.pointer, _sel_beginUndoGrouping);
  }

  /// endUndoGrouping
  void endUndoGrouping() {
    _objc_msgSend_12(this.ref.pointer, _sel_endUndoGrouping);
  }

  /// groupingLevel
  int get groupingLevel {
    return _objc_msgSend_59(this.ref.pointer, _sel_groupingLevel);
  }

  /// disableUndoRegistration
  void disableUndoRegistration() {
    _objc_msgSend_12(this.ref.pointer, _sel_disableUndoRegistration);
  }

  /// enableUndoRegistration
  void enableUndoRegistration() {
    _objc_msgSend_12(this.ref.pointer, _sel_enableUndoRegistration);
  }

  /// isUndoRegistrationEnabled
  bool get undoRegistrationEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isUndoRegistrationEnabled);
  }

  /// groupsByEvent
  bool get groupsByEvent {
    return _objc_msgSend_11(this.ref.pointer, _sel_groupsByEvent);
  }

  /// setGroupsByEvent:
  set groupsByEvent(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setGroupsByEvent_, value);
  }

  /// levelsOfUndo
  int get levelsOfUndo {
    return _objc_msgSend_53(this.ref.pointer, _sel_levelsOfUndo);
  }

  /// setLevelsOfUndo:
  set levelsOfUndo(int value) {
    return _objc_msgSend_376(this.ref.pointer, _sel_setLevelsOfUndo_, value);
  }

  /// runLoopModes
  objc.NSArray get runLoopModes {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_runLoopModes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRunLoopModes:
  set runLoopModes(objc.NSArray value) {
    return _objc_msgSend_132(
        this.ref.pointer, _sel_setRunLoopModes_, value.ref.pointer);
  }

  /// undo
  void undo() {
    _objc_msgSend_12(this.ref.pointer, _sel_undo);
  }

  /// redo
  void redo() {
    _objc_msgSend_12(this.ref.pointer, _sel_redo);
  }

  /// undoNestedGroup
  void undoNestedGroup() {
    _objc_msgSend_12(this.ref.pointer, _sel_undoNestedGroup);
  }

  /// canUndo
  bool get canUndo {
    return _objc_msgSend_11(this.ref.pointer, _sel_canUndo);
  }

  /// canRedo
  bool get canRedo {
    return _objc_msgSend_11(this.ref.pointer, _sel_canRedo);
  }

  /// undoCount
  int get undoCount {
    return _objc_msgSend_53(this.ref.pointer, _sel_undoCount);
  }

  /// redoCount
  int get redoCount {
    return _objc_msgSend_53(this.ref.pointer, _sel_redoCount);
  }

  /// isUndoing
  bool get undoing {
    return _objc_msgSend_11(this.ref.pointer, _sel_isUndoing);
  }

  /// isRedoing
  bool get redoing {
    return _objc_msgSend_11(this.ref.pointer, _sel_isRedoing);
  }

  /// removeAllActions
  void removeAllActions() {
    _objc_msgSend_12(this.ref.pointer, _sel_removeAllActions);
  }

  /// removeAllActionsWithTarget:
  void removeAllActionsWithTarget_(objc.ObjCObjectBase target) {
    _objc_msgSend_142(
        this.ref.pointer, _sel_removeAllActionsWithTarget_, target.ref.pointer);
  }

  /// registerUndoWithTarget:selector:object:
  void registerUndoWithTarget_selector_object_(objc.ObjCObjectBase target,
      ffi.Pointer<objc.ObjCSelector> selector, objc.ObjCObjectBase? object) {
    _objc_msgSend_377(
        this.ref.pointer,
        _sel_registerUndoWithTarget_selector_object_,
        target.ref.pointer,
        selector,
        object?.ref.pointer ?? ffi.nullptr);
  }

  /// prepareWithInvocationTarget:
  objc.ObjCObjectBase prepareWithInvocationTarget_(objc.ObjCObjectBase target) {
    final _ret = _objc_msgSend_67(this.ref.pointer,
        _sel_prepareWithInvocationTarget_, target.ref.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// registerUndoWithTarget:handler:
  void registerUndoWithTarget_handler_(
      objc.ObjCObjectBase target,
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
          undoHandler) {
    _objc_msgSend_378(this.ref.pointer, _sel_registerUndoWithTarget_handler_,
        target.ref.pointer, undoHandler.ref.pointer);
  }

  /// setActionIsDiscardable:
  void setActionIsDiscardable_(bool discardable) {
    _objc_msgSend_379(
        this.ref.pointer, _sel_setActionIsDiscardable_, discardable);
  }

  /// undoActionIsDiscardable
  bool get undoActionIsDiscardable {
    return _objc_msgSend_11(this.ref.pointer, _sel_undoActionIsDiscardable);
  }

  /// redoActionIsDiscardable
  bool get redoActionIsDiscardable {
    return _objc_msgSend_11(this.ref.pointer, _sel_redoActionIsDiscardable);
  }

  /// undoActionName
  objc.NSString get undoActionName {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_undoActionName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// redoActionName
  objc.NSString get redoActionName {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_redoActionName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setActionName:
  void setActionName_(objc.NSString actionName) {
    _objc_msgSend_109(
        this.ref.pointer, _sel_setActionName_, actionName.ref.pointer);
  }

  /// undoMenuItemTitle
  objc.NSString get undoMenuItemTitle {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_undoMenuItemTitle);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// redoMenuItemTitle
  objc.NSString get redoMenuItemTitle {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_redoMenuItemTitle);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// undoMenuTitleForUndoActionName:
  objc.NSString undoMenuTitleForUndoActionName_(objc.NSString actionName) {
    final _ret = _objc_msgSend_380(this.ref.pointer,
        _sel_undoMenuTitleForUndoActionName_, actionName.ref.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// redoMenuTitleForUndoActionName:
  objc.NSString redoMenuTitleForUndoActionName_(objc.NSString actionName) {
    final _ret = _objc_msgSend_380(this.ref.pointer,
        _sel_redoMenuTitleForUndoActionName_, actionName.ref.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSUndoManager init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSUndoManager.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSUndoManager new1() {
    final _ret = _objc_msgSend_4(_class_NSUndoManager, _sel_new);
    return NSUndoManager.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSUndoManager allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSUndoManager, _sel_allocWithZone_, zone);
    return NSUndoManager.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSUndoManager alloc() {
    final _ret = _objc_msgSend_4(_class_NSUndoManager, _sel_alloc);
    return NSUndoManager.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSUndoManager = objc.getClass("NSUndoManager");
late final _sel_beginUndoGrouping = objc.registerName("beginUndoGrouping");
late final _sel_endUndoGrouping = objc.registerName("endUndoGrouping");
late final _sel_groupingLevel = objc.registerName("groupingLevel");
late final _sel_disableUndoRegistration =
    objc.registerName("disableUndoRegistration");
late final _sel_enableUndoRegistration =
    objc.registerName("enableUndoRegistration");
late final _sel_isUndoRegistrationEnabled =
    objc.registerName("isUndoRegistrationEnabled");
late final _sel_groupsByEvent = objc.registerName("groupsByEvent");
late final _sel_setGroupsByEvent_ = objc.registerName("setGroupsByEvent:");
late final _sel_levelsOfUndo = objc.registerName("levelsOfUndo");
late final _sel_setLevelsOfUndo_ = objc.registerName("setLevelsOfUndo:");
final _objc_msgSend_376 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_runLoopModes = objc.registerName("runLoopModes");
late final _sel_setRunLoopModes_ = objc.registerName("setRunLoopModes:");
late final _sel_undo = objc.registerName("undo");
late final _sel_redo = objc.registerName("redo");
late final _sel_undoNestedGroup = objc.registerName("undoNestedGroup");
late final _sel_canUndo = objc.registerName("canUndo");
late final _sel_canRedo = objc.registerName("canRedo");
late final _sel_undoCount = objc.registerName("undoCount");
late final _sel_redoCount = objc.registerName("redoCount");
late final _sel_isUndoing = objc.registerName("isUndoing");
late final _sel_isRedoing = objc.registerName("isRedoing");
late final _sel_removeAllActions = objc.registerName("removeAllActions");
late final _sel_removeAllActionsWithTarget_ =
    objc.registerName("removeAllActionsWithTarget:");
late final _sel_registerUndoWithTarget_selector_object_ =
    objc.registerName("registerUndoWithTarget:selector:object:");
final _objc_msgSend_377 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCSelector> selector,
                ffi.Pointer<objc.ObjCObject> object)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_prepareWithInvocationTarget_ =
    objc.registerName("prepareWithInvocationTarget:");
void _ObjCBlock_ffiVoid_objcObjCObject_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_objcObjCObject_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_objcObjCObject {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_objcObjCObject_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.ObjCObjectBase) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_objcObjCObject_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(objc.ObjCObjectBase(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(objc.ObjCObjectBase) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_objcObjCObject_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) =>
            fn(objc.ObjCObjectBase(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_objcObjCObject(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_objcObjCObject_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.ObjCObjectBase arg0) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0.ref.pointer);
}

late final _sel_registerUndoWithTarget_handler_ =
    objc.registerName("registerUndoWithTarget:handler:");
final _objc_msgSend_378 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCBlockImpl> undoHandler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setActionIsDiscardable_ =
    objc.registerName("setActionIsDiscardable:");
final _objc_msgSend_379 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool discardable)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_undoActionIsDiscardable =
    objc.registerName("undoActionIsDiscardable");
late final _sel_redoActionIsDiscardable =
    objc.registerName("redoActionIsDiscardable");
late final _sel_undoActionName = objc.registerName("undoActionName");
late final _sel_redoActionName = objc.registerName("redoActionName");
late final _sel_setActionName_ = objc.registerName("setActionName:");
late final _sel_undoMenuItemTitle = objc.registerName("undoMenuItemTitle");
late final _sel_redoMenuItemTitle = objc.registerName("redoMenuItemTitle");
late final _sel_undoMenuTitleForUndoActionName_ =
    objc.registerName("undoMenuTitleForUndoActionName:");
final _objc_msgSend_380 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> actionName)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_redoMenuTitleForUndoActionName_ =
    objc.registerName("redoMenuTitleForUndoActionName:");
late final _sel_undoManager = objc.registerName("undoManager");
final _objc_msgSend_381 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIEditingInteractionConfiguration {
  UIEditingInteractionConfigurationNone(0),
  UIEditingInteractionConfigurationDefault(1);

  final int value;
  const UIEditingInteractionConfiguration(this.value);

  static UIEditingInteractionConfiguration fromValue(int value) =>
      switch (value) {
        0 => UIEditingInteractionConfigurationNone,
        1 => UIEditingInteractionConfigurationDefault,
        _ => throw ArgumentError(
            "Unknown value for UIEditingInteractionConfiguration: $value"),
      };
}

late final _sel_editingInteractionConfiguration =
    objc.registerName("editingInteractionConfiguration");
final _objc_msgSend_382 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_focusedView = objc.registerName("focusedView");
late final _sel_supportsFocus = objc.registerName("supportsFocus");
late final _sel_applicationFrame = objc.registerName("applicationFrame");
late final _sel_screen = objc.registerName("screen");

enum UIInterfaceOrientation {
  UIInterfaceOrientationUnknown(0),
  UIInterfaceOrientationPortrait(1),
  UIInterfaceOrientationPortraitUpsideDown(2),
  UIInterfaceOrientationLandscapeLeft(4),
  UIInterfaceOrientationLandscapeRight(3);

  final int value;
  const UIInterfaceOrientation(this.value);

  static UIInterfaceOrientation fromValue(int value) => switch (value) {
        0 => UIInterfaceOrientationUnknown,
        1 => UIInterfaceOrientationPortrait,
        2 => UIInterfaceOrientationPortraitUpsideDown,
        4 => UIInterfaceOrientationLandscapeLeft,
        3 => UIInterfaceOrientationLandscapeRight,
        _ => throw ArgumentError(
            "Unknown value for UIInterfaceOrientation: $value"),
      };
}

late final _sel_interfaceOrientation =
    objc.registerName("interfaceOrientation");
final _objc_msgSend_383 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIWindowSceneGeometryPreferences
class UIWindowSceneGeometryPreferences extends objc.NSObject {
  UIWindowSceneGeometryPreferences._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIWindowSceneGeometryPreferences] that points to the same underlying object as [other].
  UIWindowSceneGeometryPreferences.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIWindowSceneGeometryPreferences] that wraps the given raw object pointer.
  UIWindowSceneGeometryPreferences.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIWindowSceneGeometryPreferences].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UIWindowSceneGeometryPreferences);
  }

  /// init
  UIWindowSceneGeometryPreferences init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIWindowSceneGeometryPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIWindowSceneGeometryPreferences new1() {
    final _ret =
        _objc_msgSend_4(_class_UIWindowSceneGeometryPreferences, _sel_new);
    return UIWindowSceneGeometryPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIWindowSceneGeometryPreferences allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIWindowSceneGeometryPreferences, _sel_allocWithZone_, zone);
    return UIWindowSceneGeometryPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIWindowSceneGeometryPreferences alloc() {
    final _ret =
        _objc_msgSend_4(_class_UIWindowSceneGeometryPreferences, _sel_alloc);
    return UIWindowSceneGeometryPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIWindowSceneGeometryPreferences =
    objc.getClass("UIWindowSceneGeometryPreferences");
void _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSError)>`.
abstract final class ObjCBlock_ffiVoid_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(objc.NSError)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSError)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSError)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSError)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline)
                      .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(objc.NSError)> fromFunction(
          void Function(objc.NSError) fn) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSError)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(objc.NSError.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(objc.NSError)> listener(
      void Function(objc.NSError) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(
            objc.NSError.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(objc.NSError)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSError)>`.
extension ObjCBlock_ffiVoid_NSError_CallExtension
    on objc.ObjCBlock<ffi.Void Function(objc.NSError)> {
  void call(objc.NSError arg0) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0.ref.pointer);
}

late final _sel_requestGeometryUpdateWithPreferences_errorHandler_ =
    objc.registerName("requestGeometryUpdateWithPreferences:errorHandler:");
final _objc_msgSend_384 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> geometryPreferences,
                ffi.Pointer<objc.ObjCBlockImpl> errorHandler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// UIWindowSceneGeometry
class UIWindowSceneGeometry extends objc.NSObject {
  UIWindowSceneGeometry._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIWindowSceneGeometry] that points to the same underlying object as [other].
  UIWindowSceneGeometry.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIWindowSceneGeometry] that wraps the given raw object pointer.
  UIWindowSceneGeometry.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIWindowSceneGeometry].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIWindowSceneGeometry);
  }

  /// init
  UIWindowSceneGeometry init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIWindowSceneGeometry.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIWindowSceneGeometry new1() {
    final _ret = _objc_msgSend_4(_class_UIWindowSceneGeometry, _sel_new);
    return UIWindowSceneGeometry.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// systemFrame
  void getSystemFrame(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_systemFrame)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_systemFrame);
  }

  /// interfaceOrientation
  UIInterfaceOrientation get interfaceOrientation {
    final _ret = _objc_msgSend_383(this.ref.pointer, _sel_interfaceOrientation);
    return UIInterfaceOrientation.fromValue(_ret);
  }

  /// minimumSize
  void getMinimumSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_minimumSize)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_minimumSize);
  }

  /// maximumSize
  void getMaximumSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_maximumSize)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_maximumSize);
  }

  /// resizingRestrictions
  UIWindowSceneResizingRestrictions get resizingRestrictions {
    final _ret = _objc_msgSend_385(this.ref.pointer, _sel_resizingRestrictions);
    return UIWindowSceneResizingRestrictions.fromValue(_ret);
  }

  /// allocWithZone:
  static UIWindowSceneGeometry allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIWindowSceneGeometry, _sel_allocWithZone_, zone);
    return UIWindowSceneGeometry.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIWindowSceneGeometry alloc() {
    final _ret = _objc_msgSend_4(_class_UIWindowSceneGeometry, _sel_alloc);
    return UIWindowSceneGeometry.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIWindowSceneGeometry =
    objc.getClass("UIWindowSceneGeometry");
late final _sel_systemFrame = objc.registerName("systemFrame");
late final _sel_minimumSize = objc.registerName("minimumSize");
late final _sel_maximumSize = objc.registerName("maximumSize");

enum UIWindowSceneResizingRestrictions {
  UIWindowSceneResizingRestrictionsUnspecified(0),
  UIWindowSceneResizingRestrictionsNone(1),
  UIWindowSceneResizingRestrictionsUniform(2),
  UIWindowSceneResizingRestrictionsFreeform(3);

  final int value;
  const UIWindowSceneResizingRestrictions(this.value);

  static UIWindowSceneResizingRestrictions fromValue(int value) =>
      switch (value) {
        0 => UIWindowSceneResizingRestrictionsUnspecified,
        1 => UIWindowSceneResizingRestrictionsNone,
        2 => UIWindowSceneResizingRestrictionsUniform,
        3 => UIWindowSceneResizingRestrictionsFreeform,
        _ => throw ArgumentError(
            "Unknown value for UIWindowSceneResizingRestrictions: $value"),
      };
}

late final _sel_resizingRestrictions =
    objc.registerName("resizingRestrictions");
final _objc_msgSend_385 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_effectiveGeometry = objc.registerName("effectiveGeometry");
final _objc_msgSend_386 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UISceneSizeRestrictions
class UISceneSizeRestrictions extends objc.NSObject {
  UISceneSizeRestrictions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneSizeRestrictions] that points to the same underlying object as [other].
  UISceneSizeRestrictions.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneSizeRestrictions] that wraps the given raw object pointer.
  UISceneSizeRestrictions.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneSizeRestrictions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UISceneSizeRestrictions);
  }

  /// init
  UISceneSizeRestrictions init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneSizeRestrictions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UISceneSizeRestrictions new1() {
    final _ret = _objc_msgSend_4(_class_UISceneSizeRestrictions, _sel_new);
    return UISceneSizeRestrictions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// minimumSize
  void getMinimumSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_minimumSize)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_minimumSize);
  }

  /// setMinimumSize:
  set minimumSize(CGSize value) {
    return _objc_msgSend_100(this.ref.pointer, _sel_setMinimumSize_, value);
  }

  /// maximumSize
  void getMaximumSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_maximumSize)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_maximumSize);
  }

  /// setMaximumSize:
  set maximumSize(CGSize value) {
    return _objc_msgSend_100(this.ref.pointer, _sel_setMaximumSize_, value);
  }

  /// allowsFullScreen
  bool get allowsFullScreen {
    return _objc_msgSend_11(this.ref.pointer, _sel_allowsFullScreen);
  }

  /// setAllowsFullScreen:
  set allowsFullScreen(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setAllowsFullScreen_, value);
  }

  /// allocWithZone:
  static UISceneSizeRestrictions allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneSizeRestrictions, _sel_allocWithZone_, zone);
    return UISceneSizeRestrictions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneSizeRestrictions alloc() {
    final _ret = _objc_msgSend_4(_class_UISceneSizeRestrictions, _sel_alloc);
    return UISceneSizeRestrictions.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneSizeRestrictions =
    objc.getClass("UISceneSizeRestrictions");
late final _sel_setMinimumSize_ = objc.registerName("setMinimumSize:");
late final _sel_setMaximumSize_ = objc.registerName("setMaximumSize:");
late final _sel_allowsFullScreen = objc.registerName("allowsFullScreen");
late final _sel_setAllowsFullScreen_ =
    objc.registerName("setAllowsFullScreen:");
late final _sel_sizeRestrictions = objc.registerName("sizeRestrictions");
final _objc_msgSend_387 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_windows = objc.registerName("windows");
late final _sel_keyWindow = objc.registerName("keyWindow");
final _objc_msgSend_388 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_activityItemsConfigurationSource =
    objc.registerName("activityItemsConfigurationSource");
late final _sel_setActivityItemsConfigurationSource_ =
    objc.registerName("setActivityItemsConfigurationSource:");

/// UISceneWindowingBehaviors
class UISceneWindowingBehaviors extends objc.NSObject {
  UISceneWindowingBehaviors._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneWindowingBehaviors] that points to the same underlying object as [other].
  UISceneWindowingBehaviors.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneWindowingBehaviors] that wraps the given raw object pointer.
  UISceneWindowingBehaviors.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneWindowingBehaviors].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UISceneWindowingBehaviors);
  }

  /// init
  UISceneWindowingBehaviors init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneWindowingBehaviors.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UISceneWindowingBehaviors new1() {
    final _ret = _objc_msgSend_4(_class_UISceneWindowingBehaviors, _sel_new);
    return UISceneWindowingBehaviors.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// isClosable
  bool get closable {
    return _objc_msgSend_11(this.ref.pointer, _sel_isClosable);
  }

  /// setClosable:
  set closable(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setClosable_, value);
  }

  /// isMiniaturizable
  bool get miniaturizable {
    return _objc_msgSend_11(this.ref.pointer, _sel_isMiniaturizable);
  }

  /// setMiniaturizable:
  set miniaturizable(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setMiniaturizable_, value);
  }

  /// allocWithZone:
  static UISceneWindowingBehaviors allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneWindowingBehaviors, _sel_allocWithZone_, zone);
    return UISceneWindowingBehaviors.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneWindowingBehaviors alloc() {
    final _ret = _objc_msgSend_4(_class_UISceneWindowingBehaviors, _sel_alloc);
    return UISceneWindowingBehaviors.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneWindowingBehaviors =
    objc.getClass("UISceneWindowingBehaviors");
late final _sel_isClosable = objc.registerName("isClosable");
late final _sel_setClosable_ = objc.registerName("setClosable:");
late final _sel_isMiniaturizable = objc.registerName("isMiniaturizable");
late final _sel_setMiniaturizable_ = objc.registerName("setMiniaturizable:");
late final _sel_windowingBehaviors = objc.registerName("windowingBehaviors");
final _objc_msgSend_389 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isFullScreen = objc.registerName("isFullScreen");

/// UIScene
class UIScene extends UIResponder {
  UIScene._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIScene] that points to the same underlying object as [other].
  UIScene.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIScene] that wraps the given raw object pointer.
  UIScene.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIScene].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIScene);
  }

  /// new
  static UIScene new1() {
    final _ret = _objc_msgSend_4(_class_UIScene, _sel_new);
    return UIScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  UIScene init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithSession:connectionOptions:
  UIScene initWithSession_connectionOptions_(
      UISceneSession session, UISceneConnectionOptions connectionOptions) {
    final _ret = _objc_msgSend_546(
        this.ref.retainAndReturnPointer(),
        _sel_initWithSession_connectionOptions_,
        session.ref.pointer,
        connectionOptions.ref.pointer);
    return UIScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// session
  UISceneSession get session {
    final _ret = _objc_msgSend_547(this.ref.pointer, _sel_session);
    return UISceneSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// activationState
  UISceneActivationState get activationState {
    final _ret = _objc_msgSend_548(this.ref.pointer, _sel_activationState);
    return UISceneActivationState.fromValue(_ret);
  }

  /// openURL:options:completionHandler:
  void openURL_options_completionHandler_(
      objc.NSURL url,
      UISceneOpenExternalURLOptions? options,
      objc.ObjCBlock<ffi.Void Function(ffi.Bool)>? completion) {
    _objc_msgSend_553(
        this.ref.pointer,
        _sel_openURL_options_completionHandler_,
        url.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// title
  objc.NSString get title {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_title);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTitle:
  set title(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setTitle_, value.ref.pointer);
  }

  /// subtitle
  objc.NSString get subtitle {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_subtitle);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSubtitle:
  set subtitle(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setSubtitle_, value.ref.pointer);
  }

  /// activationConditions
  UISceneActivationConditions get activationConditions {
    final _ret = _objc_msgSend_564(this.ref.pointer, _sel_activationConditions);
    return UISceneActivationConditions.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// setActivationConditions:
  set activationConditions(UISceneActivationConditions value) {
    return _objc_msgSend_565(
        this.ref.pointer, _sel_setActivationConditions_, value.ref.pointer);
  }

  /// allocWithZone:
  static UIScene allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIScene, _sel_allocWithZone_, zone);
    return UIScene.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIScene alloc() {
    final _ret = _objc_msgSend_4(_class_UIScene, _sel_alloc);
    return UIScene.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIScene = objc.getClass("UIScene");

/// UISceneSession
class UISceneSession extends objc.NSObject {
  UISceneSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneSession] that points to the same underlying object as [other].
  UISceneSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneSession] that wraps the given raw object pointer.
  UISceneSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UISceneSession);
  }

  /// new
  static UISceneSession new1() {
    final _ret = _objc_msgSend_4(_class_UISceneSession, _sel_new);
    return UISceneSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  UISceneSession init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// scene
  UIScene? get scene {
    final _ret = _objc_msgSend_390(this.ref.pointer, _sel_scene);
    return _ret.address == 0
        ? null
        : UIScene.castFromPointer(_ret, retain: true, release: true);
  }

  /// role
  objc.NSString get role {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_role);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// configuration
  UISceneConfiguration get configuration {
    final _ret = _objc_msgSend_519(this.ref.pointer, _sel_configuration);
    return UISceneConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// persistentIdentifier
  objc.NSString get persistentIdentifier {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_persistentIdentifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// stateRestorationActivity
  NSUserActivity? get stateRestorationActivity {
    final _ret =
        _objc_msgSend_536(this.ref.pointer, _sel_stateRestorationActivity);
    return _ret.address == 0
        ? null
        : NSUserActivity.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStateRestorationActivity:
  set stateRestorationActivity(NSUserActivity? value) {
    return _objc_msgSend_537(this.ref.pointer,
        _sel_setStateRestorationActivity_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_112(this.ref.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUserInfo:
  set userInfo(objc.NSDictionary? value) {
    return _objc_msgSend_113(
        this.ref.pointer, _sel_setUserInfo_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// allocWithZone:
  static UISceneSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UISceneSession, _sel_allocWithZone_, zone);
    return UISceneSession.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UISceneSession alloc() {
    final _ret = _objc_msgSend_4(_class_UISceneSession, _sel_alloc);
    return UISceneSession.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UISceneSession = objc.getClass("UISceneSession");
late final _sel_scene = objc.registerName("scene");
final _objc_msgSend_390 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_role = objc.registerName("role");

/// UISceneConfiguration
class UISceneConfiguration extends objc.NSObject {
  UISceneConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneConfiguration] that points to the same underlying object as [other].
  UISceneConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneConfiguration] that wraps the given raw object pointer.
  UISceneConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UISceneConfiguration);
  }

  /// configurationWithName:sessionRole:
  static UISceneConfiguration configurationWithName_sessionRole_(
      objc.NSString? name, objc.NSString sessionRole) {
    final _ret = _objc_msgSend_391(
        _class_UISceneConfiguration,
        _sel_configurationWithName_sessionRole_,
        name?.ref.pointer ?? ffi.nullptr,
        sessionRole.ref.pointer);
    return UISceneConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// initWithName:sessionRole:
  UISceneConfiguration initWithName_sessionRole_(
      objc.NSString? name, objc.NSString sessionRole) {
    final _ret = _objc_msgSend_391(
        this.ref.retainAndReturnPointer(),
        _sel_initWithName_sessionRole_,
        name?.ref.pointer ?? ffi.nullptr,
        sessionRole.ref.pointer);
    return UISceneConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// name
  objc.NSString? get name {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// role
  objc.NSString get role {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_role);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sceneClass
  objc.ObjCObjectBase? get sceneClass {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_sceneClass);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setSceneClass:
  set sceneClass(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(this.ref.pointer, _sel_setSceneClass_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// delegateClass
  objc.ObjCObjectBase? get delegateClass {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegateClass);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegateClass:
  set delegateClass(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(this.ref.pointer, _sel_setDelegateClass_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// storyboard
  UIStoryboard? get storyboard {
    final _ret = _objc_msgSend_397(this.ref.pointer, _sel_storyboard);
    return _ret.address == 0
        ? null
        : UIStoryboard.castFromPointer(_ret, retain: true, release: true);
  }

  /// setStoryboard:
  set storyboard(UIStoryboard? value) {
    return _objc_msgSend_518(this.ref.pointer, _sel_setStoryboard_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// init
  UISceneConfiguration init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UISceneConfiguration new1() {
    final _ret = _objc_msgSend_4(_class_UISceneConfiguration, _sel_new);
    return UISceneConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UISceneConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UISceneConfiguration, _sel_allocWithZone_, zone);
    return UISceneConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneConfiguration alloc() {
    final _ret = _objc_msgSend_4(_class_UISceneConfiguration, _sel_alloc);
    return UISceneConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneConfiguration = objc.getClass("UISceneConfiguration");
late final _sel_configurationWithName_sessionRole_ =
    objc.registerName("configurationWithName:sessionRole:");
final _objc_msgSend_391 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> sessionRole)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_sessionRole_ =
    objc.registerName("initWithName:sessionRole:");
late final _sel_sceneClass = objc.registerName("sceneClass");
late final _sel_setSceneClass_ = objc.registerName("setSceneClass:");
late final _sel_delegateClass = objc.registerName("delegateClass");
late final _sel_setDelegateClass_ = objc.registerName("setDelegateClass:");

/// UIStoryboard
class UIStoryboard extends objc.NSObject {
  UIStoryboard._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIStoryboard] that points to the same underlying object as [other].
  UIStoryboard.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIStoryboard] that wraps the given raw object pointer.
  UIStoryboard.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIStoryboard].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIStoryboard);
  }

  /// storyboardWithName:bundle:
  static UIStoryboard storyboardWithName_bundle_(
      objc.NSString name, NSBundle? storyboardBundleOrNil) {
    final _ret = _objc_msgSend_392(
        _class_UIStoryboard,
        _sel_storyboardWithName_bundle_,
        name.ref.pointer,
        storyboardBundleOrNil?.ref.pointer ?? ffi.nullptr);
    return UIStoryboard.castFromPointer(_ret, retain: true, release: true);
  }

  /// instantiateInitialViewController
  UIViewController? instantiateInitialViewController() {
    final _ret = _objc_msgSend_411(
        this.ref.pointer, _sel_instantiateInitialViewController);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// instantiateInitialViewControllerWithCreator:
  UIViewController? instantiateInitialViewControllerWithCreator_(
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>?
          block) {
    final _ret = _objc_msgSend_515(
        this.ref.pointer,
        _sel_instantiateInitialViewControllerWithCreator_,
        block?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// instantiateViewControllerWithIdentifier:
  UIViewController instantiateViewControllerWithIdentifier_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_516(this.ref.pointer,
        _sel_instantiateViewControllerWithIdentifier_, identifier.ref.pointer);
    return UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// instantiateViewControllerWithIdentifier:creator:
  UIViewController instantiateViewControllerWithIdentifier_creator_(
      objc.NSString identifier,
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>?
          block) {
    final _ret = _objc_msgSend_517(
        this.ref.pointer,
        _sel_instantiateViewControllerWithIdentifier_creator_,
        identifier.ref.pointer,
        block?.ref.pointer ?? ffi.nullptr);
    return UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIStoryboard init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIStoryboard.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIStoryboard new1() {
    final _ret = _objc_msgSend_4(_class_UIStoryboard, _sel_new);
    return UIStoryboard.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIStoryboard allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIStoryboard, _sel_allocWithZone_, zone);
    return UIStoryboard.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIStoryboard alloc() {
    final _ret = _objc_msgSend_4(_class_UIStoryboard, _sel_alloc);
    return UIStoryboard.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIStoryboard = objc.getClass("UIStoryboard");
late final _sel_storyboardWithName_bundle_ =
    objc.registerName("storyboardWithName:bundle:");
final _objc_msgSend_392 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> name,
                ffi.Pointer<objc.ObjCObject> storyboardBundleOrNil)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// UIViewController
class UIViewController extends UIResponder {
  UIViewController._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIViewController] that points to the same underlying object as [other].
  UIViewController.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIViewController] that wraps the given raw object pointer.
  UIViewController.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIViewController].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIViewController);
  }

  /// initWithNibName:bundle:
  UIViewController initWithNibName_bundle_(
      objc.NSString? nibNameOrNil, NSBundle? nibBundleOrNil) {
    final _ret = _objc_msgSend_393(
        this.ref.retainAndReturnPointer(),
        _sel_initWithNibName_bundle_,
        nibNameOrNil?.ref.pointer ?? ffi.nullptr,
        nibBundleOrNil?.ref.pointer ?? ffi.nullptr);
    return UIViewController.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIViewController? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: false, release: true);
  }

  /// view
  UIView get view {
    final _ret = _objc_msgSend_394(this.ref.pointer, _sel_view);
    return UIView.castFromPointer(_ret, retain: true, release: true);
  }

  /// setView:
  set view(UIView value) {
    return _objc_msgSend_395(
        this.ref.pointer, _sel_setView_, value.ref.pointer);
  }

  /// loadView
  void loadView() {
    _objc_msgSend_12(this.ref.pointer, _sel_loadView);
  }

  /// loadViewIfNeeded
  void loadViewIfNeeded() {
    _objc_msgSend_12(this.ref.pointer, _sel_loadViewIfNeeded);
  }

  /// viewIfLoaded
  UIView? get viewIfLoaded {
    final _ret = _objc_msgSend_131(this.ref.pointer, _sel_viewIfLoaded);
    return _ret.address == 0
        ? null
        : UIView.castFromPointer(_ret, retain: true, release: true);
  }

  /// viewWillUnload
  void viewWillUnload() {
    _objc_msgSend_12(this.ref.pointer, _sel_viewWillUnload);
  }

  /// viewDidUnload
  void viewDidUnload() {
    _objc_msgSend_12(this.ref.pointer, _sel_viewDidUnload);
  }

  /// viewDidLoad
  void viewDidLoad() {
    _objc_msgSend_12(this.ref.pointer, _sel_viewDidLoad);
  }

  /// isViewLoaded
  bool get viewLoaded {
    return _objc_msgSend_11(this.ref.pointer, _sel_isViewLoaded);
  }

  /// nibName
  objc.NSString? get nibName {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_nibName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// nibBundle
  NSBundle? get nibBundle {
    final _ret = _objc_msgSend_396(this.ref.pointer, _sel_nibBundle);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  /// storyboard
  UIStoryboard? get storyboard {
    final _ret = _objc_msgSend_397(this.ref.pointer, _sel_storyboard);
    return _ret.address == 0
        ? null
        : UIStoryboard.castFromPointer(_ret, retain: true, release: true);
  }

  /// performSegueWithIdentifier:sender:
  void performSegueWithIdentifier_sender_(
      objc.NSString identifier, objc.ObjCObjectBase? sender) {
    _objc_msgSend_398(this.ref.pointer, _sel_performSegueWithIdentifier_sender_,
        identifier.ref.pointer, sender?.ref.pointer ?? ffi.nullptr);
  }

  /// shouldPerformSegueWithIdentifier:sender:
  bool shouldPerformSegueWithIdentifier_sender_(
      objc.NSString identifier, objc.ObjCObjectBase? sender) {
    return _objc_msgSend_399(
        this.ref.pointer,
        _sel_shouldPerformSegueWithIdentifier_sender_,
        identifier.ref.pointer,
        sender?.ref.pointer ?? ffi.nullptr);
  }

  /// prepareForSegue:sender:
  void prepareForSegue_sender_(
      UIStoryboardSegue segue, objc.ObjCObjectBase? sender) {
    _objc_msgSend_403(this.ref.pointer, _sel_prepareForSegue_sender_,
        segue.ref.pointer, sender?.ref.pointer ?? ffi.nullptr);
  }

  /// canPerformUnwindSegueAction:fromViewController:sender:
  bool canPerformUnwindSegueAction_fromViewController_sender_(
      ffi.Pointer<objc.ObjCSelector> action,
      UIViewController fromViewController,
      objc.ObjCObjectBase? sender) {
    return _objc_msgSend_404(
        this.ref.pointer,
        _sel_canPerformUnwindSegueAction_fromViewController_sender_,
        action,
        fromViewController.ref.pointer,
        sender?.ref.pointer ?? ffi.nullptr);
  }

  /// canPerformUnwindSegueAction:fromViewController:withSender:
  bool canPerformUnwindSegueAction_fromViewController_withSender_(
      ffi.Pointer<objc.ObjCSelector> action,
      UIViewController fromViewController,
      objc.ObjCObjectBase sender) {
    return _objc_msgSend_405(
        this.ref.pointer,
        _sel_canPerformUnwindSegueAction_fromViewController_withSender_,
        action,
        fromViewController.ref.pointer,
        sender.ref.pointer);
  }

  /// allowedChildViewControllersForUnwindingFromSource:
  objc.NSArray allowedChildViewControllersForUnwindingFromSource_(
      UIStoryboardUnwindSegueSource source) {
    final _ret = _objc_msgSend_406(
        this.ref.pointer,
        _sel_allowedChildViewControllersForUnwindingFromSource_,
        source.ref.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// childViewControllerContainingSegueSource:
  UIViewController? childViewControllerContainingSegueSource_(
      UIStoryboardUnwindSegueSource source) {
    final _ret = _objc_msgSend_407(this.ref.pointer,
        _sel_childViewControllerContainingSegueSource_, source.ref.pointer);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// viewControllerForUnwindSegueAction:fromViewController:withSender:
  UIViewController?
      viewControllerForUnwindSegueAction_fromViewController_withSender_(
          ffi.Pointer<objc.ObjCSelector> action,
          UIViewController fromViewController,
          objc.ObjCObjectBase? sender) {
    final _ret = _objc_msgSend_408(
        this.ref.pointer,
        _sel_viewControllerForUnwindSegueAction_fromViewController_withSender_,
        action,
        fromViewController.ref.pointer,
        sender?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// unwindForSegue:towardsViewController:
  void unwindForSegue_towardsViewController_(
      UIStoryboardSegue unwindSegue, UIViewController subsequentVC) {
    _objc_msgSend_409(
        this.ref.pointer,
        _sel_unwindForSegue_towardsViewController_,
        unwindSegue.ref.pointer,
        subsequentVC.ref.pointer);
  }

  /// segueForUnwindingToViewController:fromViewController:identifier:
  UIStoryboardSegue?
      segueForUnwindingToViewController_fromViewController_identifier_(
          UIViewController toViewController,
          UIViewController fromViewController,
          objc.NSString? identifier) {
    final _ret = _objc_msgSend_410(
        this.ref.pointer,
        _sel_segueForUnwindingToViewController_fromViewController_identifier_,
        toViewController.ref.pointer,
        fromViewController.ref.pointer,
        identifier?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIStoryboardSegue.castFromPointer(_ret, retain: true, release: true);
  }

  /// viewWillAppear:
  void viewWillAppear_(bool animated) {
    _objc_msgSend_379(this.ref.pointer, _sel_viewWillAppear_, animated);
  }

  /// viewIsAppearing:
  void viewIsAppearing_(bool animated) {
    _objc_msgSend_379(this.ref.pointer, _sel_viewIsAppearing_, animated);
  }

  /// viewDidAppear:
  void viewDidAppear_(bool animated) {
    _objc_msgSend_379(this.ref.pointer, _sel_viewDidAppear_, animated);
  }

  /// viewWillDisappear:
  void viewWillDisappear_(bool animated) {
    _objc_msgSend_379(this.ref.pointer, _sel_viewWillDisappear_, animated);
  }

  /// viewDidDisappear:
  void viewDidDisappear_(bool animated) {
    _objc_msgSend_379(this.ref.pointer, _sel_viewDidDisappear_, animated);
  }

  /// viewWillLayoutSubviews
  void viewWillLayoutSubviews() {
    _objc_msgSend_12(this.ref.pointer, _sel_viewWillLayoutSubviews);
  }

  /// viewDidLayoutSubviews
  void viewDidLayoutSubviews() {
    _objc_msgSend_12(this.ref.pointer, _sel_viewDidLayoutSubviews);
  }

  /// title
  objc.NSString? get title {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_title);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTitle:
  set title(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer, _sel_setTitle_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// didReceiveMemoryWarning
  void didReceiveMemoryWarning() {
    _objc_msgSend_12(this.ref.pointer, _sel_didReceiveMemoryWarning);
  }

  /// parentViewController
  UIViewController? get parentViewController {
    final _ret = _objc_msgSend_411(this.ref.pointer, _sel_parentViewController);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// modalViewController
  UIViewController? get modalViewController {
    final _ret = _objc_msgSend_411(this.ref.pointer, _sel_modalViewController);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// presentedViewController
  UIViewController? get presentedViewController {
    final _ret =
        _objc_msgSend_411(this.ref.pointer, _sel_presentedViewController);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// presentingViewController
  UIViewController? get presentingViewController {
    final _ret =
        _objc_msgSend_411(this.ref.pointer, _sel_presentingViewController);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// definesPresentationContext
  bool get definesPresentationContext {
    return _objc_msgSend_11(this.ref.pointer, _sel_definesPresentationContext);
  }

  /// setDefinesPresentationContext:
  set definesPresentationContext(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setDefinesPresentationContext_, value);
  }

  /// providesPresentationContextTransitionStyle
  bool get providesPresentationContextTransitionStyle {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_providesPresentationContextTransitionStyle);
  }

  /// setProvidesPresentationContextTransitionStyle:
  set providesPresentationContextTransitionStyle(bool value) {
    return _objc_msgSend_13(this.ref.pointer,
        _sel_setProvidesPresentationContextTransitionStyle_, value);
  }

  /// restoresFocusAfterTransition
  bool get restoresFocusAfterTransition {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_restoresFocusAfterTransition);
  }

  /// setRestoresFocusAfterTransition:
  set restoresFocusAfterTransition(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setRestoresFocusAfterTransition_, value);
  }

  /// focusGroupIdentifier
  objc.NSString? get focusGroupIdentifier {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_focusGroupIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFocusGroupIdentifier:
  set focusGroupIdentifier(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setFocusGroupIdentifier_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// interactionActivityTrackingBaseName
  objc.NSString? get interactionActivityTrackingBaseName {
    final _ret = _objc_msgSend_40(
        this.ref.pointer, _sel_interactionActivityTrackingBaseName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setInteractionActivityTrackingBaseName:
  set interactionActivityTrackingBaseName(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer,
        _sel_setInteractionActivityTrackingBaseName_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// isBeingPresented
  bool get beingPresented {
    return _objc_msgSend_11(this.ref.pointer, _sel_isBeingPresented);
  }

  /// isBeingDismissed
  bool get beingDismissed {
    return _objc_msgSend_11(this.ref.pointer, _sel_isBeingDismissed);
  }

  /// isMovingToParentViewController
  bool get movingToParentViewController {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_isMovingToParentViewController);
  }

  /// isMovingFromParentViewController
  bool get movingFromParentViewController {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_isMovingFromParentViewController);
  }

  /// presentViewController:animated:completion:
  void presentViewController_animated_completion_(
      UIViewController viewControllerToPresent,
      bool flag,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_412(
        this.ref.pointer,
        _sel_presentViewController_animated_completion_,
        viewControllerToPresent.ref.pointer,
        flag,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// dismissViewControllerAnimated:completion:
  void dismissViewControllerAnimated_completion_(
      bool flag, objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_413(
        this.ref.pointer,
        _sel_dismissViewControllerAnimated_completion_,
        flag,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// presentModalViewController:animated:
  void presentModalViewController_animated_(
      UIViewController modalViewController, bool animated) {
    _objc_msgSend_414(
        this.ref.pointer,
        _sel_presentModalViewController_animated_,
        modalViewController.ref.pointer,
        animated);
  }

  /// dismissModalViewControllerAnimated:
  void dismissModalViewControllerAnimated_(bool animated) {
    _objc_msgSend_379(
        this.ref.pointer, _sel_dismissModalViewControllerAnimated_, animated);
  }

  /// modalTransitionStyle
  UIModalTransitionStyle get modalTransitionStyle {
    final _ret = _objc_msgSend_415(this.ref.pointer, _sel_modalTransitionStyle);
    return UIModalTransitionStyle.fromValue(_ret);
  }

  /// setModalTransitionStyle:
  set modalTransitionStyle(UIModalTransitionStyle value) {
    return _objc_msgSend_416(
        this.ref.pointer, _sel_setModalTransitionStyle_, value.value);
  }

  /// modalPresentationStyle
  UIModalPresentationStyle get modalPresentationStyle {
    final _ret =
        _objc_msgSend_417(this.ref.pointer, _sel_modalPresentationStyle);
    return UIModalPresentationStyle.fromValue(_ret);
  }

  /// setModalPresentationStyle:
  set modalPresentationStyle(UIModalPresentationStyle value) {
    return _objc_msgSend_418(
        this.ref.pointer, _sel_setModalPresentationStyle_, value.value);
  }

  /// modalPresentationCapturesStatusBarAppearance
  bool get modalPresentationCapturesStatusBarAppearance {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_modalPresentationCapturesStatusBarAppearance);
  }

  /// setModalPresentationCapturesStatusBarAppearance:
  set modalPresentationCapturesStatusBarAppearance(bool value) {
    return _objc_msgSend_13(this.ref.pointer,
        _sel_setModalPresentationCapturesStatusBarAppearance_, value);
  }

  /// disablesAutomaticKeyboardDismissal
  bool get disablesAutomaticKeyboardDismissal {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_disablesAutomaticKeyboardDismissal);
  }

  /// wantsFullScreenLayout
  bool get wantsFullScreenLayout {
    return _objc_msgSend_11(this.ref.pointer, _sel_wantsFullScreenLayout);
  }

  /// setWantsFullScreenLayout:
  set wantsFullScreenLayout(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setWantsFullScreenLayout_, value);
  }

  /// edgesForExtendedLayout
  UIRectEdge get edgesForExtendedLayout {
    final _ret =
        _objc_msgSend_419(this.ref.pointer, _sel_edgesForExtendedLayout);
    return UIRectEdge.fromValue(_ret);
  }

  /// setEdgesForExtendedLayout:
  set edgesForExtendedLayout(UIRectEdge value) {
    return _objc_msgSend_420(
        this.ref.pointer, _sel_setEdgesForExtendedLayout_, value.value);
  }

  /// extendedLayoutIncludesOpaqueBars
  bool get extendedLayoutIncludesOpaqueBars {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_extendedLayoutIncludesOpaqueBars);
  }

  /// setExtendedLayoutIncludesOpaqueBars:
  set extendedLayoutIncludesOpaqueBars(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setExtendedLayoutIncludesOpaqueBars_, value);
  }

  /// automaticallyAdjustsScrollViewInsets
  bool get automaticallyAdjustsScrollViewInsets {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_automaticallyAdjustsScrollViewInsets);
  }

  /// setAutomaticallyAdjustsScrollViewInsets:
  set automaticallyAdjustsScrollViewInsets(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setAutomaticallyAdjustsScrollViewInsets_, value);
  }

  /// setContentScrollView:forEdge:
  void setContentScrollView_forEdge_(
      UIScrollView? scrollView, NSDirectionalRectEdge edge) {
    _objc_msgSend_508(this.ref.pointer, _sel_setContentScrollView_forEdge_,
        scrollView?.ref.pointer ?? ffi.nullptr, edge.value);
  }

  /// contentScrollViewForEdge:
  UIScrollView? contentScrollViewForEdge_(NSDirectionalRectEdge edge) {
    final _ret = _objc_msgSend_509(
        this.ref.pointer, _sel_contentScrollViewForEdge_, edge.value);
    return _ret.address == 0
        ? null
        : UIScrollView.castFromPointer(_ret, retain: true, release: true);
  }

  /// preferredContentSize
  void getPreferredContentSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(
            stret, this.ref.pointer, _sel_preferredContentSize)
        : stret.ref =
            _objc_msgSend_30(this.ref.pointer, _sel_preferredContentSize);
  }

  /// setPreferredContentSize:
  set preferredContentSize(CGSize value) {
    return _objc_msgSend_100(
        this.ref.pointer, _sel_setPreferredContentSize_, value);
  }

  /// preferredStatusBarStyle
  UIStatusBarStyle get preferredStatusBarStyle {
    final _ret =
        _objc_msgSend_510(this.ref.pointer, _sel_preferredStatusBarStyle);
    return UIStatusBarStyle.fromValue(_ret);
  }

  /// prefersStatusBarHidden
  bool get prefersStatusBarHidden {
    return _objc_msgSend_11(this.ref.pointer, _sel_prefersStatusBarHidden);
  }

  /// preferredStatusBarUpdateAnimation
  UIStatusBarAnimation get preferredStatusBarUpdateAnimation {
    final _ret = _objc_msgSend_511(
        this.ref.pointer, _sel_preferredStatusBarUpdateAnimation);
    return UIStatusBarAnimation.fromValue(_ret);
  }

  /// setNeedsStatusBarAppearanceUpdate
  void setNeedsStatusBarAppearanceUpdate() {
    _objc_msgSend_12(this.ref.pointer, _sel_setNeedsStatusBarAppearanceUpdate);
  }

  /// targetViewControllerForAction:sender:
  UIViewController? targetViewControllerForAction_sender_(
      ffi.Pointer<objc.ObjCSelector> action, objc.ObjCObjectBase? sender) {
    final _ret = _objc_msgSend_512(
        this.ref.pointer,
        _sel_targetViewControllerForAction_sender_,
        action,
        sender?.ref.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// showViewController:sender:
  void showViewController_sender_(
      UIViewController vc, objc.ObjCObjectBase? sender) {
    _objc_msgSend_513(this.ref.pointer, _sel_showViewController_sender_,
        vc.ref.pointer, sender?.ref.pointer ?? ffi.nullptr);
  }

  /// showDetailViewController:sender:
  void showDetailViewController_sender_(
      UIViewController vc, objc.ObjCObjectBase? sender) {
    _objc_msgSend_513(this.ref.pointer, _sel_showDetailViewController_sender_,
        vc.ref.pointer, sender?.ref.pointer ?? ffi.nullptr);
  }

  /// preferredUserInterfaceStyle
  UIUserInterfaceStyle get preferredUserInterfaceStyle {
    final _ret =
        _objc_msgSend_148(this.ref.pointer, _sel_preferredUserInterfaceStyle);
    return UIUserInterfaceStyle.fromValue(_ret);
  }

  /// setNeedsUserInterfaceAppearanceUpdate
  void setNeedsUserInterfaceAppearanceUpdate() {
    _objc_msgSend_12(
        this.ref.pointer, _sel_setNeedsUserInterfaceAppearanceUpdate);
  }

  /// overrideUserInterfaceStyle
  UIUserInterfaceStyle get overrideUserInterfaceStyle {
    final _ret =
        _objc_msgSend_148(this.ref.pointer, _sel_overrideUserInterfaceStyle);
    return UIUserInterfaceStyle.fromValue(_ret);
  }

  /// setOverrideUserInterfaceStyle:
  set overrideUserInterfaceStyle(UIUserInterfaceStyle value) {
    return _objc_msgSend_514(
        this.ref.pointer, _sel_setOverrideUserInterfaceStyle_, value.value);
  }

  /// init
  UIViewController init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIViewController.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIViewController new1() {
    final _ret = _objc_msgSend_4(_class_UIViewController, _sel_new);
    return UIViewController.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIViewController allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIViewController, _sel_allocWithZone_, zone);
    return UIViewController.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIViewController alloc() {
    final _ret = _objc_msgSend_4(_class_UIViewController, _sel_alloc);
    return UIViewController.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIViewController = objc.getClass("UIViewController");
late final _sel_initWithNibName_bundle_ =
    objc.registerName("initWithNibName:bundle:");
final _objc_msgSend_393 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> nibNameOrNil,
                ffi.Pointer<objc.ObjCObject> nibBundleOrNil)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_394 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setView_ = objc.registerName("setView:");
final _objc_msgSend_395 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_loadView = objc.registerName("loadView");
late final _sel_loadViewIfNeeded = objc.registerName("loadViewIfNeeded");
late final _sel_viewIfLoaded = objc.registerName("viewIfLoaded");
late final _sel_viewWillUnload = objc.registerName("viewWillUnload");
late final _sel_viewDidUnload = objc.registerName("viewDidUnload");
late final _sel_viewDidLoad = objc.registerName("viewDidLoad");
late final _sel_isViewLoaded = objc.registerName("isViewLoaded");
late final _sel_nibName = objc.registerName("nibName");
late final _sel_nibBundle = objc.registerName("nibBundle");
final _objc_msgSend_396 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_storyboard = objc.registerName("storyboard");
final _objc_msgSend_397 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_performSegueWithIdentifier_sender_ =
    objc.registerName("performSegueWithIdentifier:sender:");
final _objc_msgSend_398 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shouldPerformSegueWithIdentifier_sender_ =
    objc.registerName("shouldPerformSegueWithIdentifier:sender:");
final _objc_msgSend_399 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// UIStoryboardSegue
class UIStoryboardSegue extends objc.NSObject {
  UIStoryboardSegue._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIStoryboardSegue] that points to the same underlying object as [other].
  UIStoryboardSegue.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIStoryboardSegue] that wraps the given raw object pointer.
  UIStoryboardSegue.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIStoryboardSegue].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIStoryboardSegue);
  }

  /// segueWithIdentifier:source:destination:performHandler:
  static UIStoryboardSegue
      segueWithIdentifier_source_destination_performHandler_(
          objc.NSString? identifier,
          UIViewController source,
          UIViewController destination,
          objc.ObjCBlock<ffi.Void Function()> performHandler) {
    final _ret = _objc_msgSend_400(
        _class_UIStoryboardSegue,
        _sel_segueWithIdentifier_source_destination_performHandler_,
        identifier?.ref.pointer ?? ffi.nullptr,
        source.ref.pointer,
        destination.ref.pointer,
        performHandler.ref.pointer);
    return UIStoryboardSegue.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithIdentifier:source:destination:
  UIStoryboardSegue initWithIdentifier_source_destination_(
      objc.NSString? identifier,
      UIViewController source,
      UIViewController destination) {
    final _ret = _objc_msgSend_401(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_source_destination_,
        identifier?.ref.pointer ?? ffi.nullptr,
        source.ref.pointer,
        destination.ref.pointer);
    return UIStoryboardSegue.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIStoryboardSegue init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIStoryboardSegue.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// identifier
  objc.NSString? get identifier {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceViewController
  UIViewController get sourceViewController {
    final _ret = _objc_msgSend_402(this.ref.pointer, _sel_sourceViewController);
    return UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// destinationViewController
  UIViewController get destinationViewController {
    final _ret =
        _objc_msgSend_402(this.ref.pointer, _sel_destinationViewController);
    return UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// perform
  void perform() {
    _objc_msgSend_12(this.ref.pointer, _sel_perform);
  }

  /// new
  static UIStoryboardSegue new1() {
    final _ret = _objc_msgSend_4(_class_UIStoryboardSegue, _sel_new);
    return UIStoryboardSegue.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIStoryboardSegue allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIStoryboardSegue, _sel_allocWithZone_, zone);
    return UIStoryboardSegue.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIStoryboardSegue alloc() {
    final _ret = _objc_msgSend_4(_class_UIStoryboardSegue, _sel_alloc);
    return UIStoryboardSegue.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIStoryboardSegue = objc.getClass("UIStoryboardSegue");
void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    (objc.getBlockClosure(block) as void Function())();

/// Construction methods for `objc.ObjCBlock<ffi.Void Function()>`.
abstract final class ObjCBlock_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function()> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function()>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function()> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_ffiVoid_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function()> fromFunction(void Function() fn) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_ffiVoid_closureTrampoline)
                  .cast(),
              () => fn()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function()> listener(void Function() fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>)>.listener(
                _ObjCBlock_ffiVoid_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        () => fn());
    return objc.ObjCBlock<ffi.Void Function()>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function()>`.
extension ObjCBlock_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Void Function()> {
  void call() => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>)>()(
        ref.pointer,
      );
}

late final _sel_segueWithIdentifier_source_destination_performHandler_ =
    objc.registerName("segueWithIdentifier:source:destination:performHandler:");
final _objc_msgSend_400 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.Pointer<objc.ObjCObject> source,
                ffi.Pointer<objc.ObjCObject> destination,
                ffi.Pointer<objc.ObjCBlockImpl> performHandler)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_initWithIdentifier_source_destination_ =
    objc.registerName("initWithIdentifier:source:destination:");
final _objc_msgSend_401 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.Pointer<objc.ObjCObject> source,
                ffi.Pointer<objc.ObjCObject> destination)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_identifier = objc.registerName("identifier");
late final _sel_sourceViewController =
    objc.registerName("sourceViewController");
final _objc_msgSend_402 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_destinationViewController =
    objc.registerName("destinationViewController");
late final _sel_perform = objc.registerName("perform");
late final _sel_prepareForSegue_sender_ =
    objc.registerName("prepareForSegue:sender:");
final _objc_msgSend_403 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> segue,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_canPerformUnwindSegueAction_fromViewController_sender_ =
    objc.registerName("canPerformUnwindSegueAction:fromViewController:sender:");
final _objc_msgSend_404 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> fromViewController,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_canPerformUnwindSegueAction_fromViewController_withSender_ =
    objc.registerName(
        "canPerformUnwindSegueAction:fromViewController:withSender:");
final _objc_msgSend_405 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> fromViewController,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// UIStoryboardUnwindSegueSource
class UIStoryboardUnwindSegueSource extends objc.NSObject {
  UIStoryboardUnwindSegueSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIStoryboardUnwindSegueSource] that points to the same underlying object as [other].
  UIStoryboardUnwindSegueSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIStoryboardUnwindSegueSource] that wraps the given raw object pointer.
  UIStoryboardUnwindSegueSource.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIStoryboardUnwindSegueSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UIStoryboardUnwindSegueSource);
  }

  /// init
  UIStoryboardUnwindSegueSource init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIStoryboardUnwindSegueSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// sourceViewController
  UIViewController get sourceViewController {
    final _ret = _objc_msgSend_402(this.ref.pointer, _sel_sourceViewController);
    return UIViewController.castFromPointer(_ret, retain: true, release: true);
  }

  /// unwindAction
  ffi.Pointer<objc.ObjCSelector> get unwindAction {
    return _objc_msgSend_368(this.ref.pointer, _sel_unwindAction);
  }

  /// sender
  objc.ObjCObjectBase? get sender {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_sender);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// new
  static UIStoryboardUnwindSegueSource new1() {
    final _ret =
        _objc_msgSend_4(_class_UIStoryboardUnwindSegueSource, _sel_new);
    return UIStoryboardUnwindSegueSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIStoryboardUnwindSegueSource allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIStoryboardUnwindSegueSource, _sel_allocWithZone_, zone);
    return UIStoryboardUnwindSegueSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIStoryboardUnwindSegueSource alloc() {
    final _ret =
        _objc_msgSend_4(_class_UIStoryboardUnwindSegueSource, _sel_alloc);
    return UIStoryboardUnwindSegueSource.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIStoryboardUnwindSegueSource =
    objc.getClass("UIStoryboardUnwindSegueSource");
late final _sel_unwindAction = objc.registerName("unwindAction");
late final _sel_sender = objc.registerName("sender");
late final _sel_allowedChildViewControllersForUnwindingFromSource_ =
    objc.registerName("allowedChildViewControllersForUnwindingFromSource:");
final _objc_msgSend_406 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> source)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_childViewControllerContainingSegueSource_ =
    objc.registerName("childViewControllerContainingSegueSource:");
final _objc_msgSend_407 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> source)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_viewControllerForUnwindSegueAction_fromViewController_withSender_ =
    objc.registerName(
        "viewControllerForUnwindSegueAction:fromViewController:withSender:");
final _objc_msgSend_408 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> fromViewController,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_unwindForSegue_towardsViewController_ =
    objc.registerName("unwindForSegue:towardsViewController:");
final _objc_msgSend_409 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> unwindSegue,
                ffi.Pointer<objc.ObjCObject> subsequentVC)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_segueForUnwindingToViewController_fromViewController_identifier_ =
    objc.registerName(
        "segueForUnwindingToViewController:fromViewController:identifier:");
final _objc_msgSend_410 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> toViewController,
                ffi.Pointer<objc.ObjCObject> fromViewController,
                ffi.Pointer<objc.ObjCObject> identifier)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_viewWillAppear_ = objc.registerName("viewWillAppear:");
late final _sel_viewIsAppearing_ = objc.registerName("viewIsAppearing:");
late final _sel_viewDidAppear_ = objc.registerName("viewDidAppear:");
late final _sel_viewWillDisappear_ = objc.registerName("viewWillDisappear:");
late final _sel_viewDidDisappear_ = objc.registerName("viewDidDisappear:");
late final _sel_viewWillLayoutSubviews =
    objc.registerName("viewWillLayoutSubviews");
late final _sel_viewDidLayoutSubviews =
    objc.registerName("viewDidLayoutSubviews");
late final _sel_didReceiveMemoryWarning =
    objc.registerName("didReceiveMemoryWarning");
late final _sel_parentViewController =
    objc.registerName("parentViewController");
final _objc_msgSend_411 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_modalViewController = objc.registerName("modalViewController");
late final _sel_presentedViewController =
    objc.registerName("presentedViewController");
late final _sel_presentingViewController =
    objc.registerName("presentingViewController");
late final _sel_definesPresentationContext =
    objc.registerName("definesPresentationContext");
late final _sel_setDefinesPresentationContext_ =
    objc.registerName("setDefinesPresentationContext:");
late final _sel_providesPresentationContextTransitionStyle =
    objc.registerName("providesPresentationContextTransitionStyle");
late final _sel_setProvidesPresentationContextTransitionStyle_ =
    objc.registerName("setProvidesPresentationContextTransitionStyle:");
late final _sel_restoresFocusAfterTransition =
    objc.registerName("restoresFocusAfterTransition");
late final _sel_setRestoresFocusAfterTransition_ =
    objc.registerName("setRestoresFocusAfterTransition:");
late final _sel_interactionActivityTrackingBaseName =
    objc.registerName("interactionActivityTrackingBaseName");
late final _sel_setInteractionActivityTrackingBaseName_ =
    objc.registerName("setInteractionActivityTrackingBaseName:");
late final _sel_isBeingPresented = objc.registerName("isBeingPresented");
late final _sel_isBeingDismissed = objc.registerName("isBeingDismissed");
late final _sel_isMovingToParentViewController =
    objc.registerName("isMovingToParentViewController");
late final _sel_isMovingFromParentViewController =
    objc.registerName("isMovingFromParentViewController");
late final _sel_presentViewController_animated_completion_ =
    objc.registerName("presentViewController:animated:completion:");
final _objc_msgSend_412 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> viewControllerToPresent,
                ffi.Bool flag,
                ffi.Pointer<objc.ObjCBlockImpl> completion)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_dismissViewControllerAnimated_completion_ =
    objc.registerName("dismissViewControllerAnimated:completion:");
final _objc_msgSend_413 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool flag,
                ffi.Pointer<objc.ObjCBlockImpl> completion)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_presentModalViewController_animated_ =
    objc.registerName("presentModalViewController:animated:");
final _objc_msgSend_414 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> modalViewController,
                ffi.Bool animated)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_dismissModalViewControllerAnimated_ =
    objc.registerName("dismissModalViewControllerAnimated:");

enum UIModalTransitionStyle {
  UIModalTransitionStyleCoverVertical(0),
  UIModalTransitionStyleFlipHorizontal(1),
  UIModalTransitionStyleCrossDissolve(2),
  UIModalTransitionStylePartialCurl(3);

  final int value;
  const UIModalTransitionStyle(this.value);

  static UIModalTransitionStyle fromValue(int value) => switch (value) {
        0 => UIModalTransitionStyleCoverVertical,
        1 => UIModalTransitionStyleFlipHorizontal,
        2 => UIModalTransitionStyleCrossDissolve,
        3 => UIModalTransitionStylePartialCurl,
        _ => throw ArgumentError(
            "Unknown value for UIModalTransitionStyle: $value"),
      };
}

late final _sel_modalTransitionStyle =
    objc.registerName("modalTransitionStyle");
final _objc_msgSend_415 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setModalTransitionStyle_ =
    objc.registerName("setModalTransitionStyle:");
final _objc_msgSend_416 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum UIModalPresentationStyle {
  UIModalPresentationFullScreen(0),
  UIModalPresentationPageSheet(1),
  UIModalPresentationFormSheet(2),
  UIModalPresentationCurrentContext(3),
  UIModalPresentationCustom(4),
  UIModalPresentationOverFullScreen(5),
  UIModalPresentationOverCurrentContext(6),
  UIModalPresentationPopover(7),
  UIModalPresentationBlurOverFullScreen(8),
  UIModalPresentationNone(-1),
  UIModalPresentationAutomatic(-2);

  final int value;
  const UIModalPresentationStyle(this.value);

  static UIModalPresentationStyle fromValue(int value) => switch (value) {
        0 => UIModalPresentationFullScreen,
        1 => UIModalPresentationPageSheet,
        2 => UIModalPresentationFormSheet,
        3 => UIModalPresentationCurrentContext,
        4 => UIModalPresentationCustom,
        5 => UIModalPresentationOverFullScreen,
        6 => UIModalPresentationOverCurrentContext,
        7 => UIModalPresentationPopover,
        8 => UIModalPresentationBlurOverFullScreen,
        -1 => UIModalPresentationNone,
        -2 => UIModalPresentationAutomatic,
        _ => throw ArgumentError(
            "Unknown value for UIModalPresentationStyle: $value"),
      };
}

late final _sel_modalPresentationStyle =
    objc.registerName("modalPresentationStyle");
final _objc_msgSend_417 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setModalPresentationStyle_ =
    objc.registerName("setModalPresentationStyle:");
final _objc_msgSend_418 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_modalPresentationCapturesStatusBarAppearance =
    objc.registerName("modalPresentationCapturesStatusBarAppearance");
late final _sel_setModalPresentationCapturesStatusBarAppearance_ =
    objc.registerName("setModalPresentationCapturesStatusBarAppearance:");
late final _sel_disablesAutomaticKeyboardDismissal =
    objc.registerName("disablesAutomaticKeyboardDismissal");
late final _sel_wantsFullScreenLayout =
    objc.registerName("wantsFullScreenLayout");
late final _sel_setWantsFullScreenLayout_ =
    objc.registerName("setWantsFullScreenLayout:");

enum UIRectEdge {
  UIRectEdgeNone(0),
  UIRectEdgeTop(1),
  UIRectEdgeLeft(2),
  UIRectEdgeBottom(4),
  UIRectEdgeRight(8),
  UIRectEdgeAll(15);

  final int value;
  const UIRectEdge(this.value);

  static UIRectEdge fromValue(int value) => switch (value) {
        0 => UIRectEdgeNone,
        1 => UIRectEdgeTop,
        2 => UIRectEdgeLeft,
        4 => UIRectEdgeBottom,
        8 => UIRectEdgeRight,
        15 => UIRectEdgeAll,
        _ => throw ArgumentError("Unknown value for UIRectEdge: $value"),
      };
}

late final _sel_edgesForExtendedLayout =
    objc.registerName("edgesForExtendedLayout");
final _objc_msgSend_419 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEdgesForExtendedLayout_ =
    objc.registerName("setEdgesForExtendedLayout:");
final _objc_msgSend_420 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_extendedLayoutIncludesOpaqueBars =
    objc.registerName("extendedLayoutIncludesOpaqueBars");
late final _sel_setExtendedLayoutIncludesOpaqueBars_ =
    objc.registerName("setExtendedLayoutIncludesOpaqueBars:");
late final _sel_automaticallyAdjustsScrollViewInsets =
    objc.registerName("automaticallyAdjustsScrollViewInsets");
late final _sel_setAutomaticallyAdjustsScrollViewInsets_ =
    objc.registerName("setAutomaticallyAdjustsScrollViewInsets:");

/// UIScrollView
class UIScrollView extends UIView {
  UIScrollView._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIScrollView] that points to the same underlying object as [other].
  UIScrollView.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIScrollView] that wraps the given raw object pointer.
  UIScrollView.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIScrollView].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIScrollView);
  }

  /// contentOffset
  void getContentOffset(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_70Stret(stret, this.ref.pointer, _sel_contentOffset)
        : stret.ref = _objc_msgSend_70(this.ref.pointer, _sel_contentOffset);
  }

  /// setContentOffset:
  set contentOffset(CGPoint value) {
    return _objc_msgSend_71(this.ref.pointer, _sel_setContentOffset_, value);
  }

  /// contentSize
  void getContentSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_30Stret(stret, this.ref.pointer, _sel_contentSize)
        : stret.ref = _objc_msgSend_30(this.ref.pointer, _sel_contentSize);
  }

  /// setContentSize:
  set contentSize(CGSize value) {
    return _objc_msgSend_100(this.ref.pointer, _sel_setContentSize_, value);
  }

  /// contentInset
  void getContentInset(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(stret, this.ref.pointer, _sel_contentInset)
        : stret.ref = _objc_msgSend_35(this.ref.pointer, _sel_contentInset);
  }

  /// setContentInset:
  set contentInset(UIEdgeInsets value) {
    return _objc_msgSend_421(this.ref.pointer, _sel_setContentInset_, value);
  }

  /// contentAlignmentPoint
  void getContentAlignmentPoint(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_70Stret(
            stret, this.ref.pointer, _sel_contentAlignmentPoint)
        : stret.ref =
            _objc_msgSend_70(this.ref.pointer, _sel_contentAlignmentPoint);
  }

  /// setContentAlignmentPoint:
  set contentAlignmentPoint(CGPoint value) {
    return _objc_msgSend_71(
        this.ref.pointer, _sel_setContentAlignmentPoint_, value);
  }

  /// adjustedContentInset
  void getAdjustedContentInset(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(
            stret, this.ref.pointer, _sel_adjustedContentInset)
        : stret.ref =
            _objc_msgSend_35(this.ref.pointer, _sel_adjustedContentInset);
  }

  /// adjustedContentInsetDidChange
  void adjustedContentInsetDidChange() {
    _objc_msgSend_12(this.ref.pointer, _sel_adjustedContentInsetDidChange);
  }

  /// contentInsetAdjustmentBehavior
  UIScrollViewContentInsetAdjustmentBehavior
      get contentInsetAdjustmentBehavior {
    final _ret = _objc_msgSend_422(
        this.ref.pointer, _sel_contentInsetAdjustmentBehavior);
    return UIScrollViewContentInsetAdjustmentBehavior.fromValue(_ret);
  }

  /// setContentInsetAdjustmentBehavior:
  set contentInsetAdjustmentBehavior(
      UIScrollViewContentInsetAdjustmentBehavior value) {
    return _objc_msgSend_423(
        this.ref.pointer, _sel_setContentInsetAdjustmentBehavior_, value.value);
  }

  /// automaticallyAdjustsScrollIndicatorInsets
  bool get automaticallyAdjustsScrollIndicatorInsets {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_automaticallyAdjustsScrollIndicatorInsets);
  }

  /// setAutomaticallyAdjustsScrollIndicatorInsets:
  set automaticallyAdjustsScrollIndicatorInsets(bool value) {
    return _objc_msgSend_13(this.ref.pointer,
        _sel_setAutomaticallyAdjustsScrollIndicatorInsets_, value);
  }

  /// contentLayoutGuide
  UILayoutGuide get contentLayoutGuide {
    final _ret = _objc_msgSend_442(this.ref.pointer, _sel_contentLayoutGuide);
    return UILayoutGuide.castFromPointer(_ret, retain: true, release: true);
  }

  /// frameLayoutGuide
  UILayoutGuide get frameLayoutGuide {
    final _ret = _objc_msgSend_442(this.ref.pointer, _sel_frameLayoutGuide);
    return UILayoutGuide.castFromPointer(_ret, retain: true, release: true);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// isDirectionalLockEnabled
  bool get directionalLockEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isDirectionalLockEnabled);
  }

  /// setDirectionalLockEnabled:
  set directionalLockEnabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setDirectionalLockEnabled_, value);
  }

  /// bounces
  bool get bounces {
    return _objc_msgSend_11(this.ref.pointer, _sel_bounces);
  }

  /// setBounces:
  set bounces(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setBounces_, value);
  }

  /// bouncesHorizontally
  bool get bouncesHorizontally {
    return _objc_msgSend_11(this.ref.pointer, _sel_bouncesHorizontally);
  }

  /// setBouncesHorizontally:
  set bouncesHorizontally(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setBouncesHorizontally_, value);
  }

  /// bouncesVertically
  bool get bouncesVertically {
    return _objc_msgSend_11(this.ref.pointer, _sel_bouncesVertically);
  }

  /// setBouncesVertically:
  set bouncesVertically(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setBouncesVertically_, value);
  }

  /// alwaysBounceVertical
  bool get alwaysBounceVertical {
    return _objc_msgSend_11(this.ref.pointer, _sel_alwaysBounceVertical);
  }

  /// setAlwaysBounceVertical:
  set alwaysBounceVertical(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setAlwaysBounceVertical_, value);
  }

  /// alwaysBounceHorizontal
  bool get alwaysBounceHorizontal {
    return _objc_msgSend_11(this.ref.pointer, _sel_alwaysBounceHorizontal);
  }

  /// setAlwaysBounceHorizontal:
  set alwaysBounceHorizontal(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setAlwaysBounceHorizontal_, value);
  }

  /// isPagingEnabled
  bool get pagingEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isPagingEnabled);
  }

  /// setPagingEnabled:
  set pagingEnabled(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setPagingEnabled_, value);
  }

  /// isScrollEnabled
  bool get scrollEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isScrollEnabled);
  }

  /// setScrollEnabled:
  set scrollEnabled(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setScrollEnabled_, value);
  }

  /// transfersHorizontalScrollingToParent
  bool get transfersHorizontalScrollingToParent {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_transfersHorizontalScrollingToParent);
  }

  /// setTransfersHorizontalScrollingToParent:
  set transfersHorizontalScrollingToParent(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setTransfersHorizontalScrollingToParent_, value);
  }

  /// transfersVerticalScrollingToParent
  bool get transfersVerticalScrollingToParent {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_transfersVerticalScrollingToParent);
  }

  /// setTransfersVerticalScrollingToParent:
  set transfersVerticalScrollingToParent(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setTransfersVerticalScrollingToParent_, value);
  }

  /// showsVerticalScrollIndicator
  bool get showsVerticalScrollIndicator {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_showsVerticalScrollIndicator);
  }

  /// setShowsVerticalScrollIndicator:
  set showsVerticalScrollIndicator(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setShowsVerticalScrollIndicator_, value);
  }

  /// showsHorizontalScrollIndicator
  bool get showsHorizontalScrollIndicator {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_showsHorizontalScrollIndicator);
  }

  /// setShowsHorizontalScrollIndicator:
  set showsHorizontalScrollIndicator(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setShowsHorizontalScrollIndicator_, value);
  }

  /// indicatorStyle
  UIScrollViewIndicatorStyle get indicatorStyle {
    final _ret = _objc_msgSend_443(this.ref.pointer, _sel_indicatorStyle);
    return UIScrollViewIndicatorStyle.fromValue(_ret);
  }

  /// setIndicatorStyle:
  set indicatorStyle(UIScrollViewIndicatorStyle value) {
    return _objc_msgSend_444(
        this.ref.pointer, _sel_setIndicatorStyle_, value.value);
  }

  /// verticalScrollIndicatorInsets
  void getVerticalScrollIndicatorInsets(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(
            stret, this.ref.pointer, _sel_verticalScrollIndicatorInsets)
        : stret.ref = _objc_msgSend_35(
            this.ref.pointer, _sel_verticalScrollIndicatorInsets);
  }

  /// setVerticalScrollIndicatorInsets:
  set verticalScrollIndicatorInsets(UIEdgeInsets value) {
    return _objc_msgSend_421(
        this.ref.pointer, _sel_setVerticalScrollIndicatorInsets_, value);
  }

  /// horizontalScrollIndicatorInsets
  void getHorizontalScrollIndicatorInsets(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(
            stret, this.ref.pointer, _sel_horizontalScrollIndicatorInsets)
        : stret.ref = _objc_msgSend_35(
            this.ref.pointer, _sel_horizontalScrollIndicatorInsets);
  }

  /// setHorizontalScrollIndicatorInsets:
  set horizontalScrollIndicatorInsets(UIEdgeInsets value) {
    return _objc_msgSend_421(
        this.ref.pointer, _sel_setHorizontalScrollIndicatorInsets_, value);
  }

  /// scrollIndicatorInsets
  void getScrollIndicatorInsets(ffi.Pointer<UIEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_35Stret(
            stret, this.ref.pointer, _sel_scrollIndicatorInsets)
        : stret.ref =
            _objc_msgSend_35(this.ref.pointer, _sel_scrollIndicatorInsets);
  }

  /// setScrollIndicatorInsets:
  set scrollIndicatorInsets(UIEdgeInsets value) {
    return _objc_msgSend_421(
        this.ref.pointer, _sel_setScrollIndicatorInsets_, value);
  }

  /// decelerationRate
  double get decelerationRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_decelerationRate)
        : _objc_msgSend_24(this.ref.pointer, _sel_decelerationRate);
  }

  /// setDecelerationRate:
  set decelerationRate(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setDecelerationRate_, value);
  }

  /// indexDisplayMode
  UIScrollViewIndexDisplayMode get indexDisplayMode {
    final _ret = _objc_msgSend_445(this.ref.pointer, _sel_indexDisplayMode);
    return UIScrollViewIndexDisplayMode.fromValue(_ret);
  }

  /// setIndexDisplayMode:
  set indexDisplayMode(UIScrollViewIndexDisplayMode value) {
    return _objc_msgSend_446(
        this.ref.pointer, _sel_setIndexDisplayMode_, value.value);
  }

  /// setContentOffset:animated:
  void setContentOffset_animated_(CGPoint contentOffset, bool animated) {
    _objc_msgSend_447(this.ref.pointer, _sel_setContentOffset_animated_,
        contentOffset, animated);
  }

  /// scrollRectToVisible:animated:
  void scrollRectToVisible_animated_(CGRect rect, bool animated) {
    _objc_msgSend_448(
        this.ref.pointer, _sel_scrollRectToVisible_animated_, rect, animated);
  }

  /// flashScrollIndicators
  void flashScrollIndicators() {
    _objc_msgSend_12(this.ref.pointer, _sel_flashScrollIndicators);
  }

  /// withScrollIndicatorsShownForContentOffsetChanges:
  void withScrollIndicatorsShownForContentOffsetChanges_(
      objc.ObjCBlock<ffi.Void Function()> changes) {
    _objc_msgSend_449(
        this.ref.pointer,
        _sel_withScrollIndicatorsShownForContentOffsetChanges_,
        changes.ref.pointer);
  }

  /// isTracking
  bool get tracking {
    return _objc_msgSend_11(this.ref.pointer, _sel_isTracking);
  }

  /// isDragging
  bool get dragging {
    return _objc_msgSend_11(this.ref.pointer, _sel_isDragging);
  }

  /// isDecelerating
  bool get decelerating {
    return _objc_msgSend_11(this.ref.pointer, _sel_isDecelerating);
  }

  /// isScrollAnimating
  bool get scrollAnimating {
    return _objc_msgSend_11(this.ref.pointer, _sel_isScrollAnimating);
  }

  /// delaysContentTouches
  bool get delaysContentTouches {
    return _objc_msgSend_11(this.ref.pointer, _sel_delaysContentTouches);
  }

  /// setDelaysContentTouches:
  set delaysContentTouches(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setDelaysContentTouches_, value);
  }

  /// canCancelContentTouches
  bool get canCancelContentTouches {
    return _objc_msgSend_11(this.ref.pointer, _sel_canCancelContentTouches);
  }

  /// setCanCancelContentTouches:
  set canCancelContentTouches(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setCanCancelContentTouches_, value);
  }

  /// touchesShouldBegin:withEvent:inContentView:
  bool touchesShouldBegin_withEvent_inContentView_(
      objc.ObjCObjectBase touches, UIEvent? event, UIView view) {
    return _objc_msgSend_450(
        this.ref.pointer,
        _sel_touchesShouldBegin_withEvent_inContentView_,
        touches.ref.pointer,
        event?.ref.pointer ?? ffi.nullptr,
        view.ref.pointer);
  }

  /// touchesShouldCancelInContentView:
  bool touchesShouldCancelInContentView_(UIView view) {
    return _objc_msgSend_451(this.ref.pointer,
        _sel_touchesShouldCancelInContentView_, view.ref.pointer);
  }

  /// minimumZoomScale
  double get minimumZoomScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_minimumZoomScale)
        : _objc_msgSend_24(this.ref.pointer, _sel_minimumZoomScale);
  }

  /// setMinimumZoomScale:
  set minimumZoomScale(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setMinimumZoomScale_, value);
  }

  /// maximumZoomScale
  double get maximumZoomScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_maximumZoomScale)
        : _objc_msgSend_24(this.ref.pointer, _sel_maximumZoomScale);
  }

  /// setMaximumZoomScale:
  set maximumZoomScale(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setMaximumZoomScale_, value);
  }

  /// zoomScale
  double get zoomScale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_zoomScale)
        : _objc_msgSend_24(this.ref.pointer, _sel_zoomScale);
  }

  /// setZoomScale:
  set zoomScale(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setZoomScale_, value);
  }

  /// setZoomScale:animated:
  void setZoomScale_animated_(double scale, bool animated) {
    _objc_msgSend_452(
        this.ref.pointer, _sel_setZoomScale_animated_, scale, animated);
  }

  /// zoomToRect:animated:
  void zoomToRect_animated_(CGRect rect, bool animated) {
    _objc_msgSend_448(
        this.ref.pointer, _sel_zoomToRect_animated_, rect, animated);
  }

  /// bouncesZoom
  bool get bouncesZoom {
    return _objc_msgSend_11(this.ref.pointer, _sel_bouncesZoom);
  }

  /// setBouncesZoom:
  set bouncesZoom(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setBouncesZoom_, value);
  }

  /// isZooming
  bool get zooming {
    return _objc_msgSend_11(this.ref.pointer, _sel_isZooming);
  }

  /// isZoomBouncing
  bool get zoomBouncing {
    return _objc_msgSend_11(this.ref.pointer, _sel_isZoomBouncing);
  }

  /// isZoomAnimating
  bool get zoomAnimating {
    return _objc_msgSend_11(this.ref.pointer, _sel_isZoomAnimating);
  }

  /// scrollsToTop
  bool get scrollsToTop {
    return _objc_msgSend_11(this.ref.pointer, _sel_scrollsToTop);
  }

  /// setScrollsToTop:
  set scrollsToTop(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setScrollsToTop_, value);
  }

  /// stopScrollingAndZooming
  void stopScrollingAndZooming() {
    _objc_msgSend_12(this.ref.pointer, _sel_stopScrollingAndZooming);
  }

  /// panGestureRecognizer
  UIPanGestureRecognizer get panGestureRecognizer {
    final _ret = _objc_msgSend_456(this.ref.pointer, _sel_panGestureRecognizer);
    return UIPanGestureRecognizer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// pinchGestureRecognizer
  UIPinchGestureRecognizer? get pinchGestureRecognizer {
    final _ret =
        _objc_msgSend_457(this.ref.pointer, _sel_pinchGestureRecognizer);
    return _ret.address == 0
        ? null
        : UIPinchGestureRecognizer.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// directionalPressGestureRecognizer
  UIGestureRecognizer get directionalPressGestureRecognizer {
    final _ret = _objc_msgSend_458(
        this.ref.pointer, _sel_directionalPressGestureRecognizer);
    return UIGestureRecognizer.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// keyboardDismissMode
  UIScrollViewKeyboardDismissMode get keyboardDismissMode {
    final _ret = _objc_msgSend_459(this.ref.pointer, _sel_keyboardDismissMode);
    return UIScrollViewKeyboardDismissMode.fromValue(_ret);
  }

  /// setKeyboardDismissMode:
  set keyboardDismissMode(UIScrollViewKeyboardDismissMode value) {
    return _objc_msgSend_460(
        this.ref.pointer, _sel_setKeyboardDismissMode_, value.value);
  }

  /// refreshControl
  UIRefreshControl? get refreshControl {
    final _ret = _objc_msgSend_506(this.ref.pointer, _sel_refreshControl);
    return _ret.address == 0
        ? null
        : UIRefreshControl.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRefreshControl:
  set refreshControl(UIRefreshControl? value) {
    return _objc_msgSend_507(this.ref.pointer, _sel_setRefreshControl_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// allowsKeyboardScrolling
  bool get allowsKeyboardScrolling {
    return _objc_msgSend_11(this.ref.pointer, _sel_allowsKeyboardScrolling);
  }

  /// setAllowsKeyboardScrolling:
  set allowsKeyboardScrolling(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setAllowsKeyboardScrolling_, value);
  }

  /// layerClass
  static objc.ObjCObjectBase getLayerClass() {
    final _ret = _objc_msgSend_4(_class_UIScrollView, _sel_layerClass);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// initWithFrame:
  UIScrollView initWithFrame_(CGRect frame) {
    final _ret = _objc_msgSend_65(
        this.ref.retainAndReturnPointer(), _sel_initWithFrame_, frame);
    return UIScrollView.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIScrollView? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIScrollView.castFromPointer(_ret, retain: false, release: true);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_(
          UISemanticContentAttribute attribute) {
    final _ret = _objc_msgSend_119(
        _class_UIScrollView,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_,
        attribute.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_(
          UISemanticContentAttribute semanticContentAttribute,
          UIUserInterfaceLayoutDirection layoutDirection) {
    final _ret = _objc_msgSend_120(
        _class_UIScrollView,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_,
        semanticContentAttribute.value,
        layoutDirection.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// init
  UIScrollView init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIScrollView.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIScrollView new1() {
    final _ret = _objc_msgSend_4(_class_UIScrollView, _sel_new);
    return UIScrollView.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIScrollView allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIScrollView, _sel_allocWithZone_, zone);
    return UIScrollView.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIScrollView alloc() {
    final _ret = _objc_msgSend_4(_class_UIScrollView, _sel_alloc);
    return UIScrollView.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIScrollView = objc.getClass("UIScrollView");
late final _sel_contentOffset = objc.registerName("contentOffset");
late final _sel_setContentOffset_ = objc.registerName("setContentOffset:");
late final _sel_contentSize = objc.registerName("contentSize");
late final _sel_setContentSize_ = objc.registerName("setContentSize:");
late final _sel_contentInset = objc.registerName("contentInset");
late final _sel_setContentInset_ = objc.registerName("setContentInset:");
final _objc_msgSend_421 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, UIEdgeInsets value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, UIEdgeInsets)>();
late final _sel_contentAlignmentPoint =
    objc.registerName("contentAlignmentPoint");
late final _sel_setContentAlignmentPoint_ =
    objc.registerName("setContentAlignmentPoint:");
late final _sel_adjustedContentInset =
    objc.registerName("adjustedContentInset");
late final _sel_adjustedContentInsetDidChange =
    objc.registerName("adjustedContentInsetDidChange");

enum UIScrollViewContentInsetAdjustmentBehavior {
  UIScrollViewContentInsetAdjustmentAutomatic(0),
  UIScrollViewContentInsetAdjustmentScrollableAxes(1),
  UIScrollViewContentInsetAdjustmentNever(2),
  UIScrollViewContentInsetAdjustmentAlways(3);

  final int value;
  const UIScrollViewContentInsetAdjustmentBehavior(this.value);

  static UIScrollViewContentInsetAdjustmentBehavior fromValue(int value) =>
      switch (value) {
        0 => UIScrollViewContentInsetAdjustmentAutomatic,
        1 => UIScrollViewContentInsetAdjustmentScrollableAxes,
        2 => UIScrollViewContentInsetAdjustmentNever,
        3 => UIScrollViewContentInsetAdjustmentAlways,
        _ => throw ArgumentError(
            "Unknown value for UIScrollViewContentInsetAdjustmentBehavior: $value"),
      };
}

late final _sel_contentInsetAdjustmentBehavior =
    objc.registerName("contentInsetAdjustmentBehavior");
final _objc_msgSend_422 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setContentInsetAdjustmentBehavior_ =
    objc.registerName("setContentInsetAdjustmentBehavior:");
final _objc_msgSend_423 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_automaticallyAdjustsScrollIndicatorInsets =
    objc.registerName("automaticallyAdjustsScrollIndicatorInsets");
late final _sel_setAutomaticallyAdjustsScrollIndicatorInsets_ =
    objc.registerName("setAutomaticallyAdjustsScrollIndicatorInsets:");

/// UILayoutGuide
class UILayoutGuide extends objc.NSObject {
  UILayoutGuide._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UILayoutGuide] that points to the same underlying object as [other].
  UILayoutGuide.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UILayoutGuide] that wraps the given raw object pointer.
  UILayoutGuide.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UILayoutGuide].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UILayoutGuide);
  }

  /// layoutFrame
  void getLayoutFrame(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_29Stret(stret, this.ref.pointer, _sel_layoutFrame)
        : stret.ref = _objc_msgSend_29(this.ref.pointer, _sel_layoutFrame);
  }

  /// owningView
  UIView? get owningView {
    final _ret = _objc_msgSend_131(this.ref.pointer, _sel_owningView);
    return _ret.address == 0
        ? null
        : UIView.castFromPointer(_ret, retain: true, release: true);
  }

  /// setOwningView:
  set owningView(UIView? value) {
    return _objc_msgSend_424(this.ref.pointer, _sel_setOwningView_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// identifier
  objc.NSString get identifier {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_identifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setIdentifier:
  set identifier(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setIdentifier_, value.ref.pointer);
  }

  /// leadingAnchor
  NSLayoutXAxisAnchor get leadingAnchor {
    final _ret = _objc_msgSend_438(this.ref.pointer, _sel_leadingAnchor);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// trailingAnchor
  NSLayoutXAxisAnchor get trailingAnchor {
    final _ret = _objc_msgSend_438(this.ref.pointer, _sel_trailingAnchor);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// leftAnchor
  NSLayoutXAxisAnchor get leftAnchor {
    final _ret = _objc_msgSend_438(this.ref.pointer, _sel_leftAnchor);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// rightAnchor
  NSLayoutXAxisAnchor get rightAnchor {
    final _ret = _objc_msgSend_438(this.ref.pointer, _sel_rightAnchor);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// topAnchor
  NSLayoutYAxisAnchor get topAnchor {
    final _ret = _objc_msgSend_440(this.ref.pointer, _sel_topAnchor);
    return NSLayoutYAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// bottomAnchor
  NSLayoutYAxisAnchor get bottomAnchor {
    final _ret = _objc_msgSend_440(this.ref.pointer, _sel_bottomAnchor);
    return NSLayoutYAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// widthAnchor
  NSLayoutDimension get widthAnchor {
    final _ret = _objc_msgSend_441(this.ref.pointer, _sel_widthAnchor);
    return NSLayoutDimension.castFromPointer(_ret, retain: true, release: true);
  }

  /// heightAnchor
  NSLayoutDimension get heightAnchor {
    final _ret = _objc_msgSend_441(this.ref.pointer, _sel_heightAnchor);
    return NSLayoutDimension.castFromPointer(_ret, retain: true, release: true);
  }

  /// centerXAnchor
  NSLayoutXAxisAnchor get centerXAnchor {
    final _ret = _objc_msgSend_438(this.ref.pointer, _sel_centerXAnchor);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// centerYAnchor
  NSLayoutYAxisAnchor get centerYAnchor {
    final _ret = _objc_msgSend_440(this.ref.pointer, _sel_centerYAnchor);
    return NSLayoutYAxisAnchor.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  UILayoutGuide init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UILayoutGuide.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UILayoutGuide new1() {
    final _ret = _objc_msgSend_4(_class_UILayoutGuide, _sel_new);
    return UILayoutGuide.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UILayoutGuide allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UILayoutGuide, _sel_allocWithZone_, zone);
    return UILayoutGuide.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UILayoutGuide alloc() {
    final _ret = _objc_msgSend_4(_class_UILayoutGuide, _sel_alloc);
    return UILayoutGuide.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UILayoutGuide = objc.getClass("UILayoutGuide");
late final _sel_layoutFrame = objc.registerName("layoutFrame");
late final _sel_owningView = objc.registerName("owningView");
late final _sel_setOwningView_ = objc.registerName("setOwningView:");
final _objc_msgSend_424 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setIdentifier_ = objc.registerName("setIdentifier:");

/// NSLayoutXAxisAnchor
class NSLayoutXAxisAnchor extends NSLayoutAnchor {
  NSLayoutXAxisAnchor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSLayoutXAxisAnchor] that points to the same underlying object as [other].
  NSLayoutXAxisAnchor.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSLayoutXAxisAnchor] that wraps the given raw object pointer.
  NSLayoutXAxisAnchor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSLayoutXAxisAnchor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSLayoutXAxisAnchor);
  }

  /// anchorWithOffsetToAnchor:
  NSLayoutDimension anchorWithOffsetToAnchor_(NSLayoutXAxisAnchor otherAnchor) {
    final _ret = _objc_msgSend_437(this.ref.pointer,
        _sel_anchorWithOffsetToAnchor_, otherAnchor.ref.pointer);
    return NSLayoutDimension.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSLayoutXAxisAnchor init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static NSLayoutXAxisAnchor new1() {
    final _ret = _objc_msgSend_4(_class_NSLayoutXAxisAnchor, _sel_new);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSLayoutXAxisAnchor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSLayoutXAxisAnchor, _sel_allocWithZone_, zone);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSLayoutXAxisAnchor alloc() {
    final _ret = _objc_msgSend_4(_class_NSLayoutXAxisAnchor, _sel_alloc);
    return NSLayoutXAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSLayoutXAxisAnchor = objc.getClass("NSLayoutXAxisAnchor");

/// NSLayoutDimension
class NSLayoutDimension extends NSLayoutAnchor {
  NSLayoutDimension._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSLayoutDimension] that points to the same underlying object as [other].
  NSLayoutDimension.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSLayoutDimension] that wraps the given raw object pointer.
  NSLayoutDimension.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSLayoutDimension].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSLayoutDimension);
  }

  /// constraintEqualToConstant:
  NSLayoutConstraint constraintEqualToConstant_(double c) {
    final _ret =
        _objc_msgSend_434(this.ref.pointer, _sel_constraintEqualToConstant_, c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintGreaterThanOrEqualToConstant:
  NSLayoutConstraint constraintGreaterThanOrEqualToConstant_(double c) {
    final _ret = _objc_msgSend_434(
        this.ref.pointer, _sel_constraintGreaterThanOrEqualToConstant_, c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintLessThanOrEqualToConstant:
  NSLayoutConstraint constraintLessThanOrEqualToConstant_(double c) {
    final _ret = _objc_msgSend_434(
        this.ref.pointer, _sel_constraintLessThanOrEqualToConstant_, c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintEqualToAnchor:multiplier:
  NSLayoutConstraint constraintEqualToAnchor_multiplier_(
      NSLayoutDimension anchor, double m) {
    final _ret = _objc_msgSend_435(this.ref.pointer,
        _sel_constraintEqualToAnchor_multiplier_, anchor.ref.pointer, m);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintGreaterThanOrEqualToAnchor:multiplier:
  NSLayoutConstraint constraintGreaterThanOrEqualToAnchor_multiplier_(
      NSLayoutDimension anchor, double m) {
    final _ret = _objc_msgSend_435(
        this.ref.pointer,
        _sel_constraintGreaterThanOrEqualToAnchor_multiplier_,
        anchor.ref.pointer,
        m);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintLessThanOrEqualToAnchor:multiplier:
  NSLayoutConstraint constraintLessThanOrEqualToAnchor_multiplier_(
      NSLayoutDimension anchor, double m) {
    final _ret = _objc_msgSend_435(
        this.ref.pointer,
        _sel_constraintLessThanOrEqualToAnchor_multiplier_,
        anchor.ref.pointer,
        m);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintEqualToAnchor:multiplier:constant:
  NSLayoutConstraint constraintEqualToAnchor_multiplier_constant_(
      NSLayoutDimension anchor, double m, double c) {
    final _ret = _objc_msgSend_436(
        this.ref.pointer,
        _sel_constraintEqualToAnchor_multiplier_constant_,
        anchor.ref.pointer,
        m,
        c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintGreaterThanOrEqualToAnchor:multiplier:constant:
  NSLayoutConstraint constraintGreaterThanOrEqualToAnchor_multiplier_constant_(
      NSLayoutDimension anchor, double m, double c) {
    final _ret = _objc_msgSend_436(
        this.ref.pointer,
        _sel_constraintGreaterThanOrEqualToAnchor_multiplier_constant_,
        anchor.ref.pointer,
        m,
        c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintLessThanOrEqualToAnchor:multiplier:constant:
  NSLayoutConstraint constraintLessThanOrEqualToAnchor_multiplier_constant_(
      NSLayoutDimension anchor, double m, double c) {
    final _ret = _objc_msgSend_436(
        this.ref.pointer,
        _sel_constraintLessThanOrEqualToAnchor_multiplier_constant_,
        anchor.ref.pointer,
        m,
        c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  NSLayoutDimension init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSLayoutDimension.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static NSLayoutDimension new1() {
    final _ret = _objc_msgSend_4(_class_NSLayoutDimension, _sel_new);
    return NSLayoutDimension.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSLayoutDimension allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSLayoutDimension, _sel_allocWithZone_, zone);
    return NSLayoutDimension.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSLayoutDimension alloc() {
    final _ret = _objc_msgSend_4(_class_NSLayoutDimension, _sel_alloc);
    return NSLayoutDimension.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSLayoutDimension = objc.getClass("NSLayoutDimension");

/// NSLayoutConstraint
class NSLayoutConstraint extends objc.NSObject {
  NSLayoutConstraint._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSLayoutConstraint] that points to the same underlying object as [other].
  NSLayoutConstraint.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSLayoutConstraint] that wraps the given raw object pointer.
  NSLayoutConstraint.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSLayoutConstraint].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSLayoutConstraint);
  }

  /// constraintsWithVisualFormat:options:metrics:views:
  static objc.NSArray constraintsWithVisualFormat_options_metrics_views_(
      objc.NSString format,
      NSLayoutFormatOptions opts,
      objc.NSDictionary? metrics,
      objc.NSDictionary views) {
    final _ret = _objc_msgSend_425(
        _class_NSLayoutConstraint,
        _sel_constraintsWithVisualFormat_options_metrics_views_,
        format.ref.pointer,
        opts.value,
        metrics?.ref.pointer ?? ffi.nullptr,
        views.ref.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
  static NSLayoutConstraint
      constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(
          objc.ObjCObjectBase view1,
          NSLayoutAttribute attr1,
          NSLayoutRelation relation,
          objc.ObjCObjectBase? view2,
          NSLayoutAttribute attr2,
          double multiplier,
          double c) {
    final _ret = _objc_msgSend_426(
        _class_NSLayoutConstraint,
        _sel_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_,
        view1.ref.pointer,
        attr1.value,
        relation.value,
        view2?.ref.pointer ?? ffi.nullptr,
        attr2.value,
        multiplier,
        c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// priority
  double get priority {
    return objc.useMsgSendVariants
        ? _objc_msgSend_15Fpret(this.ref.pointer, _sel_priority)
        : _objc_msgSend_15(this.ref.pointer, _sel_priority);
  }

  /// setPriority:
  set priority(double value) {
    return _objc_msgSend_88(this.ref.pointer, _sel_setPriority_, value);
  }

  /// shouldBeArchived
  bool get shouldBeArchived {
    return _objc_msgSend_11(this.ref.pointer, _sel_shouldBeArchived);
  }

  /// setShouldBeArchived:
  set shouldBeArchived(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setShouldBeArchived_, value);
  }

  /// firstItem
  objc.ObjCObjectBase? get firstItem {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_firstItem);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// secondItem
  objc.ObjCObjectBase? get secondItem {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_secondItem);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// firstAttribute
  NSLayoutAttribute get firstAttribute {
    final _ret = _objc_msgSend_427(this.ref.pointer, _sel_firstAttribute);
    return NSLayoutAttribute.fromValue(_ret);
  }

  /// secondAttribute
  NSLayoutAttribute get secondAttribute {
    final _ret = _objc_msgSend_427(this.ref.pointer, _sel_secondAttribute);
    return NSLayoutAttribute.fromValue(_ret);
  }

  /// firstAnchor
  NSLayoutAnchor get firstAnchor {
    final _ret = _objc_msgSend_430(this.ref.pointer, _sel_firstAnchor);
    return NSLayoutAnchor.castFromPointer(_ret, retain: true, release: true);
  }

  /// secondAnchor
  NSLayoutAnchor? get secondAnchor {
    final _ret = _objc_msgSend_431(this.ref.pointer, _sel_secondAnchor);
    return _ret.address == 0
        ? null
        : NSLayoutAnchor.castFromPointer(_ret, retain: true, release: true);
  }

  /// relation
  NSLayoutRelation get relation {
    final _ret = _objc_msgSend_432(this.ref.pointer, _sel_relation);
    return NSLayoutRelation.fromValue(_ret);
  }

  /// multiplier
  double get multiplier {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_multiplier)
        : _objc_msgSend_24(this.ref.pointer, _sel_multiplier);
  }

  /// constant
  double get constant {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_constant)
        : _objc_msgSend_24(this.ref.pointer, _sel_constant);
  }

  /// setConstant:
  set constant(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setConstant_, value);
  }

  /// isActive
  bool get active {
    return _objc_msgSend_11(this.ref.pointer, _sel_isActive);
  }

  /// setActive:
  set active(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setActive_, value);
  }

  /// activateConstraints:
  static void activateConstraints_(objc.NSArray constraints) {
    _objc_msgSend_433(_class_NSLayoutConstraint, _sel_activateConstraints_,
        constraints.ref.pointer);
  }

  /// deactivateConstraints:
  static void deactivateConstraints_(objc.NSArray constraints) {
    _objc_msgSend_433(_class_NSLayoutConstraint, _sel_deactivateConstraints_,
        constraints.ref.pointer);
  }

  /// init
  NSLayoutConstraint init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static NSLayoutConstraint new1() {
    final _ret = _objc_msgSend_4(_class_NSLayoutConstraint, _sel_new);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSLayoutConstraint allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSLayoutConstraint, _sel_allocWithZone_, zone);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSLayoutConstraint alloc() {
    final _ret = _objc_msgSend_4(_class_NSLayoutConstraint, _sel_alloc);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSLayoutConstraint = objc.getClass("NSLayoutConstraint");

enum NSLayoutFormatOptions {
  NSLayoutFormatAlignAllLeft(2),
  NSLayoutFormatAlignAllRight(4),
  NSLayoutFormatAlignAllTop(8),
  NSLayoutFormatAlignAllBottom(16),
  NSLayoutFormatAlignAllLeading(32),
  NSLayoutFormatAlignAllTrailing(64),
  NSLayoutFormatAlignAllCenterX(512),
  NSLayoutFormatAlignAllCenterY(1024),
  NSLayoutFormatAlignAllLastBaseline(2048),
  NSLayoutFormatAlignAllFirstBaseline(4096),
  NSLayoutFormatAlignmentMask(65535),
  NSLayoutFormatDirectionLeadingToTrailing(0),
  NSLayoutFormatDirectionLeftToRight(65536),
  NSLayoutFormatDirectionRightToLeft(131072),
  NSLayoutFormatDirectionMask(196608),
  NSLayoutFormatSpacingBaselineToBaseline(524288);

  static const NSLayoutFormatAlignAllBaseline =
      NSLayoutFormatAlignAllLastBaseline;
  static const NSLayoutFormatSpacingEdgeToEdge =
      NSLayoutFormatDirectionLeadingToTrailing;
  static const NSLayoutFormatSpacingMask =
      NSLayoutFormatSpacingBaselineToBaseline;

  final int value;
  const NSLayoutFormatOptions(this.value);

  static NSLayoutFormatOptions fromValue(int value) => switch (value) {
        2 => NSLayoutFormatAlignAllLeft,
        4 => NSLayoutFormatAlignAllRight,
        8 => NSLayoutFormatAlignAllTop,
        16 => NSLayoutFormatAlignAllBottom,
        32 => NSLayoutFormatAlignAllLeading,
        64 => NSLayoutFormatAlignAllTrailing,
        512 => NSLayoutFormatAlignAllCenterX,
        1024 => NSLayoutFormatAlignAllCenterY,
        2048 => NSLayoutFormatAlignAllLastBaseline,
        4096 => NSLayoutFormatAlignAllFirstBaseline,
        65535 => NSLayoutFormatAlignmentMask,
        0 => NSLayoutFormatDirectionLeadingToTrailing,
        65536 => NSLayoutFormatDirectionLeftToRight,
        131072 => NSLayoutFormatDirectionRightToLeft,
        196608 => NSLayoutFormatDirectionMask,
        524288 => NSLayoutFormatSpacingBaselineToBaseline,
        _ => throw ArgumentError(
            "Unknown value for NSLayoutFormatOptions: $value"),
      };

  @override
  String toString() {
    if (this == NSLayoutFormatAlignAllLastBaseline)
      return "NSLayoutFormatOptions.NSLayoutFormatAlignAllLastBaseline, NSLayoutFormatOptions.NSLayoutFormatAlignAllBaseline";
    if (this == NSLayoutFormatDirectionLeadingToTrailing)
      return "NSLayoutFormatOptions.NSLayoutFormatDirectionLeadingToTrailing, NSLayoutFormatOptions.NSLayoutFormatSpacingEdgeToEdge";
    if (this == NSLayoutFormatSpacingBaselineToBaseline)
      return "NSLayoutFormatOptions.NSLayoutFormatSpacingBaselineToBaseline, NSLayoutFormatOptions.NSLayoutFormatSpacingMask";
    return super.toString();
  }
}

late final _sel_constraintsWithVisualFormat_options_metrics_views_ =
    objc.registerName("constraintsWithVisualFormat:options:metrics:views:");
final _objc_msgSend_425 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> format,
                ffi.UnsignedLong opts,
                ffi.Pointer<objc.ObjCObject> metrics,
                ffi.Pointer<objc.ObjCObject> views)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSLayoutAttribute {
  NSLayoutAttributeLeft(1),
  NSLayoutAttributeRight(2),
  NSLayoutAttributeTop(3),
  NSLayoutAttributeBottom(4),
  NSLayoutAttributeLeading(5),
  NSLayoutAttributeTrailing(6),
  NSLayoutAttributeWidth(7),
  NSLayoutAttributeHeight(8),
  NSLayoutAttributeCenterX(9),
  NSLayoutAttributeCenterY(10),
  NSLayoutAttributeLastBaseline(11),
  NSLayoutAttributeFirstBaseline(12),
  NSLayoutAttributeLeftMargin(13),
  NSLayoutAttributeRightMargin(14),
  NSLayoutAttributeTopMargin(15),
  NSLayoutAttributeBottomMargin(16),
  NSLayoutAttributeLeadingMargin(17),
  NSLayoutAttributeTrailingMargin(18),
  NSLayoutAttributeCenterXWithinMargins(19),
  NSLayoutAttributeCenterYWithinMargins(20),
  NSLayoutAttributeNotAnAttribute(0);

  static const NSLayoutAttributeBaseline = NSLayoutAttributeLastBaseline;

  final int value;
  const NSLayoutAttribute(this.value);

  static NSLayoutAttribute fromValue(int value) => switch (value) {
        1 => NSLayoutAttributeLeft,
        2 => NSLayoutAttributeRight,
        3 => NSLayoutAttributeTop,
        4 => NSLayoutAttributeBottom,
        5 => NSLayoutAttributeLeading,
        6 => NSLayoutAttributeTrailing,
        7 => NSLayoutAttributeWidth,
        8 => NSLayoutAttributeHeight,
        9 => NSLayoutAttributeCenterX,
        10 => NSLayoutAttributeCenterY,
        11 => NSLayoutAttributeLastBaseline,
        12 => NSLayoutAttributeFirstBaseline,
        13 => NSLayoutAttributeLeftMargin,
        14 => NSLayoutAttributeRightMargin,
        15 => NSLayoutAttributeTopMargin,
        16 => NSLayoutAttributeBottomMargin,
        17 => NSLayoutAttributeLeadingMargin,
        18 => NSLayoutAttributeTrailingMargin,
        19 => NSLayoutAttributeCenterXWithinMargins,
        20 => NSLayoutAttributeCenterYWithinMargins,
        0 => NSLayoutAttributeNotAnAttribute,
        _ => throw ArgumentError("Unknown value for NSLayoutAttribute: $value"),
      };

  @override
  String toString() {
    if (this == NSLayoutAttributeLastBaseline)
      return "NSLayoutAttribute.NSLayoutAttributeLastBaseline, NSLayoutAttribute.NSLayoutAttributeBaseline";
    return super.toString();
  }
}

enum NSLayoutRelation {
  NSLayoutRelationLessThanOrEqual(-1),
  NSLayoutRelationEqual(0),
  NSLayoutRelationGreaterThanOrEqual(1);

  final int value;
  const NSLayoutRelation(this.value);

  static NSLayoutRelation fromValue(int value) => switch (value) {
        -1 => NSLayoutRelationLessThanOrEqual,
        0 => NSLayoutRelationEqual,
        1 => NSLayoutRelationGreaterThanOrEqual,
        _ => throw ArgumentError("Unknown value for NSLayoutRelation: $value"),
      };
}

late final _sel_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_ =
    objc.registerName(
        "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:");
final _objc_msgSend_426 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view1,
                ffi.UnsignedLong attr1,
                ffi.Long relation,
                ffi.Pointer<objc.ObjCObject> view2,
                ffi.UnsignedLong attr2,
                ffi.Double multiplier,
                ffi.Double c)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            double,
            double)>();
late final _sel_priority = objc.registerName("priority");
late final _sel_setPriority_ = objc.registerName("setPriority:");
late final _sel_shouldBeArchived = objc.registerName("shouldBeArchived");
late final _sel_setShouldBeArchived_ =
    objc.registerName("setShouldBeArchived:");
late final _sel_firstItem = objc.registerName("firstItem");
late final _sel_secondItem = objc.registerName("secondItem");
late final _sel_firstAttribute = objc.registerName("firstAttribute");
final _objc_msgSend_427 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_secondAttribute = objc.registerName("secondAttribute");

/// NSLayoutAnchor
class NSLayoutAnchor extends objc.NSObject {
  NSLayoutAnchor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSLayoutAnchor] that points to the same underlying object as [other].
  NSLayoutAnchor.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSLayoutAnchor] that wraps the given raw object pointer.
  NSLayoutAnchor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSLayoutAnchor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSLayoutAnchor);
  }

  /// constraintEqualToAnchor:
  NSLayoutConstraint constraintEqualToAnchor_(NSLayoutAnchor anchor) {
    final _ret = _objc_msgSend_428(
        this.ref.pointer, _sel_constraintEqualToAnchor_, anchor.ref.pointer);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintGreaterThanOrEqualToAnchor:
  NSLayoutConstraint constraintGreaterThanOrEqualToAnchor_(
      NSLayoutAnchor anchor) {
    final _ret = _objc_msgSend_428(this.ref.pointer,
        _sel_constraintGreaterThanOrEqualToAnchor_, anchor.ref.pointer);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintLessThanOrEqualToAnchor:
  NSLayoutConstraint constraintLessThanOrEqualToAnchor_(NSLayoutAnchor anchor) {
    final _ret = _objc_msgSend_428(this.ref.pointer,
        _sel_constraintLessThanOrEqualToAnchor_, anchor.ref.pointer);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintEqualToAnchor:constant:
  NSLayoutConstraint constraintEqualToAnchor_constant_(
      NSLayoutAnchor anchor, double c) {
    final _ret = _objc_msgSend_429(this.ref.pointer,
        _sel_constraintEqualToAnchor_constant_, anchor.ref.pointer, c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintGreaterThanOrEqualToAnchor:constant:
  NSLayoutConstraint constraintGreaterThanOrEqualToAnchor_constant_(
      NSLayoutAnchor anchor, double c) {
    final _ret = _objc_msgSend_429(
        this.ref.pointer,
        _sel_constraintGreaterThanOrEqualToAnchor_constant_,
        anchor.ref.pointer,
        c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// constraintLessThanOrEqualToAnchor:constant:
  NSLayoutConstraint constraintLessThanOrEqualToAnchor_constant_(
      NSLayoutAnchor anchor, double c) {
    final _ret = _objc_msgSend_429(
        this.ref.pointer,
        _sel_constraintLessThanOrEqualToAnchor_constant_,
        anchor.ref.pointer,
        c);
    return NSLayoutConstraint.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// item
  objc.ObjCObjectBase? get item {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_item);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// hasAmbiguousLayout
  bool get hasAmbiguousLayout {
    return _objc_msgSend_11(this.ref.pointer, _sel_hasAmbiguousLayout);
  }

  /// constraintsAffectingLayout
  objc.NSArray get constraintsAffectingLayout {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_constraintsAffectingLayout);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSLayoutAnchor init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSLayoutAnchor.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSLayoutAnchor new1() {
    final _ret = _objc_msgSend_4(_class_NSLayoutAnchor, _sel_new);
    return NSLayoutAnchor.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSLayoutAnchor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSLayoutAnchor, _sel_allocWithZone_, zone);
    return NSLayoutAnchor.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSLayoutAnchor alloc() {
    final _ret = _objc_msgSend_4(_class_NSLayoutAnchor, _sel_alloc);
    return NSLayoutAnchor.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSLayoutAnchor = objc.getClass("NSLayoutAnchor");
late final _sel_constraintEqualToAnchor_ =
    objc.registerName("constraintEqualToAnchor:");
final _objc_msgSend_428 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> anchor)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_constraintGreaterThanOrEqualToAnchor_ =
    objc.registerName("constraintGreaterThanOrEqualToAnchor:");
late final _sel_constraintLessThanOrEqualToAnchor_ =
    objc.registerName("constraintLessThanOrEqualToAnchor:");
late final _sel_constraintEqualToAnchor_constant_ =
    objc.registerName("constraintEqualToAnchor:constant:");
final _objc_msgSend_429 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> anchor,
                ffi.Double c)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_constraintGreaterThanOrEqualToAnchor_constant_ =
    objc.registerName("constraintGreaterThanOrEqualToAnchor:constant:");
late final _sel_constraintLessThanOrEqualToAnchor_constant_ =
    objc.registerName("constraintLessThanOrEqualToAnchor:constant:");
late final _sel_item = objc.registerName("item");
late final _sel_hasAmbiguousLayout = objc.registerName("hasAmbiguousLayout");
late final _sel_constraintsAffectingLayout =
    objc.registerName("constraintsAffectingLayout");
late final _sel_firstAnchor = objc.registerName("firstAnchor");
final _objc_msgSend_430 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_secondAnchor = objc.registerName("secondAnchor");
final _objc_msgSend_431 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_relation = objc.registerName("relation");
final _objc_msgSend_432 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_multiplier = objc.registerName("multiplier");
late final _sel_constant = objc.registerName("constant");
late final _sel_setConstant_ = objc.registerName("setConstant:");
late final _sel_isActive = objc.registerName("isActive");
late final _sel_setActive_ = objc.registerName("setActive:");
late final _sel_activateConstraints_ =
    objc.registerName("activateConstraints:");
final _objc_msgSend_433 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> constraints)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_deactivateConstraints_ =
    objc.registerName("deactivateConstraints:");
late final _sel_constraintEqualToConstant_ =
    objc.registerName("constraintEqualToConstant:");
final _objc_msgSend_434 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double c)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_constraintGreaterThanOrEqualToConstant_ =
    objc.registerName("constraintGreaterThanOrEqualToConstant:");
late final _sel_constraintLessThanOrEqualToConstant_ =
    objc.registerName("constraintLessThanOrEqualToConstant:");
late final _sel_constraintEqualToAnchor_multiplier_ =
    objc.registerName("constraintEqualToAnchor:multiplier:");
final _objc_msgSend_435 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> anchor,
                ffi.Double m)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_constraintGreaterThanOrEqualToAnchor_multiplier_ =
    objc.registerName("constraintGreaterThanOrEqualToAnchor:multiplier:");
late final _sel_constraintLessThanOrEqualToAnchor_multiplier_ =
    objc.registerName("constraintLessThanOrEqualToAnchor:multiplier:");
late final _sel_constraintEqualToAnchor_multiplier_constant_ =
    objc.registerName("constraintEqualToAnchor:multiplier:constant:");
final _objc_msgSend_436 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> anchor,
                ffi.Double m,
                ffi.Double c)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            double)>();
late final _sel_constraintGreaterThanOrEqualToAnchor_multiplier_constant_ = objc
    .registerName("constraintGreaterThanOrEqualToAnchor:multiplier:constant:");
late final _sel_constraintLessThanOrEqualToAnchor_multiplier_constant_ =
    objc.registerName("constraintLessThanOrEqualToAnchor:multiplier:constant:");
late final _sel_anchorWithOffsetToAnchor_ =
    objc.registerName("anchorWithOffsetToAnchor:");
final _objc_msgSend_437 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> otherAnchor)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_leadingAnchor = objc.registerName("leadingAnchor");
final _objc_msgSend_438 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_trailingAnchor = objc.registerName("trailingAnchor");
late final _sel_leftAnchor = objc.registerName("leftAnchor");
late final _sel_rightAnchor = objc.registerName("rightAnchor");

/// NSLayoutYAxisAnchor
class NSLayoutYAxisAnchor extends NSLayoutAnchor {
  NSLayoutYAxisAnchor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSLayoutYAxisAnchor] that points to the same underlying object as [other].
  NSLayoutYAxisAnchor.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSLayoutYAxisAnchor] that wraps the given raw object pointer.
  NSLayoutYAxisAnchor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSLayoutYAxisAnchor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSLayoutYAxisAnchor);
  }

  /// anchorWithOffsetToAnchor:
  NSLayoutDimension anchorWithOffsetToAnchor_(NSLayoutYAxisAnchor otherAnchor) {
    final _ret = _objc_msgSend_439(this.ref.pointer,
        _sel_anchorWithOffsetToAnchor_, otherAnchor.ref.pointer);
    return NSLayoutDimension.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSLayoutYAxisAnchor init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSLayoutYAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static NSLayoutYAxisAnchor new1() {
    final _ret = _objc_msgSend_4(_class_NSLayoutYAxisAnchor, _sel_new);
    return NSLayoutYAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NSLayoutYAxisAnchor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSLayoutYAxisAnchor, _sel_allocWithZone_, zone);
    return NSLayoutYAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NSLayoutYAxisAnchor alloc() {
    final _ret = _objc_msgSend_4(_class_NSLayoutYAxisAnchor, _sel_alloc);
    return NSLayoutYAxisAnchor.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSLayoutYAxisAnchor = objc.getClass("NSLayoutYAxisAnchor");
final _objc_msgSend_439 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> otherAnchor)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_topAnchor = objc.registerName("topAnchor");
final _objc_msgSend_440 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_bottomAnchor = objc.registerName("bottomAnchor");
late final _sel_widthAnchor = objc.registerName("widthAnchor");
final _objc_msgSend_441 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_heightAnchor = objc.registerName("heightAnchor");
late final _sel_centerXAnchor = objc.registerName("centerXAnchor");
late final _sel_centerYAnchor = objc.registerName("centerYAnchor");
late final _sel_contentLayoutGuide = objc.registerName("contentLayoutGuide");
final _objc_msgSend_442 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_frameLayoutGuide = objc.registerName("frameLayoutGuide");
late final _sel_isDirectionalLockEnabled =
    objc.registerName("isDirectionalLockEnabled");
late final _sel_setDirectionalLockEnabled_ =
    objc.registerName("setDirectionalLockEnabled:");
late final _sel_bounces = objc.registerName("bounces");
late final _sel_setBounces_ = objc.registerName("setBounces:");
late final _sel_bouncesHorizontally = objc.registerName("bouncesHorizontally");
late final _sel_setBouncesHorizontally_ =
    objc.registerName("setBouncesHorizontally:");
late final _sel_bouncesVertically = objc.registerName("bouncesVertically");
late final _sel_setBouncesVertically_ =
    objc.registerName("setBouncesVertically:");
late final _sel_alwaysBounceVertical =
    objc.registerName("alwaysBounceVertical");
late final _sel_setAlwaysBounceVertical_ =
    objc.registerName("setAlwaysBounceVertical:");
late final _sel_alwaysBounceHorizontal =
    objc.registerName("alwaysBounceHorizontal");
late final _sel_setAlwaysBounceHorizontal_ =
    objc.registerName("setAlwaysBounceHorizontal:");
late final _sel_isPagingEnabled = objc.registerName("isPagingEnabled");
late final _sel_setPagingEnabled_ = objc.registerName("setPagingEnabled:");
late final _sel_isScrollEnabled = objc.registerName("isScrollEnabled");
late final _sel_setScrollEnabled_ = objc.registerName("setScrollEnabled:");
late final _sel_transfersHorizontalScrollingToParent =
    objc.registerName("transfersHorizontalScrollingToParent");
late final _sel_setTransfersHorizontalScrollingToParent_ =
    objc.registerName("setTransfersHorizontalScrollingToParent:");
late final _sel_transfersVerticalScrollingToParent =
    objc.registerName("transfersVerticalScrollingToParent");
late final _sel_setTransfersVerticalScrollingToParent_ =
    objc.registerName("setTransfersVerticalScrollingToParent:");
late final _sel_showsVerticalScrollIndicator =
    objc.registerName("showsVerticalScrollIndicator");
late final _sel_setShowsVerticalScrollIndicator_ =
    objc.registerName("setShowsVerticalScrollIndicator:");
late final _sel_showsHorizontalScrollIndicator =
    objc.registerName("showsHorizontalScrollIndicator");
late final _sel_setShowsHorizontalScrollIndicator_ =
    objc.registerName("setShowsHorizontalScrollIndicator:");

enum UIScrollViewIndicatorStyle {
  UIScrollViewIndicatorStyleDefault(0),
  UIScrollViewIndicatorStyleBlack(1),
  UIScrollViewIndicatorStyleWhite(2);

  final int value;
  const UIScrollViewIndicatorStyle(this.value);

  static UIScrollViewIndicatorStyle fromValue(int value) => switch (value) {
        0 => UIScrollViewIndicatorStyleDefault,
        1 => UIScrollViewIndicatorStyleBlack,
        2 => UIScrollViewIndicatorStyleWhite,
        _ => throw ArgumentError(
            "Unknown value for UIScrollViewIndicatorStyle: $value"),
      };
}

late final _sel_indicatorStyle = objc.registerName("indicatorStyle");
final _objc_msgSend_443 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setIndicatorStyle_ = objc.registerName("setIndicatorStyle:");
final _objc_msgSend_444 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_verticalScrollIndicatorInsets =
    objc.registerName("verticalScrollIndicatorInsets");
late final _sel_setVerticalScrollIndicatorInsets_ =
    objc.registerName("setVerticalScrollIndicatorInsets:");
late final _sel_horizontalScrollIndicatorInsets =
    objc.registerName("horizontalScrollIndicatorInsets");
late final _sel_setHorizontalScrollIndicatorInsets_ =
    objc.registerName("setHorizontalScrollIndicatorInsets:");
late final _sel_scrollIndicatorInsets =
    objc.registerName("scrollIndicatorInsets");
late final _sel_setScrollIndicatorInsets_ =
    objc.registerName("setScrollIndicatorInsets:");
late final _sel_decelerationRate = objc.registerName("decelerationRate");
late final _sel_setDecelerationRate_ =
    objc.registerName("setDecelerationRate:");

enum UIScrollViewIndexDisplayMode {
  UIScrollViewIndexDisplayModeAutomatic(0),
  UIScrollViewIndexDisplayModeAlwaysHidden(1);

  final int value;
  const UIScrollViewIndexDisplayMode(this.value);

  static UIScrollViewIndexDisplayMode fromValue(int value) => switch (value) {
        0 => UIScrollViewIndexDisplayModeAutomatic,
        1 => UIScrollViewIndexDisplayModeAlwaysHidden,
        _ => throw ArgumentError(
            "Unknown value for UIScrollViewIndexDisplayMode: $value"),
      };
}

late final _sel_indexDisplayMode = objc.registerName("indexDisplayMode");
final _objc_msgSend_445 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setIndexDisplayMode_ =
    objc.registerName("setIndexDisplayMode:");
final _objc_msgSend_446 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setContentOffset_animated_ =
    objc.registerName("setContentOffset:animated:");
final _objc_msgSend_447 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint contentOffset,
                ffi.Bool animated)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint, bool)>();
late final _sel_scrollRectToVisible_animated_ =
    objc.registerName("scrollRectToVisible:animated:");
final _objc_msgSend_448 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect rect,
                ffi.Bool animated)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect, bool)>();
late final _sel_flashScrollIndicators =
    objc.registerName("flashScrollIndicators");
late final _sel_withScrollIndicatorsShownForContentOffsetChanges_ =
    objc.registerName("withScrollIndicatorsShownForContentOffsetChanges:");
final _objc_msgSend_449 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> changes)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_isTracking = objc.registerName("isTracking");
late final _sel_isDragging = objc.registerName("isDragging");
late final _sel_isDecelerating = objc.registerName("isDecelerating");
late final _sel_isScrollAnimating = objc.registerName("isScrollAnimating");
late final _sel_delaysContentTouches =
    objc.registerName("delaysContentTouches");
late final _sel_setDelaysContentTouches_ =
    objc.registerName("setDelaysContentTouches:");
late final _sel_canCancelContentTouches =
    objc.registerName("canCancelContentTouches");
late final _sel_setCanCancelContentTouches_ =
    objc.registerName("setCanCancelContentTouches:");
late final _sel_touchesShouldBegin_withEvent_inContentView_ =
    objc.registerName("touchesShouldBegin:withEvent:inContentView:");
final _objc_msgSend_450 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> touches,
                ffi.Pointer<objc.ObjCObject> event,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_touchesShouldCancelInContentView_ =
    objc.registerName("touchesShouldCancelInContentView:");
final _objc_msgSend_451 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_minimumZoomScale = objc.registerName("minimumZoomScale");
late final _sel_setMinimumZoomScale_ =
    objc.registerName("setMinimumZoomScale:");
late final _sel_maximumZoomScale = objc.registerName("maximumZoomScale");
late final _sel_setMaximumZoomScale_ =
    objc.registerName("setMaximumZoomScale:");
late final _sel_zoomScale = objc.registerName("zoomScale");
late final _sel_setZoomScale_ = objc.registerName("setZoomScale:");
late final _sel_setZoomScale_animated_ =
    objc.registerName("setZoomScale:animated:");
final _objc_msgSend_452 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double scale,
                ffi.Bool animated)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, bool)>();
late final _sel_zoomToRect_animated_ =
    objc.registerName("zoomToRect:animated:");
late final _sel_bouncesZoom = objc.registerName("bouncesZoom");
late final _sel_setBouncesZoom_ = objc.registerName("setBouncesZoom:");
late final _sel_isZooming = objc.registerName("isZooming");
late final _sel_isZoomBouncing = objc.registerName("isZoomBouncing");
late final _sel_isZoomAnimating = objc.registerName("isZoomAnimating");
late final _sel_scrollsToTop = objc.registerName("scrollsToTop");
late final _sel_setScrollsToTop_ = objc.registerName("setScrollsToTop:");
late final _sel_stopScrollingAndZooming =
    objc.registerName("stopScrollingAndZooming");

/// UIPanGestureRecognizer
class UIPanGestureRecognizer extends UIGestureRecognizer {
  UIPanGestureRecognizer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIPanGestureRecognizer] that points to the same underlying object as [other].
  UIPanGestureRecognizer.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIPanGestureRecognizer] that wraps the given raw object pointer.
  UIPanGestureRecognizer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIPanGestureRecognizer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIPanGestureRecognizer);
  }

  /// minimumNumberOfTouches
  int get minimumNumberOfTouches {
    return _objc_msgSend_53(this.ref.pointer, _sel_minimumNumberOfTouches);
  }

  /// setMinimumNumberOfTouches:
  set minimumNumberOfTouches(int value) {
    return _objc_msgSend_376(
        this.ref.pointer, _sel_setMinimumNumberOfTouches_, value);
  }

  /// maximumNumberOfTouches
  int get maximumNumberOfTouches {
    return _objc_msgSend_53(this.ref.pointer, _sel_maximumNumberOfTouches);
  }

  /// setMaximumNumberOfTouches:
  set maximumNumberOfTouches(int value) {
    return _objc_msgSend_376(
        this.ref.pointer, _sel_setMaximumNumberOfTouches_, value);
  }

  /// translationInView:
  void translationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(stret, this.ref.pointer,
            _sel_translationInView_, view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(this.ref.pointer,
            _sel_translationInView_, view?.ref.pointer ?? ffi.nullptr);
  }

  /// setTranslation:inView:
  void setTranslation_inView_(CGPoint translation, UIView? view) {
    _objc_msgSend_453(this.ref.pointer, _sel_setTranslation_inView_,
        translation, view?.ref.pointer ?? ffi.nullptr);
  }

  /// velocityInView:
  void velocityInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(stret, this.ref.pointer, _sel_velocityInView_,
            view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(this.ref.pointer, _sel_velocityInView_,
            view?.ref.pointer ?? ffi.nullptr);
  }

  /// allowedScrollTypesMask
  UIScrollTypeMask get allowedScrollTypesMask {
    final _ret =
        _objc_msgSend_454(this.ref.pointer, _sel_allowedScrollTypesMask);
    return UIScrollTypeMask.fromValue(_ret);
  }

  /// setAllowedScrollTypesMask:
  set allowedScrollTypesMask(UIScrollTypeMask value) {
    return _objc_msgSend_455(
        this.ref.pointer, _sel_setAllowedScrollTypesMask_, value.value);
  }

  /// initWithTarget:action:
  UIPanGestureRecognizer initWithTarget_action_(
      objc.ObjCObjectBase? target, ffi.Pointer<objc.ObjCSelector> action) {
    final _ret = _objc_msgSend_127(
        this.ref.retainAndReturnPointer(),
        _sel_initWithTarget_action_,
        target?.ref.pointer ?? ffi.nullptr,
        action);
    return UIPanGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIPanGestureRecognizer init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIPanGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithCoder:
  UIPanGestureRecognizer? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIPanGestureRecognizer.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// new
  static UIPanGestureRecognizer new1() {
    final _ret = _objc_msgSend_4(_class_UIPanGestureRecognizer, _sel_new);
    return UIPanGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIPanGestureRecognizer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIPanGestureRecognizer, _sel_allocWithZone_, zone);
    return UIPanGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIPanGestureRecognizer alloc() {
    final _ret = _objc_msgSend_4(_class_UIPanGestureRecognizer, _sel_alloc);
    return UIPanGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIPanGestureRecognizer =
    objc.getClass("UIPanGestureRecognizer");
late final _sel_minimumNumberOfTouches =
    objc.registerName("minimumNumberOfTouches");
late final _sel_setMinimumNumberOfTouches_ =
    objc.registerName("setMinimumNumberOfTouches:");
late final _sel_maximumNumberOfTouches =
    objc.registerName("maximumNumberOfTouches");
late final _sel_setMaximumNumberOfTouches_ =
    objc.registerName("setMaximumNumberOfTouches:");
late final _sel_translationInView_ = objc.registerName("translationInView:");
late final _sel_setTranslation_inView_ =
    objc.registerName("setTranslation:inView:");
final _objc_msgSend_453 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint translation,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_velocityInView_ = objc.registerName("velocityInView:");

enum UIScrollTypeMask {
  UIScrollTypeMaskDiscrete(1),
  UIScrollTypeMaskContinuous(2),
  UIScrollTypeMaskAll(3);

  final int value;
  const UIScrollTypeMask(this.value);

  static UIScrollTypeMask fromValue(int value) => switch (value) {
        1 => UIScrollTypeMaskDiscrete,
        2 => UIScrollTypeMaskContinuous,
        3 => UIScrollTypeMaskAll,
        _ => throw ArgumentError("Unknown value for UIScrollTypeMask: $value"),
      };
}

late final _sel_allowedScrollTypesMask =
    objc.registerName("allowedScrollTypesMask");
final _objc_msgSend_454 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAllowedScrollTypesMask_ =
    objc.registerName("setAllowedScrollTypesMask:");
final _objc_msgSend_455 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_panGestureRecognizer =
    objc.registerName("panGestureRecognizer");
final _objc_msgSend_456 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIPinchGestureRecognizer
class UIPinchGestureRecognizer extends UIGestureRecognizer {
  UIPinchGestureRecognizer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIPinchGestureRecognizer] that points to the same underlying object as [other].
  UIPinchGestureRecognizer.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIPinchGestureRecognizer] that wraps the given raw object pointer.
  UIPinchGestureRecognizer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIPinchGestureRecognizer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIPinchGestureRecognizer);
  }

  /// scale
  double get scale {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_scale)
        : _objc_msgSend_24(this.ref.pointer, _sel_scale);
  }

  /// setScale:
  set scale(double value) {
    return _objc_msgSend_37(this.ref.pointer, _sel_setScale_, value);
  }

  /// velocity
  double get velocity {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_velocity)
        : _objc_msgSend_24(this.ref.pointer, _sel_velocity);
  }

  /// initWithTarget:action:
  UIPinchGestureRecognizer initWithTarget_action_(
      objc.ObjCObjectBase? target, ffi.Pointer<objc.ObjCSelector> action) {
    final _ret = _objc_msgSend_127(
        this.ref.retainAndReturnPointer(),
        _sel_initWithTarget_action_,
        target?.ref.pointer ?? ffi.nullptr,
        action);
    return UIPinchGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIPinchGestureRecognizer init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIPinchGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithCoder:
  UIPinchGestureRecognizer? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIPinchGestureRecognizer.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// new
  static UIPinchGestureRecognizer new1() {
    final _ret = _objc_msgSend_4(_class_UIPinchGestureRecognizer, _sel_new);
    return UIPinchGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIPinchGestureRecognizer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIPinchGestureRecognizer, _sel_allocWithZone_, zone);
    return UIPinchGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIPinchGestureRecognizer alloc() {
    final _ret = _objc_msgSend_4(_class_UIPinchGestureRecognizer, _sel_alloc);
    return UIPinchGestureRecognizer.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIPinchGestureRecognizer =
    objc.getClass("UIPinchGestureRecognizer");
late final _sel_velocity = objc.registerName("velocity");
late final _sel_pinchGestureRecognizer =
    objc.registerName("pinchGestureRecognizer");
final _objc_msgSend_457 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_directionalPressGestureRecognizer =
    objc.registerName("directionalPressGestureRecognizer");
final _objc_msgSend_458 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIScrollViewKeyboardDismissMode {
  UIScrollViewKeyboardDismissModeNone(0),
  UIScrollViewKeyboardDismissModeOnDrag(1),
  UIScrollViewKeyboardDismissModeInteractive(2),
  UIScrollViewKeyboardDismissModeOnDragWithAccessory(3),
  UIScrollViewKeyboardDismissModeInteractiveWithAccessory(4);

  final int value;
  const UIScrollViewKeyboardDismissMode(this.value);

  static UIScrollViewKeyboardDismissMode fromValue(int value) =>
      switch (value) {
        0 => UIScrollViewKeyboardDismissModeNone,
        1 => UIScrollViewKeyboardDismissModeOnDrag,
        2 => UIScrollViewKeyboardDismissModeInteractive,
        3 => UIScrollViewKeyboardDismissModeOnDragWithAccessory,
        4 => UIScrollViewKeyboardDismissModeInteractiveWithAccessory,
        _ => throw ArgumentError(
            "Unknown value for UIScrollViewKeyboardDismissMode: $value"),
      };
}

late final _sel_keyboardDismissMode = objc.registerName("keyboardDismissMode");
final _objc_msgSend_459 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setKeyboardDismissMode_ =
    objc.registerName("setKeyboardDismissMode:");
final _objc_msgSend_460 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// UIRefreshControl
class UIRefreshControl extends UIControl {
  UIRefreshControl._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIRefreshControl] that points to the same underlying object as [other].
  UIRefreshControl.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIRefreshControl] that wraps the given raw object pointer.
  UIRefreshControl.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIRefreshControl].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIRefreshControl);
  }

  /// init
  UIRefreshControl init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIRefreshControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// isRefreshing
  bool get refreshing {
    return _objc_msgSend_11(this.ref.pointer, _sel_isRefreshing);
  }

  /// tintColor
  UIColor get tintColor {
    final _ret = _objc_msgSend_352(this.ref.pointer, _sel_tintColor);
    return UIColor.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTintColor:
  set tintColor(UIColor value) {
    return _objc_msgSend_461(
        this.ref.pointer, _sel_setTintColor_, value.ref.pointer);
  }

  /// attributedTitle
  NSAttributedString? get attributedTitle {
    final _ret = _objc_msgSend_462(this.ref.pointer, _sel_attributedTitle);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAttributedTitle:
  set attributedTitle(NSAttributedString? value) {
    return _objc_msgSend_463(this.ref.pointer, _sel_setAttributedTitle_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// beginRefreshing
  void beginRefreshing() {
    _objc_msgSend_12(this.ref.pointer, _sel_beginRefreshing);
  }

  /// endRefreshing
  void endRefreshing() {
    _objc_msgSend_12(this.ref.pointer, _sel_endRefreshing);
  }

  /// initWithFrame:
  UIRefreshControl initWithFrame_(CGRect frame) {
    final _ret = _objc_msgSend_65(
        this.ref.retainAndReturnPointer(), _sel_initWithFrame_, frame);
    return UIRefreshControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIRefreshControl? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIRefreshControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithFrame:primaryAction:
  UIRefreshControl initWithFrame_primaryAction_(
      CGRect frame, UIAction? primaryAction) {
    final _ret = _objc_msgSend_466(
        this.ref.retainAndReturnPointer(),
        _sel_initWithFrame_primaryAction_,
        frame,
        primaryAction?.ref.pointer ?? ffi.nullptr);
    return UIRefreshControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// layerClass
  static objc.ObjCObjectBase getLayerClass() {
    final _ret = _objc_msgSend_4(_class_UIRefreshControl, _sel_layerClass);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_(
          UISemanticContentAttribute attribute) {
    final _ret = _objc_msgSend_119(
        _class_UIRefreshControl,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_,
        attribute.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_(
          UISemanticContentAttribute semanticContentAttribute,
          UIUserInterfaceLayoutDirection layoutDirection) {
    final _ret = _objc_msgSend_120(
        _class_UIRefreshControl,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_,
        semanticContentAttribute.value,
        layoutDirection.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// new
  static UIRefreshControl new1() {
    final _ret = _objc_msgSend_4(_class_UIRefreshControl, _sel_new);
    return UIRefreshControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIRefreshControl allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIRefreshControl, _sel_allocWithZone_, zone);
    return UIRefreshControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIRefreshControl alloc() {
    final _ret = _objc_msgSend_4(_class_UIRefreshControl, _sel_alloc);
    return UIRefreshControl.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIRefreshControl = objc.getClass("UIRefreshControl");
late final _sel_isRefreshing = objc.registerName("isRefreshing");
late final _sel_tintColor = objc.registerName("tintColor");
late final _sel_setTintColor_ = objc.registerName("setTintColor:");
final _objc_msgSend_461 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributedTitle = objc.registerName("attributedTitle");
final _objc_msgSend_462 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAttributedTitle_ = objc.registerName("setAttributedTitle:");
final _objc_msgSend_463 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_beginRefreshing = objc.registerName("beginRefreshing");
late final _sel_endRefreshing = objc.registerName("endRefreshing");

/// UIControl
class UIControl extends UIView {
  UIControl._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIControl] that points to the same underlying object as [other].
  UIControl.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIControl] that wraps the given raw object pointer.
  UIControl.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIControl].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIControl);
  }

  /// initWithFrame:
  UIControl initWithFrame_(CGRect frame) {
    final _ret = _objc_msgSend_65(
        this.ref.retainAndReturnPointer(), _sel_initWithFrame_, frame);
    return UIControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIControl? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithFrame:primaryAction:
  UIControl initWithFrame_primaryAction_(
      CGRect frame, UIAction? primaryAction) {
    final _ret = _objc_msgSend_466(
        this.ref.retainAndReturnPointer(),
        _sel_initWithFrame_primaryAction_,
        frame,
        primaryAction?.ref.pointer ?? ffi.nullptr);
    return UIControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setEnabled_, value);
  }

  /// isSelected
  bool get selected {
    return _objc_msgSend_11(this.ref.pointer, _sel_isSelected);
  }

  /// setSelected:
  set selected(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setSelected_, value);
  }

  /// isHighlighted
  bool get highlighted {
    return _objc_msgSend_11(this.ref.pointer, _sel_isHighlighted);
  }

  /// setHighlighted:
  set highlighted(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setHighlighted_, value);
  }

  /// contentVerticalAlignment
  UIControlContentVerticalAlignment get contentVerticalAlignment {
    final _ret =
        _objc_msgSend_467(this.ref.pointer, _sel_contentVerticalAlignment);
    return UIControlContentVerticalAlignment.fromValue(_ret);
  }

  /// setContentVerticalAlignment:
  set contentVerticalAlignment(UIControlContentVerticalAlignment value) {
    return _objc_msgSend_468(
        this.ref.pointer, _sel_setContentVerticalAlignment_, value.value);
  }

  /// contentHorizontalAlignment
  UIControlContentHorizontalAlignment get contentHorizontalAlignment {
    final _ret =
        _objc_msgSend_469(this.ref.pointer, _sel_contentHorizontalAlignment);
    return UIControlContentHorizontalAlignment.fromValue(_ret);
  }

  /// setContentHorizontalAlignment:
  set contentHorizontalAlignment(UIControlContentHorizontalAlignment value) {
    return _objc_msgSend_470(
        this.ref.pointer, _sel_setContentHorizontalAlignment_, value.value);
  }

  /// effectiveContentHorizontalAlignment
  UIControlContentHorizontalAlignment get effectiveContentHorizontalAlignment {
    final _ret = _objc_msgSend_469(
        this.ref.pointer, _sel_effectiveContentHorizontalAlignment);
    return UIControlContentHorizontalAlignment.fromValue(_ret);
  }

  /// state
  UIControlState get state {
    final _ret = _objc_msgSend_471(this.ref.pointer, _sel_state);
    return UIControlState.fromValue(_ret);
  }

  /// isTracking
  bool get tracking {
    return _objc_msgSend_11(this.ref.pointer, _sel_isTracking);
  }

  /// isTouchInside
  bool get touchInside {
    return _objc_msgSend_11(this.ref.pointer, _sel_isTouchInside);
  }

  /// beginTrackingWithTouch:withEvent:
  bool beginTrackingWithTouch_withEvent_(UITouch touch, UIEvent? event) {
    return _objc_msgSend_478(
        this.ref.pointer,
        _sel_beginTrackingWithTouch_withEvent_,
        touch.ref.pointer,
        event?.ref.pointer ?? ffi.nullptr);
  }

  /// continueTrackingWithTouch:withEvent:
  bool continueTrackingWithTouch_withEvent_(UITouch touch, UIEvent? event) {
    return _objc_msgSend_478(
        this.ref.pointer,
        _sel_continueTrackingWithTouch_withEvent_,
        touch.ref.pointer,
        event?.ref.pointer ?? ffi.nullptr);
  }

  /// endTrackingWithTouch:withEvent:
  void endTrackingWithTouch_withEvent_(UITouch? touch, UIEvent? event) {
    _objc_msgSend_479(this.ref.pointer, _sel_endTrackingWithTouch_withEvent_,
        touch?.ref.pointer ?? ffi.nullptr, event?.ref.pointer ?? ffi.nullptr);
  }

  /// cancelTrackingWithEvent:
  void cancelTrackingWithEvent_(UIEvent? event) {
    _objc_msgSend_139(this.ref.pointer, _sel_cancelTrackingWithEvent_,
        event?.ref.pointer ?? ffi.nullptr);
  }

  /// addTarget:action:forControlEvents:
  void addTarget_action_forControlEvents_(objc.ObjCObjectBase? target,
      ffi.Pointer<objc.ObjCSelector> action, UIControlEvents controlEvents) {
    _objc_msgSend_480(this.ref.pointer, _sel_addTarget_action_forControlEvents_,
        target?.ref.pointer ?? ffi.nullptr, action, controlEvents.value);
  }

  /// removeTarget:action:forControlEvents:
  void removeTarget_action_forControlEvents_(objc.ObjCObjectBase? target,
      ffi.Pointer<objc.ObjCSelector> action, UIControlEvents controlEvents) {
    _objc_msgSend_480(
        this.ref.pointer,
        _sel_removeTarget_action_forControlEvents_,
        target?.ref.pointer ?? ffi.nullptr,
        action,
        controlEvents.value);
  }

  /// addAction:forControlEvents:
  void addAction_forControlEvents_(
      UIAction action, UIControlEvents controlEvents) {
    _objc_msgSend_481(this.ref.pointer, _sel_addAction_forControlEvents_,
        action.ref.pointer, controlEvents.value);
  }

  /// removeAction:forControlEvents:
  void removeAction_forControlEvents_(
      UIAction action, UIControlEvents controlEvents) {
    _objc_msgSend_481(this.ref.pointer, _sel_removeAction_forControlEvents_,
        action.ref.pointer, controlEvents.value);
  }

  /// removeActionForIdentifier:forControlEvents:
  void removeActionForIdentifier_forControlEvents_(
      objc.NSString actionIdentifier, UIControlEvents controlEvents) {
    _objc_msgSend_482(
        this.ref.pointer,
        _sel_removeActionForIdentifier_forControlEvents_,
        actionIdentifier.ref.pointer,
        controlEvents.value);
  }

  /// performPrimaryAction
  void performPrimaryAction() {
    _objc_msgSend_12(this.ref.pointer, _sel_performPrimaryAction);
  }

  /// allTargets
  objc.NSSet get allTargets {
    final _ret = _objc_msgSend_126(this.ref.pointer, _sel_allTargets);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// allControlEvents
  UIControlEvents get allControlEvents {
    final _ret = _objc_msgSend_483(this.ref.pointer, _sel_allControlEvents);
    return UIControlEvents.fromValue(_ret);
  }

  /// actionsForTarget:forControlEvent:
  objc.NSArray? actionsForTarget_forControlEvent_(
      objc.ObjCObjectBase? target, UIControlEvents controlEvent) {
    final _ret = _objc_msgSend_484(
        this.ref.pointer,
        _sel_actionsForTarget_forControlEvent_,
        target?.ref.pointer ?? ffi.nullptr,
        controlEvent.value);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// enumerateEventHandlers:
  void enumerateEventHandlers_(
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCSelector>,
                  ffi.UnsignedLong,
                  ffi.Pointer<ffi.Bool>)>
          iterator) {
    _objc_msgSend_485(
        this.ref.pointer, _sel_enumerateEventHandlers_, iterator.ref.pointer);
  }

  /// sendAction:to:forEvent:
  void sendAction_to_forEvent_(ffi.Pointer<objc.ObjCSelector> action,
      objc.ObjCObjectBase? target, UIEvent? event) {
    _objc_msgSend_486(this.ref.pointer, _sel_sendAction_to_forEvent_, action,
        target?.ref.pointer ?? ffi.nullptr, event?.ref.pointer ?? ffi.nullptr);
  }

  /// sendAction:
  void sendAction_(UIAction action) {
    _objc_msgSend_487(this.ref.pointer, _sel_sendAction_, action.ref.pointer);
  }

  /// sendActionsForControlEvents:
  void sendActionsForControlEvents_(UIControlEvents controlEvents) {
    _objc_msgSend_488(this.ref.pointer, _sel_sendActionsForControlEvents_,
        controlEvents.value);
  }

  /// contextMenuInteraction
  UIContextMenuInteraction? get contextMenuInteraction {
    final _ret =
        _objc_msgSend_499(this.ref.pointer, _sel_contextMenuInteraction);
    return _ret.address == 0
        ? null
        : UIContextMenuInteraction.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// isContextMenuInteractionEnabled
  bool get contextMenuInteractionEnabled {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_isContextMenuInteractionEnabled);
  }

  /// setContextMenuInteractionEnabled:
  set contextMenuInteractionEnabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setContextMenuInteractionEnabled_, value);
  }

  /// showsMenuAsPrimaryAction
  bool get showsMenuAsPrimaryAction {
    return _objc_msgSend_11(this.ref.pointer, _sel_showsMenuAsPrimaryAction);
  }

  /// setShowsMenuAsPrimaryAction:
  set showsMenuAsPrimaryAction(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setShowsMenuAsPrimaryAction_, value);
  }

  /// menuAttachmentPointForConfiguration:
  void menuAttachmentPointForConfiguration_(
      ffi.Pointer<CGPoint> stret, UIContextMenuConfiguration configuration) {
    objc.useMsgSendVariants
        ? _objc_msgSend_504Stret(
            stret,
            this.ref.pointer,
            _sel_menuAttachmentPointForConfiguration_,
            configuration.ref.pointer)
        : stret.ref = _objc_msgSend_504(
            this.ref.pointer,
            _sel_menuAttachmentPointForConfiguration_,
            configuration.ref.pointer);
  }

  /// toolTip
  objc.NSString? get toolTip {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_toolTip);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setToolTip:
  set toolTip(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer, _sel_setToolTip_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// toolTipInteraction
  UIToolTipInteraction? get toolTipInteraction {
    final _ret = _objc_msgSend_505(this.ref.pointer, _sel_toolTipInteraction);
    return _ret.address == 0
        ? null
        : UIToolTipInteraction.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// isSymbolAnimationEnabled
  bool get symbolAnimationEnabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isSymbolAnimationEnabled);
  }

  /// setSymbolAnimationEnabled:
  set symbolAnimationEnabled(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setSymbolAnimationEnabled_, value);
  }

  /// layerClass
  static objc.ObjCObjectBase getLayerClass() {
    final _ret = _objc_msgSend_4(_class_UIControl, _sel_layerClass);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_(
          UISemanticContentAttribute attribute) {
    final _ret = _objc_msgSend_119(
        _class_UIControl,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_,
        attribute.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:
  static UIUserInterfaceLayoutDirection
      userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_(
          UISemanticContentAttribute semanticContentAttribute,
          UIUserInterfaceLayoutDirection layoutDirection) {
    final _ret = _objc_msgSend_120(
        _class_UIControl,
        _sel_userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection_,
        semanticContentAttribute.value,
        layoutDirection.value);
    return UIUserInterfaceLayoutDirection.fromValue(_ret);
  }

  /// init
  UIControl init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIControl new1() {
    final _ret = _objc_msgSend_4(_class_UIControl, _sel_new);
    return UIControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIControl allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIControl, _sel_allocWithZone_, zone);
    return UIControl.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIControl alloc() {
    final _ret = _objc_msgSend_4(_class_UIControl, _sel_alloc);
    return UIControl.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIControl = objc.getClass("UIControl");

/// UIAction
class UIAction extends UIMenuElement {
  UIAction._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIAction] that points to the same underlying object as [other].
  UIAction.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIAction] that wraps the given raw object pointer.
  UIAction.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIAction].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIAction);
  }

  /// title
  objc.NSString get title {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_title);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTitle:
  set title(objc.NSString value) {
    return _objc_msgSend_87(
        this.ref.pointer, _sel_setTitle_, value.ref.pointer);
  }

  /// image
  UIImage? get image {
    final _ret = _objc_msgSend_363(this.ref.pointer, _sel_image);
    return _ret.address == 0
        ? null
        : UIImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// setImage:
  set image(UIImage? value) {
    return _objc_msgSend_367(
        this.ref.pointer, _sel_setImage_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// discoverabilityTitle
  objc.NSString? get discoverabilityTitle {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_discoverabilityTitle);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDiscoverabilityTitle:
  set discoverabilityTitle(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setDiscoverabilityTitle_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// identifier
  objc.NSString get identifier {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_identifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// attributes
  UIMenuElementAttributes get attributes {
    final _ret = _objc_msgSend_369(this.ref.pointer, _sel_attributes);
    return UIMenuElementAttributes.fromValue(_ret);
  }

  /// setAttributes:
  set attributes(UIMenuElementAttributes value) {
    return _objc_msgSend_370(
        this.ref.pointer, _sel_setAttributes_, value.value);
  }

  /// state
  UIMenuElementState get state {
    final _ret = _objc_msgSend_371(this.ref.pointer, _sel_state);
    return UIMenuElementState.fromValue(_ret);
  }

  /// setState:
  set state(UIMenuElementState value) {
    return _objc_msgSend_372(this.ref.pointer, _sel_setState_, value.value);
  }

  /// sender
  objc.ObjCObjectBase? get sender {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_sender);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// actionWithHandler:
  static UIAction actionWithHandler_(
      objc.ObjCBlock<ffi.Void Function(UIAction)> handler) {
    final _ret = _objc_msgSend_464(
        _class_UIAction, _sel_actionWithHandler_, handler.ref.pointer);
    return UIAction.castFromPointer(_ret, retain: true, release: true);
  }

  /// actionWithTitle:image:identifier:handler:
  static UIAction actionWithTitle_image_identifier_handler_(
      objc.NSString title,
      UIImage? image,
      objc.NSString? identifier,
      objc.ObjCBlock<ffi.Void Function(UIAction)> handler) {
    final _ret = _objc_msgSend_465(
        _class_UIAction,
        _sel_actionWithTitle_image_identifier_handler_,
        title.ref.pointer,
        image?.ref.pointer ?? ffi.nullptr,
        identifier?.ref.pointer ?? ffi.nullptr,
        handler.ref.pointer);
    return UIAction.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIAction init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIAction.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIAction new1() {
    final _ret = _objc_msgSend_4(_class_UIAction, _sel_new);
    return UIAction.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCoder:
  UIAction? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIAction.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UIAction allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIAction, _sel_allocWithZone_, zone);
    return UIAction.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIAction alloc() {
    final _ret = _objc_msgSend_4(_class_UIAction, _sel_alloc);
    return UIAction.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIAction = objc.getClass("UIAction");
void _ObjCBlock_ffiVoid_UIAction_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_UIAction_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(UIAction)>`.
abstract final class ObjCBlock_ffiVoid_UIAction {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(UIAction)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(UIAction)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(UIAction)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(UIAction)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                                  ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_UIAction_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(UIAction)> fromFunction(
          void Function(UIAction) fn) =>
      objc.ObjCBlock<ffi.Void Function(UIAction)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_ffiVoid_UIAction_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(UIAction.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(UIAction)> listener(
      void Function(UIAction) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_UIAction_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) =>
            fn(UIAction.castFromPointer(arg0, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_UIAction(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(UIAction)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(UIAction)>`.
extension ObjCBlock_ffiVoid_UIAction_CallExtension
    on objc.ObjCBlock<ffi.Void Function(UIAction)> {
  void call(UIAction arg0) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0.ref.pointer);
}

late final _sel_actionWithHandler_ = objc.registerName("actionWithHandler:");
final _objc_msgSend_464 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> handler)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_actionWithTitle_image_identifier_handler_ =
    objc.registerName("actionWithTitle:image:identifier:handler:");
final _objc_msgSend_465 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> title,
                ffi.Pointer<objc.ObjCObject> image,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.Pointer<objc.ObjCBlockImpl> handler)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_initWithFrame_primaryAction_ =
    objc.registerName("initWithFrame:primaryAction:");
final _objc_msgSend_466 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect frame,
                ffi.Pointer<objc.ObjCObject> primaryAction)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isSelected = objc.registerName("isSelected");
late final _sel_setSelected_ = objc.registerName("setSelected:");
late final _sel_isHighlighted = objc.registerName("isHighlighted");
late final _sel_setHighlighted_ = objc.registerName("setHighlighted:");

enum UIControlContentVerticalAlignment {
  UIControlContentVerticalAlignmentCenter(0),
  UIControlContentVerticalAlignmentTop(1),
  UIControlContentVerticalAlignmentBottom(2),
  UIControlContentVerticalAlignmentFill(3);

  final int value;
  const UIControlContentVerticalAlignment(this.value);

  static UIControlContentVerticalAlignment fromValue(int value) =>
      switch (value) {
        0 => UIControlContentVerticalAlignmentCenter,
        1 => UIControlContentVerticalAlignmentTop,
        2 => UIControlContentVerticalAlignmentBottom,
        3 => UIControlContentVerticalAlignmentFill,
        _ => throw ArgumentError(
            "Unknown value for UIControlContentVerticalAlignment: $value"),
      };
}

late final _sel_contentVerticalAlignment =
    objc.registerName("contentVerticalAlignment");
final _objc_msgSend_467 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setContentVerticalAlignment_ =
    objc.registerName("setContentVerticalAlignment:");
final _objc_msgSend_468 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

enum UIControlContentHorizontalAlignment {
  UIControlContentHorizontalAlignmentCenter(0),
  UIControlContentHorizontalAlignmentLeft(1),
  UIControlContentHorizontalAlignmentRight(2),
  UIControlContentHorizontalAlignmentFill(3),
  UIControlContentHorizontalAlignmentLeading(4),
  UIControlContentHorizontalAlignmentTrailing(5);

  final int value;
  const UIControlContentHorizontalAlignment(this.value);

  static UIControlContentHorizontalAlignment fromValue(int value) =>
      switch (value) {
        0 => UIControlContentHorizontalAlignmentCenter,
        1 => UIControlContentHorizontalAlignmentLeft,
        2 => UIControlContentHorizontalAlignmentRight,
        3 => UIControlContentHorizontalAlignmentFill,
        4 => UIControlContentHorizontalAlignmentLeading,
        5 => UIControlContentHorizontalAlignmentTrailing,
        _ => throw ArgumentError(
            "Unknown value for UIControlContentHorizontalAlignment: $value"),
      };
}

late final _sel_contentHorizontalAlignment =
    objc.registerName("contentHorizontalAlignment");
final _objc_msgSend_469 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setContentHorizontalAlignment_ =
    objc.registerName("setContentHorizontalAlignment:");
final _objc_msgSend_470 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_effectiveContentHorizontalAlignment =
    objc.registerName("effectiveContentHorizontalAlignment");

enum UIControlState {
  UIControlStateNormal(0),
  UIControlStateHighlighted(1),
  UIControlStateDisabled(2),
  UIControlStateSelected(4),
  UIControlStateFocused(8),
  UIControlStateApplication(16711680),
  UIControlStateReserved(4278190080);

  final int value;
  const UIControlState(this.value);

  static UIControlState fromValue(int value) => switch (value) {
        0 => UIControlStateNormal,
        1 => UIControlStateHighlighted,
        2 => UIControlStateDisabled,
        4 => UIControlStateSelected,
        8 => UIControlStateFocused,
        16711680 => UIControlStateApplication,
        4278190080 => UIControlStateReserved,
        _ => throw ArgumentError("Unknown value for UIControlState: $value"),
      };
}

final _objc_msgSend_471 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isTouchInside = objc.registerName("isTouchInside");

/// UITouch
class UITouch extends objc.NSObject {
  UITouch._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UITouch] that points to the same underlying object as [other].
  UITouch.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UITouch] that wraps the given raw object pointer.
  UITouch.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UITouch].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UITouch);
  }

  /// timestamp
  double get timestamp {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_timestamp)
        : _objc_msgSend_24(this.ref.pointer, _sel_timestamp);
  }

  /// phase
  UITouchPhase get phase {
    final _ret = _objc_msgSend_472(this.ref.pointer, _sel_phase);
    return UITouchPhase.fromValue(_ret);
  }

  /// tapCount
  int get tapCount {
    return _objc_msgSend_53(this.ref.pointer, _sel_tapCount);
  }

  /// type
  UITouchType get type {
    final _ret = _objc_msgSend_473(this.ref.pointer, _sel_type);
    return UITouchType.fromValue(_ret);
  }

  /// majorRadius
  double get majorRadius {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_majorRadius)
        : _objc_msgSend_24(this.ref.pointer, _sel_majorRadius);
  }

  /// majorRadiusTolerance
  double get majorRadiusTolerance {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_majorRadiusTolerance)
        : _objc_msgSend_24(this.ref.pointer, _sel_majorRadiusTolerance);
  }

  /// window
  UIWindow? get window {
    final _ret = _objc_msgSend_388(this.ref.pointer, _sel_window);
    return _ret.address == 0
        ? null
        : UIWindow.castFromPointer(_ret, retain: true, release: true);
  }

  /// view
  UIView? get view {
    final _ret = _objc_msgSend_131(this.ref.pointer, _sel_view);
    return _ret.address == 0
        ? null
        : UIView.castFromPointer(_ret, retain: true, release: true);
  }

  /// gestureRecognizers
  objc.NSArray? get gestureRecognizers {
    final _ret = _objc_msgSend_98(this.ref.pointer, _sel_gestureRecognizers);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// locationInView:
  void locationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(stret, this.ref.pointer, _sel_locationInView_,
            view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(this.ref.pointer, _sel_locationInView_,
            view?.ref.pointer ?? ffi.nullptr);
  }

  /// previousLocationInView:
  void previousLocationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(stret, this.ref.pointer,
            _sel_previousLocationInView_, view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(this.ref.pointer,
            _sel_previousLocationInView_, view?.ref.pointer ?? ffi.nullptr);
  }

  /// preciseLocationInView:
  void preciseLocationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(stret, this.ref.pointer,
            _sel_preciseLocationInView_, view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(this.ref.pointer,
            _sel_preciseLocationInView_, view?.ref.pointer ?? ffi.nullptr);
  }

  /// precisePreviousLocationInView:
  void precisePreviousLocationInView_(
      ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(
            stret,
            this.ref.pointer,
            _sel_precisePreviousLocationInView_,
            view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(
            this.ref.pointer,
            _sel_precisePreviousLocationInView_,
            view?.ref.pointer ?? ffi.nullptr);
  }

  /// force
  double get force {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_force)
        : _objc_msgSend_24(this.ref.pointer, _sel_force);
  }

  /// maximumPossibleForce
  double get maximumPossibleForce {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_maximumPossibleForce)
        : _objc_msgSend_24(this.ref.pointer, _sel_maximumPossibleForce);
  }

  /// azimuthAngleInView:
  double azimuthAngleInView_(UIView? view) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_474Fpret(this.ref.pointer, _sel_azimuthAngleInView_,
            view?.ref.pointer ?? ffi.nullptr)
        : _objc_msgSend_474(this.ref.pointer, _sel_azimuthAngleInView_,
            view?.ref.pointer ?? ffi.nullptr);
  }

  /// azimuthUnitVectorInView:
  void azimuthUnitVectorInView_(ffi.Pointer<CGVector> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_475Stret(stret, this.ref.pointer,
            _sel_azimuthUnitVectorInView_, view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_475(this.ref.pointer,
            _sel_azimuthUnitVectorInView_, view?.ref.pointer ?? ffi.nullptr);
  }

  /// altitudeAngle
  double get altitudeAngle {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_altitudeAngle)
        : _objc_msgSend_24(this.ref.pointer, _sel_altitudeAngle);
  }

  /// estimationUpdateIndex
  objc.NSNumber? get estimationUpdateIndex {
    final _ret =
        _objc_msgSend_476(this.ref.pointer, _sel_estimationUpdateIndex);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// estimatedProperties
  UITouchProperties get estimatedProperties {
    final _ret = _objc_msgSend_477(this.ref.pointer, _sel_estimatedProperties);
    return UITouchProperties.fromValue(_ret);
  }

  /// estimatedPropertiesExpectingUpdates
  UITouchProperties get estimatedPropertiesExpectingUpdates {
    final _ret = _objc_msgSend_477(
        this.ref.pointer, _sel_estimatedPropertiesExpectingUpdates);
    return UITouchProperties.fromValue(_ret);
  }

  /// rollAngle
  double get rollAngle {
    return objc.useMsgSendVariants
        ? _objc_msgSend_24Fpret(this.ref.pointer, _sel_rollAngle)
        : _objc_msgSend_24(this.ref.pointer, _sel_rollAngle);
  }

  /// init
  UITouch init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UITouch.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UITouch new1() {
    final _ret = _objc_msgSend_4(_class_UITouch, _sel_new);
    return UITouch.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static UITouch allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UITouch, _sel_allocWithZone_, zone);
    return UITouch.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UITouch alloc() {
    final _ret = _objc_msgSend_4(_class_UITouch, _sel_alloc);
    return UITouch.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UITouch = objc.getClass("UITouch");

enum UITouchPhase {
  UITouchPhaseBegan(0),
  UITouchPhaseMoved(1),
  UITouchPhaseStationary(2),
  UITouchPhaseEnded(3),
  UITouchPhaseCancelled(4),
  UITouchPhaseRegionEntered(5),
  UITouchPhaseRegionMoved(6),
  UITouchPhaseRegionExited(7);

  final int value;
  const UITouchPhase(this.value);

  static UITouchPhase fromValue(int value) => switch (value) {
        0 => UITouchPhaseBegan,
        1 => UITouchPhaseMoved,
        2 => UITouchPhaseStationary,
        3 => UITouchPhaseEnded,
        4 => UITouchPhaseCancelled,
        5 => UITouchPhaseRegionEntered,
        6 => UITouchPhaseRegionMoved,
        7 => UITouchPhaseRegionExited,
        _ => throw ArgumentError("Unknown value for UITouchPhase: $value"),
      };
}

late final _sel_phase = objc.registerName("phase");
final _objc_msgSend_472 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_tapCount = objc.registerName("tapCount");

enum UITouchType {
  UITouchTypeDirect(0),
  UITouchTypeIndirect(1),
  UITouchTypePencil(2),
  UITouchTypeIndirectPointer(3);

  static const UITouchTypeStylus = UITouchTypePencil;

  final int value;
  const UITouchType(this.value);

  static UITouchType fromValue(int value) => switch (value) {
        0 => UITouchTypeDirect,
        1 => UITouchTypeIndirect,
        2 => UITouchTypePencil,
        3 => UITouchTypeIndirectPointer,
        _ => throw ArgumentError("Unknown value for UITouchType: $value"),
      };

  @override
  String toString() {
    if (this == UITouchTypePencil)
      return "UITouchType.UITouchTypePencil, UITouchType.UITouchTypeStylus";
    return super.toString();
  }
}

final _objc_msgSend_473 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_majorRadius = objc.registerName("majorRadius");
late final _sel_majorRadiusTolerance =
    objc.registerName("majorRadiusTolerance");
late final _sel_window = objc.registerName("window");
late final _sel_gestureRecognizers = objc.registerName("gestureRecognizers");
late final _sel_previousLocationInView_ =
    objc.registerName("previousLocationInView:");
late final _sel_preciseLocationInView_ =
    objc.registerName("preciseLocationInView:");
late final _sel_precisePreviousLocationInView_ =
    objc.registerName("precisePreviousLocationInView:");
late final _sel_force = objc.registerName("force");
late final _sel_maximumPossibleForce =
    objc.registerName("maximumPossibleForce");
late final _sel_azimuthAngleInView_ = objc.registerName("azimuthAngleInView:");
final _objc_msgSend_474 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_474Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

final class CGVector extends ffi.Struct {
  @ffi.Double()
  external double dx;

  @ffi.Double()
  external double dy;
}

late final _sel_azimuthUnitVectorInView_ =
    objc.registerName("azimuthUnitVectorInView:");
final _objc_msgSend_475 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGVector Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        CGVector Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_475Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGVector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        void Function(ffi.Pointer<CGVector>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_altitudeAngle = objc.registerName("altitudeAngle");
late final _sel_estimationUpdateIndex =
    objc.registerName("estimationUpdateIndex");
final _objc_msgSend_476 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UITouchProperties {
  UITouchPropertyForce(1),
  UITouchPropertyAzimuth(2),
  UITouchPropertyAltitude(4),
  UITouchPropertyLocation(8),
  UITouchPropertyRoll(16);

  final int value;
  const UITouchProperties(this.value);

  static UITouchProperties fromValue(int value) => switch (value) {
        1 => UITouchPropertyForce,
        2 => UITouchPropertyAzimuth,
        4 => UITouchPropertyAltitude,
        8 => UITouchPropertyLocation,
        16 => UITouchPropertyRoll,
        _ => throw ArgumentError("Unknown value for UITouchProperties: $value"),
      };
}

late final _sel_estimatedProperties = objc.registerName("estimatedProperties");
final _objc_msgSend_477 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_estimatedPropertiesExpectingUpdates =
    objc.registerName("estimatedPropertiesExpectingUpdates");
late final _sel_rollAngle = objc.registerName("rollAngle");
late final _sel_beginTrackingWithTouch_withEvent_ =
    objc.registerName("beginTrackingWithTouch:withEvent:");
final _objc_msgSend_478 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> touch,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_continueTrackingWithTouch_withEvent_ =
    objc.registerName("continueTrackingWithTouch:withEvent:");
late final _sel_endTrackingWithTouch_withEvent_ =
    objc.registerName("endTrackingWithTouch:withEvent:");
final _objc_msgSend_479 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> touch,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelTrackingWithEvent_ =
    objc.registerName("cancelTrackingWithEvent:");

enum UIControlEvents {
  UIControlEventTouchDown(1),
  UIControlEventTouchDownRepeat(2),
  UIControlEventTouchDragInside(4),
  UIControlEventTouchDragOutside(8),
  UIControlEventTouchDragEnter(16),
  UIControlEventTouchDragExit(32),
  UIControlEventTouchUpInside(64),
  UIControlEventTouchUpOutside(128),
  UIControlEventTouchCancel(256),
  UIControlEventValueChanged(4096),
  UIControlEventPrimaryActionTriggered(8192),
  UIControlEventMenuActionTriggered(16384),
  UIControlEventEditingDidBegin(65536),
  UIControlEventEditingChanged(131072),
  UIControlEventEditingDidEnd(262144),
  UIControlEventEditingDidEndOnExit(524288),
  UIControlEventAllTouchEvents(4095),
  UIControlEventAllEditingEvents(983040),
  UIControlEventApplicationReserved(251658240),
  UIControlEventSystemReserved(4026531840),
  UIControlEventAllEvents(4294967295);

  final int value;
  const UIControlEvents(this.value);

  static UIControlEvents fromValue(int value) => switch (value) {
        1 => UIControlEventTouchDown,
        2 => UIControlEventTouchDownRepeat,
        4 => UIControlEventTouchDragInside,
        8 => UIControlEventTouchDragOutside,
        16 => UIControlEventTouchDragEnter,
        32 => UIControlEventTouchDragExit,
        64 => UIControlEventTouchUpInside,
        128 => UIControlEventTouchUpOutside,
        256 => UIControlEventTouchCancel,
        4096 => UIControlEventValueChanged,
        8192 => UIControlEventPrimaryActionTriggered,
        16384 => UIControlEventMenuActionTriggered,
        65536 => UIControlEventEditingDidBegin,
        131072 => UIControlEventEditingChanged,
        262144 => UIControlEventEditingDidEnd,
        524288 => UIControlEventEditingDidEndOnExit,
        4095 => UIControlEventAllTouchEvents,
        983040 => UIControlEventAllEditingEvents,
        251658240 => UIControlEventApplicationReserved,
        4026531840 => UIControlEventSystemReserved,
        4294967295 => UIControlEventAllEvents,
        _ => throw ArgumentError("Unknown value for UIControlEvents: $value"),
      };
}

late final _sel_addTarget_action_forControlEvents_ =
    objc.registerName("addTarget:action:forControlEvents:");
final _objc_msgSend_480 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.UnsignedLong controlEvents)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int)>();
late final _sel_removeTarget_action_forControlEvents_ =
    objc.registerName("removeTarget:action:forControlEvents:");
late final _sel_addAction_forControlEvents_ =
    objc.registerName("addAction:forControlEvents:");
final _objc_msgSend_481 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> action,
                ffi.UnsignedLong controlEvents)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_removeAction_forControlEvents_ =
    objc.registerName("removeAction:forControlEvents:");
late final _sel_removeActionForIdentifier_forControlEvents_ =
    objc.registerName("removeActionForIdentifier:forControlEvents:");
final _objc_msgSend_482 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> actionIdentifier,
                ffi.UnsignedLong controlEvents)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_performPrimaryAction =
    objc.registerName("performPrimaryAction");
late final _sel_allTargets = objc.registerName("allTargets");
late final _sel_allControlEvents = objc.registerName("allControlEvents");
final _objc_msgSend_483 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_actionsForTarget_forControlEvent_ =
    objc.registerName("actionsForTarget:forControlEvent:");
final _objc_msgSend_484 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.UnsignedLong controlEvent)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
void
    _ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCSelector> arg2,
            int arg3,
            ffi.Pointer<ffi.Bool> arg4) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCSelector> arg2,
                        ffi.UnsignedLong arg3,
                        ffi.Pointer<ffi.Bool> arg4)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCSelector>,
                    int,
                    ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2, arg3, arg4);
void
    _ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCSelector> arg2,
            int arg3,
            ffi.Pointer<ffi.Bool> arg4) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2, arg3, arg4);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>`.
abstract final class ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Bool>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCSelector>,
                  ffi.UnsignedLong,
                  ffi.Pointer<ffi.Bool>)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Bool>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCSelector> arg2, ffi.UnsignedLong arg3, ffi.Pointer<ffi.Bool> arg4)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCSelector>,
                      ffi.UnsignedLong,
                      ffi.Pointer<ffi.Bool>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(_ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>
      fromFunction(void Function(UIAction?, objc.ObjCObjectBase?, ffi.Pointer<objc.ObjCSelector>, UIControlEvents, ffi.Pointer<ffi.Bool>) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(_ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool_closureTrampoline)
                          .cast(),
                  (ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCSelector> arg2,
                          int arg3,
                          ffi.Pointer<ffi.Bool> arg4) =>
                      fn(arg0.address == 0 ? null : UIAction.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.ObjCObjectBase(arg1, retain: true, release: true), arg2, UIControlEvents.fromValue(arg3), arg4)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.UnsignedLong,
          ffi.Pointer<ffi.Bool>)> listener(
      void Function(
              UIAction?,
              objc.ObjCObjectBase?,
              ffi.Pointer<objc.ObjCSelector>,
              UIControlEvents,
              ffi.Pointer<ffi.Bool>)
          fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCSelector>,
                        ffi.UnsignedLong,
                        ffi.Pointer<ffi.Bool>)>.listener(
                _ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0,
                ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCSelector> arg2,
                int arg3,
                ffi.Pointer<ffi.Bool> arg4) =>
            fn(
                arg0.address == 0 ? null : UIAction.castFromPointer(arg0, retain: false, release: true),
                arg1.address == 0 ? null : objc.ObjCObjectBase(arg1, retain: false, release: true),
                arg2,
                UIControlEvents.fromValue(arg3),
                arg4));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.UnsignedLong,
            ffi.Pointer<ffi.Bool>)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.UnsignedLong,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>`.
extension ObjCBlock_ffiVoid_UIAction_objcObjCObject_objcObjCSelector_UIControlEvents_bool_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.UnsignedLong,
            ffi.Pointer<ffi.Bool>)> {
  void call(
          UIAction? arg0,
          objc.ObjCObjectBase? arg1,
          ffi.Pointer<objc.ObjCSelector> arg2,
          UIControlEvents arg3,
          ffi.Pointer<ffi.Bool> arg4) =>
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCSelector> arg2,
                          ffi.UnsignedLong arg3,
                          ffi.Pointer<ffi.Bool> arg4)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCSelector>,
                      int,
                      ffi.Pointer<ffi.Bool>)>()(
          ref.pointer,
          arg0?.ref.pointer ?? ffi.nullptr,
          arg1?.ref.pointer ?? ffi.nullptr,
          arg2,
          arg3.value,
          arg4);
}

late final _sel_enumerateEventHandlers_ =
    objc.registerName("enumerateEventHandlers:");
final _objc_msgSend_485 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> iterator)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_sendAction_to_forEvent_ =
    objc.registerName("sendAction:to:forEvent:");
final _objc_msgSend_486 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sendAction_ = objc.registerName("sendAction:");
final _objc_msgSend_487 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> action)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sendActionsForControlEvents_ =
    objc.registerName("sendActionsForControlEvents:");
final _objc_msgSend_488 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong controlEvents)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// UIContextMenuInteraction
class UIContextMenuInteraction extends objc.NSObject {
  UIContextMenuInteraction._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIContextMenuInteraction] that points to the same underlying object as [other].
  UIContextMenuInteraction.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIContextMenuInteraction] that wraps the given raw object pointer.
  UIContextMenuInteraction.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIContextMenuInteraction].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIContextMenuInteraction);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// menuAppearance
  UIContextMenuInteractionAppearance get menuAppearance {
    final _ret = _objc_msgSend_489(this.ref.pointer, _sel_menuAppearance);
    return UIContextMenuInteractionAppearance.fromValue(_ret);
  }

  /// initWithDelegate:
  UIContextMenuInteraction initWithDelegate_(objc.ObjCObjectBase delegate) {
    final _ret = _objc_msgSend_67(this.ref.retainAndReturnPointer(),
        _sel_initWithDelegate_, delegate.ref.pointer);
    return UIContextMenuInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIContextMenuInteraction init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIContextMenuInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIContextMenuInteraction new1() {
    final _ret = _objc_msgSend_4(_class_UIContextMenuInteraction, _sel_new);
    return UIContextMenuInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// locationInView:
  void locationInView_(ffi.Pointer<CGPoint> stret, UIView? view) {
    objc.useMsgSendVariants
        ? _objc_msgSend_134Stret(stret, this.ref.pointer, _sel_locationInView_,
            view?.ref.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_134(this.ref.pointer, _sel_locationInView_,
            view?.ref.pointer ?? ffi.nullptr);
  }

  /// updateVisibleMenuWithBlock:
  void updateVisibleMenuWithBlock_(
      objc.ObjCBlock<UIMenu Function(UIMenu)> block) {
    _objc_msgSend_498(
        this.ref.pointer, _sel_updateVisibleMenuWithBlock_, block.ref.pointer);
  }

  /// dismissMenu
  void dismissMenu() {
    _objc_msgSend_12(this.ref.pointer, _sel_dismissMenu);
  }

  /// allocWithZone:
  static UIContextMenuInteraction allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIContextMenuInteraction, _sel_allocWithZone_, zone);
    return UIContextMenuInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIContextMenuInteraction alloc() {
    final _ret = _objc_msgSend_4(_class_UIContextMenuInteraction, _sel_alloc);
    return UIContextMenuInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIContextMenuInteraction =
    objc.getClass("UIContextMenuInteraction");

enum UIContextMenuInteractionAppearance {
  UIContextMenuInteractionAppearanceUnknown(0),
  UIContextMenuInteractionAppearanceRich(1),
  UIContextMenuInteractionAppearanceCompact(2);

  final int value;
  const UIContextMenuInteractionAppearance(this.value);

  static UIContextMenuInteractionAppearance fromValue(int value) =>
      switch (value) {
        0 => UIContextMenuInteractionAppearanceUnknown,
        1 => UIContextMenuInteractionAppearanceRich,
        2 => UIContextMenuInteractionAppearanceCompact,
        _ => throw ArgumentError(
            "Unknown value for UIContextMenuInteractionAppearance: $value"),
      };
}

late final _sel_menuAppearance = objc.registerName("menuAppearance");
final _objc_msgSend_489 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithDelegate_ = objc.registerName("initWithDelegate:");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_UIMenu_UIMenu_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>)>()(arg0);
ffi.Pointer<objc.ObjCObject> _ObjCBlock_UIMenu_UIMenu_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<UIMenu Function(UIMenu)>`.
abstract final class ObjCBlock_UIMenu_UIMenu {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<UIMenu Function(UIMenu)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<UIMenu Function(UIMenu)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<UIMenu Function(UIMenu)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject> arg0)>>
              ptr) =>
      objc.ObjCBlock<UIMenu Function(UIMenu)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_UIMenu_UIMenu_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<UIMenu Function(UIMenu)> fromFunction(UIMenu Function(UIMenu) fn) =>
      objc.ObjCBlock<UIMenu Function(UIMenu)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_UIMenu_UIMenu_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(UIMenu.castFromPointer(arg0, retain: true, release: true))
                      .ref
                      .retainAndAutorelease()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<UIMenu Function(UIMenu)>`.
extension ObjCBlock_UIMenu_UIMenu_CallExtension
    on objc.ObjCBlock<UIMenu Function(UIMenu)> {
  UIMenu call(UIMenu arg0) => UIMenu.castFromPointer(
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          ref.pointer, arg0.ref.pointer),
      retain: true,
      release: true);
}

/// UIMenu
class UIMenu extends UIMenuElement {
  UIMenu._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIMenu] that points to the same underlying object as [other].
  UIMenu.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIMenu] that wraps the given raw object pointer.
  UIMenu.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIMenu].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_, _class_UIMenu);
  }

  /// identifier
  objc.NSString get identifier {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_identifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// options
  UIMenuOptions get options {
    final _ret = _objc_msgSend_490(this.ref.pointer, _sel_options);
    return UIMenuOptions.fromValue(_ret);
  }

  /// preferredElementSize
  UIMenuElementSize get preferredElementSize {
    final _ret = _objc_msgSend_491(this.ref.pointer, _sel_preferredElementSize);
    return UIMenuElementSize.fromValue(_ret);
  }

  /// setPreferredElementSize:
  set preferredElementSize(UIMenuElementSize value) {
    return _objc_msgSend_492(
        this.ref.pointer, _sel_setPreferredElementSize_, value.value);
  }

  /// children
  objc.NSArray get children {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_children);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// selectedElements
  objc.NSArray get selectedElements {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_selectedElements);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// displayPreferences
  UIMenuDisplayPreferences? get displayPreferences {
    final _ret = _objc_msgSend_493(this.ref.pointer, _sel_displayPreferences);
    return _ret.address == 0
        ? null
        : UIMenuDisplayPreferences.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setDisplayPreferences:
  set displayPreferences(UIMenuDisplayPreferences? value) {
    return _objc_msgSend_494(this.ref.pointer, _sel_setDisplayPreferences_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// menuWithChildren:
  static UIMenu menuWithChildren_(objc.NSArray children) {
    final _ret = _objc_msgSend_495(
        _class_UIMenu, _sel_menuWithChildren_, children.ref.pointer);
    return UIMenu.castFromPointer(_ret, retain: true, release: true);
  }

  /// menuWithTitle:children:
  static UIMenu menuWithTitle_children_(
      objc.NSString title, objc.NSArray children) {
    final _ret = _objc_msgSend_496(_class_UIMenu, _sel_menuWithTitle_children_,
        title.ref.pointer, children.ref.pointer);
    return UIMenu.castFromPointer(_ret, retain: true, release: true);
  }

  /// menuWithTitle:image:identifier:options:children:
  static UIMenu menuWithTitle_image_identifier_options_children_(
      objc.NSString title,
      UIImage? image,
      objc.NSString? identifier,
      UIMenuOptions options,
      objc.NSArray children) {
    final _ret = _objc_msgSend_497(
        _class_UIMenu,
        _sel_menuWithTitle_image_identifier_options_children_,
        title.ref.pointer,
        image?.ref.pointer ?? ffi.nullptr,
        identifier?.ref.pointer ?? ffi.nullptr,
        options.value,
        children.ref.pointer);
    return UIMenu.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithCoder:
  UIMenu? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UIMenu.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  UIMenu init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIMenu.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static UIMenu new1() {
    final _ret = _objc_msgSend_4(_class_UIMenu, _sel_new);
    return UIMenu.castFromPointer(_ret, retain: false, release: true);
  }

  /// menuByReplacingChildren:
  UIMenu menuByReplacingChildren_(objc.NSArray newChildren) {
    final _ret = _objc_msgSend_495(this.ref.pointer,
        _sel_menuByReplacingChildren_, newChildren.ref.pointer);
    return UIMenu.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static UIMenu allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_UIMenu, _sel_allocWithZone_, zone);
    return UIMenu.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static UIMenu alloc() {
    final _ret = _objc_msgSend_4(_class_UIMenu, _sel_alloc);
    return UIMenu.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_UIMenu = objc.getClass("UIMenu");

enum UIMenuOptions {
  UIMenuOptionsDisplayInline(1),
  UIMenuOptionsDestructive(2),
  UIMenuOptionsSingleSelection(32),
  UIMenuOptionsDisplayAsPalette(128);

  final int value;
  const UIMenuOptions(this.value);

  static UIMenuOptions fromValue(int value) => switch (value) {
        1 => UIMenuOptionsDisplayInline,
        2 => UIMenuOptionsDestructive,
        32 => UIMenuOptionsSingleSelection,
        128 => UIMenuOptionsDisplayAsPalette,
        _ => throw ArgumentError("Unknown value for UIMenuOptions: $value"),
      };
}

late final _sel_options = objc.registerName("options");
final _objc_msgSend_490 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UIMenuElementSize {
  UIMenuElementSizeSmall(0),
  UIMenuElementSizeMedium(1),
  UIMenuElementSizeLarge(2),
  UIMenuElementSizeAutomatic(-1);

  final int value;
  const UIMenuElementSize(this.value);

  static UIMenuElementSize fromValue(int value) => switch (value) {
        0 => UIMenuElementSizeSmall,
        1 => UIMenuElementSizeMedium,
        2 => UIMenuElementSizeLarge,
        -1 => UIMenuElementSizeAutomatic,
        _ => throw ArgumentError("Unknown value for UIMenuElementSize: $value"),
      };
}

late final _sel_preferredElementSize =
    objc.registerName("preferredElementSize");
final _objc_msgSend_491 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreferredElementSize_ =
    objc.registerName("setPreferredElementSize:");
final _objc_msgSend_492 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_children = objc.registerName("children");
late final _sel_selectedElements = objc.registerName("selectedElements");

/// UIMenuDisplayPreferences
class UIMenuDisplayPreferences extends objc.NSObject {
  UIMenuDisplayPreferences._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIMenuDisplayPreferences] that points to the same underlying object as [other].
  UIMenuDisplayPreferences.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIMenuDisplayPreferences] that wraps the given raw object pointer.
  UIMenuDisplayPreferences.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIMenuDisplayPreferences].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIMenuDisplayPreferences);
  }

  /// maximumNumberOfTitleLines
  int get maximumNumberOfTitleLines {
    return _objc_msgSend_59(this.ref.pointer, _sel_maximumNumberOfTitleLines);
  }

  /// setMaximumNumberOfTitleLines:
  set maximumNumberOfTitleLines(int value) {
    return _objc_msgSend_60(
        this.ref.pointer, _sel_setMaximumNumberOfTitleLines_, value);
  }

  /// init
  UIMenuDisplayPreferences init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIMenuDisplayPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIMenuDisplayPreferences new1() {
    final _ret = _objc_msgSend_4(_class_UIMenuDisplayPreferences, _sel_new);
    return UIMenuDisplayPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIMenuDisplayPreferences allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIMenuDisplayPreferences, _sel_allocWithZone_, zone);
    return UIMenuDisplayPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIMenuDisplayPreferences alloc() {
    final _ret = _objc_msgSend_4(_class_UIMenuDisplayPreferences, _sel_alloc);
    return UIMenuDisplayPreferences.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIMenuDisplayPreferences =
    objc.getClass("UIMenuDisplayPreferences");
late final _sel_maximumNumberOfTitleLines =
    objc.registerName("maximumNumberOfTitleLines");
late final _sel_setMaximumNumberOfTitleLines_ =
    objc.registerName("setMaximumNumberOfTitleLines:");
late final _sel_displayPreferences = objc.registerName("displayPreferences");
final _objc_msgSend_493 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDisplayPreferences_ =
    objc.registerName("setDisplayPreferences:");
final _objc_msgSend_494 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_menuWithChildren_ = objc.registerName("menuWithChildren:");
final _objc_msgSend_495 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> children)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_menuWithTitle_children_ =
    objc.registerName("menuWithTitle:children:");
final _objc_msgSend_496 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> title,
                ffi.Pointer<objc.ObjCObject> children)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_menuWithTitle_image_identifier_options_children_ =
    objc.registerName("menuWithTitle:image:identifier:options:children:");
final _objc_msgSend_497 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> title,
                ffi.Pointer<objc.ObjCObject> image,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.UnsignedLong options,
                ffi.Pointer<objc.ObjCObject> children)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_menuByReplacingChildren_ =
    objc.registerName("menuByReplacingChildren:");
late final _sel_updateVisibleMenuWithBlock_ =
    objc.registerName("updateVisibleMenuWithBlock:");
final _objc_msgSend_498 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> block)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_dismissMenu = objc.registerName("dismissMenu");
late final _sel_contextMenuInteraction =
    objc.registerName("contextMenuInteraction");
final _objc_msgSend_499 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isContextMenuInteractionEnabled =
    objc.registerName("isContextMenuInteractionEnabled");
late final _sel_setContextMenuInteractionEnabled_ =
    objc.registerName("setContextMenuInteractionEnabled:");
late final _sel_showsMenuAsPrimaryAction =
    objc.registerName("showsMenuAsPrimaryAction");
late final _sel_setShowsMenuAsPrimaryAction_ =
    objc.registerName("setShowsMenuAsPrimaryAction:");

/// UIContextMenuConfiguration
class UIContextMenuConfiguration extends objc.NSObject {
  UIContextMenuConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIContextMenuConfiguration] that points to the same underlying object as [other].
  UIContextMenuConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIContextMenuConfiguration] that wraps the given raw object pointer.
  UIContextMenuConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIContextMenuConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UIContextMenuConfiguration);
  }

  /// identifier
  objc.ObjCObjectBase get identifier {
    final _ret = _objc_msgSend_4(this.ref.pointer, _sel_identifier);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// secondaryItemIdentifiers
  objc.NSSet get secondaryItemIdentifiers {
    final _ret =
        _objc_msgSend_126(this.ref.pointer, _sel_secondaryItemIdentifiers);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSecondaryItemIdentifiers:
  set secondaryItemIdentifiers(objc.NSSet value) {
    return _objc_msgSend_500(
        this.ref.pointer, _sel_setSecondaryItemIdentifiers_, value.ref.pointer);
  }

  /// badgeCount
  int get badgeCount {
    return _objc_msgSend_59(this.ref.pointer, _sel_badgeCount);
  }

  /// setBadgeCount:
  set badgeCount(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setBadgeCount_, value);
  }

  /// preferredMenuElementOrder
  UIContextMenuConfigurationElementOrder get preferredMenuElementOrder {
    final _ret =
        _objc_msgSend_501(this.ref.pointer, _sel_preferredMenuElementOrder);
    return UIContextMenuConfigurationElementOrder.fromValue(_ret);
  }

  /// setPreferredMenuElementOrder:
  set preferredMenuElementOrder(UIContextMenuConfigurationElementOrder value) {
    return _objc_msgSend_502(
        this.ref.pointer, _sel_setPreferredMenuElementOrder_, value.value);
  }

  /// configurationWithIdentifier:previewProvider:actionProvider:
  static UIContextMenuConfiguration
      configurationWithIdentifier_previewProvider_actionProvider_(
          objc.ObjCObjectBase? identifier,
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>?
              previewProvider,
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>?
              actionProvider) {
    final _ret = _objc_msgSend_503(
        _class_UIContextMenuConfiguration,
        _sel_configurationWithIdentifier_previewProvider_actionProvider_,
        identifier?.ref.pointer ?? ffi.nullptr,
        previewProvider?.ref.pointer ?? ffi.nullptr,
        actionProvider?.ref.pointer ?? ffi.nullptr);
    return UIContextMenuConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  UIContextMenuConfiguration init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIContextMenuConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIContextMenuConfiguration new1() {
    final _ret = _objc_msgSend_4(_class_UIContextMenuConfiguration, _sel_new);
    return UIContextMenuConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIContextMenuConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIContextMenuConfiguration, _sel_allocWithZone_, zone);
    return UIContextMenuConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIContextMenuConfiguration alloc() {
    final _ret = _objc_msgSend_4(_class_UIContextMenuConfiguration, _sel_alloc);
    return UIContextMenuConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIContextMenuConfiguration =
    objc.getClass("UIContextMenuConfiguration");
late final _sel_secondaryItemIdentifiers =
    objc.registerName("secondaryItemIdentifiers");
late final _sel_setSecondaryItemIdentifiers_ =
    objc.registerName("setSecondaryItemIdentifiers:");
final _objc_msgSend_500 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_badgeCount = objc.registerName("badgeCount");
late final _sel_setBadgeCount_ = objc.registerName("setBadgeCount:");

enum UIContextMenuConfigurationElementOrder {
  UIContextMenuConfigurationElementOrderAutomatic(0),
  UIContextMenuConfigurationElementOrderPriority(1),
  UIContextMenuConfigurationElementOrderFixed(2);

  final int value;
  const UIContextMenuConfigurationElementOrder(this.value);

  static UIContextMenuConfigurationElementOrder fromValue(int value) =>
      switch (value) {
        0 => UIContextMenuConfigurationElementOrderAutomatic,
        1 => UIContextMenuConfigurationElementOrderPriority,
        2 => UIContextMenuConfigurationElementOrderFixed,
        _ => throw ArgumentError(
            "Unknown value for UIContextMenuConfigurationElementOrder: $value"),
      };
}

late final _sel_preferredMenuElementOrder =
    objc.registerName("preferredMenuElementOrder");
final _objc_msgSend_501 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreferredMenuElementOrder_ =
    objc.registerName("setPreferredMenuElementOrder:");
final _objc_msgSend_502 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
ffi.Pointer<objc.ObjCObject> _ObjCBlock_UIViewController_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function()>>()
        .asFunction<ffi.Pointer<objc.ObjCObject> Function()>()();
ffi.Pointer<objc.ObjCObject> _ObjCBlock_UIViewController_closureTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function())();

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>`.
abstract final class ObjCBlock_UIViewController {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function()>>
              ptr) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>(
          objc.newPointerBlock(
              _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_UIViewController_fnPtrTrampoline)
                  .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()> fromFunction(
          UIViewController? Function() fn) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>)>(
                      _ObjCBlock_UIViewController_closureTrampoline)
                  .cast(),
              () => fn()?.ref.retainAndAutorelease() ?? ffi.nullptr),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()>`.
extension ObjCBlock_UIViewController_CallExtension
    on objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function()> {
  UIViewController? call() => ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl>)>()(
                ref.pointer,
              )
              .address ==
          0
      ? null
      : UIViewController.castFromPointer(
          ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl>)>()(
            ref.pointer,
          ),
          retain: true,
          release: true);
}

ffi.Pointer<objc.ObjCObject> _ObjCBlock_UIMenu_NSArray_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>)>()(arg0);
ffi.Pointer<objc.ObjCObject> _ObjCBlock_UIMenu_NSArray_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>`.
abstract final class ObjCBlock_UIMenu_NSArray {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_UIMenu_NSArray_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)> fromFunction(
          UIMenu? Function(objc.NSArray) fn) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                      _ObjCBlock_UIMenu_NSArray_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(objc.NSArray.castFromPointer(arg0, retain: true, release: true))
                      ?.ref
                      .retainAndAutorelease() ??
                  ffi.nullptr),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)>`.
extension ObjCBlock_UIMenu_NSArray_CallExtension
    on objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSArray)> {
  UIMenu? call(objc.NSArray arg0) => ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()
              (ref.pointer, arg0.ref.pointer)
              .address ==
          0
      ? null
      : UIMenu.castFromPointer(
          ref.pointer.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0.ref.pointer),
          retain: true,
          release: true);
}

late final _sel_configurationWithIdentifier_previewProvider_actionProvider_ =
    objc.registerName(
        "configurationWithIdentifier:previewProvider:actionProvider:");
final _objc_msgSend_503 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.Pointer<objc.ObjCBlockImpl> previewProvider,
                ffi.Pointer<objc.ObjCBlockImpl> actionProvider)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_menuAttachmentPointForConfiguration_ =
    objc.registerName("menuAttachmentPointForConfiguration:");
final _objc_msgSend_504 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        CGPoint Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_504Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> configuration)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_toolTip = objc.registerName("toolTip");
late final _sel_setToolTip_ = objc.registerName("setToolTip:");

/// UIToolTipInteraction
class UIToolTipInteraction extends objc.NSObject {
  UIToolTipInteraction._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIToolTipInteraction] that points to the same underlying object as [other].
  UIToolTipInteraction.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIToolTipInteraction] that wraps the given raw object pointer.
  UIToolTipInteraction.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIToolTipInteraction].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIToolTipInteraction);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// isEnabled
  bool get enabled {
    return _objc_msgSend_11(this.ref.pointer, _sel_isEnabled);
  }

  /// setEnabled:
  set enabled(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setEnabled_, value);
  }

  /// defaultToolTip
  objc.NSString? get defaultToolTip {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_defaultToolTip);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDefaultToolTip:
  set defaultToolTip(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setDefaultToolTip_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// init
  UIToolTipInteraction init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIToolTipInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithDefaultToolTip:
  UIToolTipInteraction initWithDefaultToolTip_(objc.NSString defaultToolTip) {
    final _ret = _objc_msgSend_103(this.ref.retainAndReturnPointer(),
        _sel_initWithDefaultToolTip_, defaultToolTip.ref.pointer);
    return UIToolTipInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIToolTipInteraction new1() {
    final _ret = _objc_msgSend_4(_class_UIToolTipInteraction, _sel_new);
    return UIToolTipInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIToolTipInteraction allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIToolTipInteraction, _sel_allocWithZone_, zone);
    return UIToolTipInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIToolTipInteraction alloc() {
    final _ret = _objc_msgSend_4(_class_UIToolTipInteraction, _sel_alloc);
    return UIToolTipInteraction.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIToolTipInteraction = objc.getClass("UIToolTipInteraction");
late final _sel_defaultToolTip = objc.registerName("defaultToolTip");
late final _sel_setDefaultToolTip_ = objc.registerName("setDefaultToolTip:");
late final _sel_initWithDefaultToolTip_ =
    objc.registerName("initWithDefaultToolTip:");
late final _sel_toolTipInteraction = objc.registerName("toolTipInteraction");
final _objc_msgSend_505 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isSymbolAnimationEnabled =
    objc.registerName("isSymbolAnimationEnabled");
late final _sel_setSymbolAnimationEnabled_ =
    objc.registerName("setSymbolAnimationEnabled:");
late final _sel_refreshControl = objc.registerName("refreshControl");
final _objc_msgSend_506 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRefreshControl_ = objc.registerName("setRefreshControl:");
final _objc_msgSend_507 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allowsKeyboardScrolling =
    objc.registerName("allowsKeyboardScrolling");
late final _sel_setAllowsKeyboardScrolling_ =
    objc.registerName("setAllowsKeyboardScrolling:");

enum NSDirectionalRectEdge {
  NSDirectionalRectEdgeNone(0),
  NSDirectionalRectEdgeTop(1),
  NSDirectionalRectEdgeLeading(2),
  NSDirectionalRectEdgeBottom(4),
  NSDirectionalRectEdgeTrailing(8),
  NSDirectionalRectEdgeAll(15);

  final int value;
  const NSDirectionalRectEdge(this.value);

  static NSDirectionalRectEdge fromValue(int value) => switch (value) {
        0 => NSDirectionalRectEdgeNone,
        1 => NSDirectionalRectEdgeTop,
        2 => NSDirectionalRectEdgeLeading,
        4 => NSDirectionalRectEdgeBottom,
        8 => NSDirectionalRectEdgeTrailing,
        15 => NSDirectionalRectEdgeAll,
        _ => throw ArgumentError(
            "Unknown value for NSDirectionalRectEdge: $value"),
      };
}

late final _sel_setContentScrollView_forEdge_ =
    objc.registerName("setContentScrollView:forEdge:");
final _objc_msgSend_508 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> scrollView,
                ffi.UnsignedLong edge)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_contentScrollViewForEdge_ =
    objc.registerName("contentScrollViewForEdge:");
final _objc_msgSend_509 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong edge)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_preferredContentSize =
    objc.registerName("preferredContentSize");
late final _sel_setPreferredContentSize_ =
    objc.registerName("setPreferredContentSize:");

enum UIStatusBarStyle {
  UIStatusBarStyleDefault(0),
  UIStatusBarStyleLightContent(1),
  UIStatusBarStyleDarkContent(3),
  UIStatusBarStyleBlackOpaque(2);

  static const UIStatusBarStyleBlackTranslucent = UIStatusBarStyleLightContent;

  final int value;
  const UIStatusBarStyle(this.value);

  static UIStatusBarStyle fromValue(int value) => switch (value) {
        0 => UIStatusBarStyleDefault,
        1 => UIStatusBarStyleLightContent,
        3 => UIStatusBarStyleDarkContent,
        2 => UIStatusBarStyleBlackOpaque,
        _ => throw ArgumentError("Unknown value for UIStatusBarStyle: $value"),
      };

  @override
  String toString() {
    if (this == UIStatusBarStyleLightContent)
      return "UIStatusBarStyle.UIStatusBarStyleLightContent, UIStatusBarStyle.UIStatusBarStyleBlackTranslucent";
    return super.toString();
  }
}

late final _sel_preferredStatusBarStyle =
    objc.registerName("preferredStatusBarStyle");
final _objc_msgSend_510 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_prefersStatusBarHidden =
    objc.registerName("prefersStatusBarHidden");

enum UIStatusBarAnimation {
  UIStatusBarAnimationNone(0),
  UIStatusBarAnimationFade(1),
  UIStatusBarAnimationSlide(2);

  final int value;
  const UIStatusBarAnimation(this.value);

  static UIStatusBarAnimation fromValue(int value) => switch (value) {
        0 => UIStatusBarAnimationNone,
        1 => UIStatusBarAnimationFade,
        2 => UIStatusBarAnimationSlide,
        _ =>
          throw ArgumentError("Unknown value for UIStatusBarAnimation: $value"),
      };
}

late final _sel_preferredStatusBarUpdateAnimation =
    objc.registerName("preferredStatusBarUpdateAnimation");
final _objc_msgSend_511 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setNeedsStatusBarAppearanceUpdate =
    objc.registerName("setNeedsStatusBarAppearanceUpdate");
late final _sel_targetViewControllerForAction_sender_ =
    objc.registerName("targetViewControllerForAction:sender:");
final _objc_msgSend_512 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_showViewController_sender_ =
    objc.registerName("showViewController:sender:");
final _objc_msgSend_513 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> vc,
                ffi.Pointer<objc.ObjCObject> sender)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_showDetailViewController_sender_ =
    objc.registerName("showDetailViewController:sender:");
late final _sel_preferredUserInterfaceStyle =
    objc.registerName("preferredUserInterfaceStyle");
late final _sel_setNeedsUserInterfaceAppearanceUpdate =
    objc.registerName("setNeedsUserInterfaceAppearanceUpdate");
late final _sel_overrideUserInterfaceStyle =
    objc.registerName("overrideUserInterfaceStyle");
late final _sel_setOverrideUserInterfaceStyle_ =
    objc.registerName("setOverrideUserInterfaceStyle:");
final _objc_msgSend_514 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_instantiateInitialViewController =
    objc.registerName("instantiateInitialViewController");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_UIViewController_NSCoder_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCObject> arg0)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCObject>)>()(arg0);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_UIViewController_NSCoder_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>`.
abstract final class ObjCBlock_UIViewController_NSCoder {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_UIViewController_NSCoder_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)> fromFunction(
          UIViewController? Function(objc.NSCoder) fn) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_UIViewController_NSCoder_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(objc.NSCoder.castFromPointer(arg0, retain: true, release: true))?.ref.retainAndAutorelease() ??
                  ffi.nullptr),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)>`.
extension ObjCBlock_UIViewController_NSCoder_CallExtension
    on objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(objc.NSCoder)> {
  UIViewController? call(objc.NSCoder arg0) => ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()
              (ref.pointer, arg0.ref.pointer)
              .address ==
          0
      ? null
      : UIViewController.castFromPointer(
          ref.pointer.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0.ref.pointer),
          retain: true,
          release: true);
}

late final _sel_instantiateInitialViewControllerWithCreator_ =
    objc.registerName("instantiateInitialViewControllerWithCreator:");
final _objc_msgSend_515 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> block)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_instantiateViewControllerWithIdentifier_ =
    objc.registerName("instantiateViewControllerWithIdentifier:");
final _objc_msgSend_516 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_instantiateViewControllerWithIdentifier_creator_ =
    objc.registerName("instantiateViewControllerWithIdentifier:creator:");
final _objc_msgSend_517 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> identifier,
                ffi.Pointer<objc.ObjCBlockImpl> block)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setStoryboard_ = objc.registerName("setStoryboard:");
final _objc_msgSend_518 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_519 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_persistentIdentifier =
    objc.registerName("persistentIdentifier");

/// NSUserActivity
class NSUserActivity extends objc.NSObject {
  NSUserActivity._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSUserActivity] that points to the same underlying object as [other].
  NSUserActivity.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSUserActivity] that wraps the given raw object pointer.
  NSUserActivity.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSUserActivity].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSUserActivity);
  }

  /// initWithActivityType:
  NSUserActivity initWithActivityType_(objc.NSString activityType) {
    final _ret = _objc_msgSend_103(this.ref.retainAndReturnPointer(),
        _sel_initWithActivityType_, activityType.ref.pointer);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  NSUserActivity init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }

  /// activityType
  objc.NSString get activityType {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_activityType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// title
  objc.NSString? get title {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_title);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTitle:
  set title(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer, _sel_setTitle_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_112(this.ref.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUserInfo:
  set userInfo(objc.NSDictionary? value) {
    return _objc_msgSend_113(
        this.ref.pointer, _sel_setUserInfo_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// addUserInfoEntriesFromDictionary:
  void addUserInfoEntriesFromDictionary_(objc.NSDictionary otherDictionary) {
    _objc_msgSend_520(this.ref.pointer, _sel_addUserInfoEntriesFromDictionary_,
        otherDictionary.ref.pointer);
  }

  /// requiredUserInfoKeys
  objc.NSSet? get requiredUserInfoKeys {
    final _ret = _objc_msgSend_521(this.ref.pointer, _sel_requiredUserInfoKeys);
    return _ret.address == 0
        ? null
        : objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRequiredUserInfoKeys:
  set requiredUserInfoKeys(objc.NSSet? value) {
    return _objc_msgSend_522(this.ref.pointer, _sel_setRequiredUserInfoKeys_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// needsSave
  bool get needsSave {
    return _objc_msgSend_11(this.ref.pointer, _sel_needsSave);
  }

  /// setNeedsSave:
  set needsSave(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setNeedsSave_, value);
  }

  /// webpageURL
  objc.NSURL? get webpageURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_webpageURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setWebpageURL:
  set webpageURL(objc.NSURL? value) {
    return _objc_msgSend_523(this.ref.pointer, _sel_setWebpageURL_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// referrerURL
  objc.NSURL? get referrerURL {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_referrerURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// setReferrerURL:
  set referrerURL(objc.NSURL? value) {
    return _objc_msgSend_523(this.ref.pointer, _sel_setReferrerURL_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// expirationDate
  objc.NSDate? get expirationDate {
    final _ret = _objc_msgSend_524(this.ref.pointer, _sel_expirationDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setExpirationDate:
  set expirationDate(objc.NSDate? value) {
    return _objc_msgSend_525(this.ref.pointer, _sel_setExpirationDate_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// keywords
  objc.NSSet get keywords {
    final _ret = _objc_msgSend_126(this.ref.pointer, _sel_keywords);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// setKeywords:
  set keywords(objc.NSSet value) {
    return _objc_msgSend_500(
        this.ref.pointer, _sel_setKeywords_, value.ref.pointer);
  }

  /// supportsContinuationStreams
  bool get supportsContinuationStreams {
    return _objc_msgSend_11(this.ref.pointer, _sel_supportsContinuationStreams);
  }

  /// setSupportsContinuationStreams:
  set supportsContinuationStreams(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setSupportsContinuationStreams_, value);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// targetContentIdentifier
  objc.NSString? get targetContentIdentifier {
    final _ret =
        _objc_msgSend_40(this.ref.pointer, _sel_targetContentIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTargetContentIdentifier:
  set targetContentIdentifier(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setTargetContentIdentifier_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// becomeCurrent
  void becomeCurrent() {
    _objc_msgSend_12(this.ref.pointer, _sel_becomeCurrent);
  }

  /// resignCurrent
  void resignCurrent() {
    _objc_msgSend_12(this.ref.pointer, _sel_resignCurrent);
  }

  /// invalidate
  void invalidate() {
    _objc_msgSend_12(this.ref.pointer, _sel_invalidate);
  }

  /// getContinuationStreamsWithCompletionHandler:
  void getContinuationStreamsWithCompletionHandler_(
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    _objc_msgSend_534(
        this.ref.pointer,
        _sel_getContinuationStreamsWithCompletionHandler_,
        completionHandler.ref.pointer);
  }

  /// isEligibleForHandoff
  bool get eligibleForHandoff {
    return _objc_msgSend_11(this.ref.pointer, _sel_isEligibleForHandoff);
  }

  /// setEligibleForHandoff:
  set eligibleForHandoff(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setEligibleForHandoff_, value);
  }

  /// isEligibleForSearch
  bool get eligibleForSearch {
    return _objc_msgSend_11(this.ref.pointer, _sel_isEligibleForSearch);
  }

  /// setEligibleForSearch:
  set eligibleForSearch(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setEligibleForSearch_, value);
  }

  /// isEligibleForPublicIndexing
  bool get eligibleForPublicIndexing {
    return _objc_msgSend_11(this.ref.pointer, _sel_isEligibleForPublicIndexing);
  }

  /// setEligibleForPublicIndexing:
  set eligibleForPublicIndexing(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setEligibleForPublicIndexing_, value);
  }

  /// isEligibleForPrediction
  bool get eligibleForPrediction {
    return _objc_msgSend_11(this.ref.pointer, _sel_isEligibleForPrediction);
  }

  /// setEligibleForPrediction:
  set eligibleForPrediction(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setEligibleForPrediction_, value);
  }

  /// persistentIdentifier
  objc.NSString? get persistentIdentifier {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_persistentIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPersistentIdentifier:
  set persistentIdentifier(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setPersistentIdentifier_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:
  static void
      deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_(
          objc.NSArray persistentIdentifiers,
          objc.ObjCBlock<ffi.Void Function()> handler) {
    _objc_msgSend_535(
        _class_NSUserActivity,
        _sel_deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_,
        persistentIdentifiers.ref.pointer,
        handler.ref.pointer);
  }

  /// deleteAllSavedUserActivitiesWithCompletionHandler:
  static void deleteAllSavedUserActivitiesWithCompletionHandler_(
      objc.ObjCBlock<ffi.Void Function()> handler) {
    _objc_msgSend_449(
        _class_NSUserActivity,
        _sel_deleteAllSavedUserActivitiesWithCompletionHandler_,
        handler.ref.pointer);
  }

  /// new
  static NSUserActivity new1() {
    final _ret = _objc_msgSend_4(_class_NSUserActivity, _sel_new);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSUserActivity allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSUserActivity, _sel_allocWithZone_, zone);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSUserActivity alloc() {
    final _ret = _objc_msgSend_4(_class_NSUserActivity, _sel_alloc);
    return NSUserActivity.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSUserActivity = objc.getClass("NSUserActivity");
late final _sel_initWithActivityType_ =
    objc.registerName("initWithActivityType:");
late final _sel_activityType = objc.registerName("activityType");
late final _sel_setUserInfo_ = objc.registerName("setUserInfo:");
late final _sel_addUserInfoEntriesFromDictionary_ =
    objc.registerName("addUserInfoEntriesFromDictionary:");
final _objc_msgSend_520 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> otherDictionary)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requiredUserInfoKeys =
    objc.registerName("requiredUserInfoKeys");
final _objc_msgSend_521 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRequiredUserInfoKeys_ =
    objc.registerName("setRequiredUserInfoKeys:");
final _objc_msgSend_522 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_needsSave = objc.registerName("needsSave");
late final _sel_setNeedsSave_ = objc.registerName("setNeedsSave:");
late final _sel_webpageURL = objc.registerName("webpageURL");
late final _sel_setWebpageURL_ = objc.registerName("setWebpageURL:");
final _objc_msgSend_523 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_referrerURL = objc.registerName("referrerURL");
late final _sel_setReferrerURL_ = objc.registerName("setReferrerURL:");
late final _sel_expirationDate = objc.registerName("expirationDate");
final _objc_msgSend_524 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setExpirationDate_ = objc.registerName("setExpirationDate:");
final _objc_msgSend_525 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_keywords = objc.registerName("keywords");
late final _sel_setKeywords_ = objc.registerName("setKeywords:");
late final _sel_supportsContinuationStreams =
    objc.registerName("supportsContinuationStreams");
late final _sel_setSupportsContinuationStreams_ =
    objc.registerName("setSupportsContinuationStreams:");
late final _sel_targetContentIdentifier =
    objc.registerName("targetContentIdentifier");
late final _sel_setTargetContentIdentifier_ =
    objc.registerName("setTargetContentIdentifier:");
late final _sel_becomeCurrent = objc.registerName("becomeCurrent");
late final _sel_resignCurrent = objc.registerName("resignCurrent");
void _ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(NSInputStream?, NSOutputStream?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_closureTrampoline)
                  .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                  arg0.address == 0 ? null : NSInputStream.castFromPointer(arg0, retain: true, release: true),
                  arg1.address == 0 ? null : NSOutputStream.castFromPointer(arg1, retain: true, release: true),
                  arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(NSInputStream?, NSOutputStream?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2) =>
            fn(
                arg0.address == 0
                    ? null
                    : NSInputStream.castFromPointer(arg0, retain: false, release: true),
                arg1.address == 0 ? null : NSOutputStream.castFromPointer(arg1, retain: false, release: true),
                arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: false, release: true)));
    final wrapper =
        wrapListenerBlock_ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError(
            raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>(wrapper,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSInputStream_NSOutputStream_NSError_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(NSInputStream? arg0, NSOutputStream? arg1, objc.NSError? arg2) =>
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          ref.pointer,
          arg0?.ref.pointer ?? ffi.nullptr,
          arg1?.ref.pointer ?? ffi.nullptr,
          arg2?.ref.pointer ?? ffi.nullptr);
}

/// NSInputStream
class NSInputStream extends NSStream {
  NSInputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSInputStream] that points to the same underlying object as [other].
  NSInputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSInputStream] that wraps the given raw object pointer.
  NSInputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSInputStream);
  }

  /// read:maxLength:
  int read_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _objc_msgSend_526(
        this.ref.pointer, _sel_read_maxLength_, buffer, len);
  }

  /// getBuffer:length:
  bool getBuffer_length_(ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
      ffi.Pointer<ffi.UnsignedLong> len) {
    return _objc_msgSend_527(
        this.ref.pointer, _sel_getBuffer_length_, buffer, len);
  }

  /// hasBytesAvailable
  bool get hasBytesAvailable {
    return _objc_msgSend_11(this.ref.pointer, _sel_hasBytesAvailable);
  }

  /// initWithData:
  NSInputStream initWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_528(this.ref.retainAndReturnPointer(),
        _sel_initWithData_, data.ref.pointer);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithURL:
  NSInputStream? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_182(
        this.ref.retainAndReturnPointer(), _sel_initWithURL_, url.ref.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  NSInputStream init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSInputStream new1() {
    final _ret = _objc_msgSend_4(_class_NSInputStream, _sel_new);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSInputStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSInputStream, _sel_allocWithZone_, zone);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSInputStream alloc() {
    final _ret = _objc_msgSend_4(_class_NSInputStream, _sel_alloc);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSInputStream = objc.getClass("NSInputStream");
late final _sel_read_maxLength_ = objc.registerName("read:maxLength:");
final _objc_msgSend_526 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8> buffer,
                ffi.UnsignedLong len)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_getBuffer_length_ = objc.registerName("getBuffer:length:");
final _objc_msgSend_527 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
                ffi.Pointer<ffi.UnsignedLong> len)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.UnsignedLong>)>();
late final _sel_hasBytesAvailable = objc.registerName("hasBytesAvailable");
final _objc_msgSend_528 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> data)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// NSStream
class NSStream extends objc.NSObject {
  NSStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSStream] that points to the same underlying object as [other].
  NSStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSStream] that wraps the given raw object pointer.
  NSStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSStream);
  }

  /// open
  void open() {
    _objc_msgSend_12(this.ref.pointer, _sel_open);
  }

  /// close
  void close() {
    _objc_msgSend_12(this.ref.pointer, _sel_close);
  }

  /// delegate
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_18(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setDelegate:
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// propertyForKey:
  objc.ObjCObjectBase? propertyForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_5(
        this.ref.pointer, _sel_propertyForKey_, key.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setProperty:forKey:
  bool setProperty_forKey_(objc.ObjCObjectBase? property, objc.NSString key) {
    return _objc_msgSend_529(this.ref.pointer, _sel_setProperty_forKey_,
        property?.ref.pointer ?? ffi.nullptr, key.ref.pointer);
  }

  /// scheduleInRunLoop:forMode:
  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_52(this.ref.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.ref.pointer, mode.ref.pointer);
  }

  /// removeFromRunLoop:forMode:
  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_52(this.ref.pointer, _sel_removeFromRunLoop_forMode_,
        aRunLoop.ref.pointer, mode.ref.pointer);
  }

  /// streamStatus
  NSStreamStatus get streamStatus {
    final _ret = _objc_msgSend_530(this.ref.pointer, _sel_streamStatus);
    return NSStreamStatus.fromValue(_ret);
  }

  /// streamError
  objc.NSError? get streamError {
    final _ret = _objc_msgSend_531(this.ref.pointer, _sel_streamError);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSStream init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSStream new1() {
    final _ret = _objc_msgSend_4(_class_NSStream, _sel_new);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSStream, _sel_allocWithZone_, zone);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSStream alloc() {
    final _ret = _objc_msgSend_4(_class_NSStream, _sel_alloc);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSStream = objc.getClass("NSStream");
late final _sel_open = objc.registerName("open");
late final _sel_close = objc.registerName("close");
late final _sel_propertyForKey_ = objc.registerName("propertyForKey:");
late final _sel_setProperty_forKey_ = objc.registerName("setProperty:forKey:");
final _objc_msgSend_529 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> property,
                ffi.Pointer<objc.ObjCObject> key)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSStreamStatus {
  NSStreamStatusNotOpen(0),
  NSStreamStatusOpening(1),
  NSStreamStatusOpen(2),
  NSStreamStatusReading(3),
  NSStreamStatusWriting(4),
  NSStreamStatusAtEnd(5),
  NSStreamStatusClosed(6),
  NSStreamStatusError(7);

  final int value;
  const NSStreamStatus(this.value);

  static NSStreamStatus fromValue(int value) => switch (value) {
        0 => NSStreamStatusNotOpen,
        1 => NSStreamStatusOpening,
        2 => NSStreamStatusOpen,
        3 => NSStreamStatusReading,
        4 => NSStreamStatusWriting,
        5 => NSStreamStatusAtEnd,
        6 => NSStreamStatusClosed,
        7 => NSStreamStatusError,
        _ => throw ArgumentError("Unknown value for NSStreamStatus: $value"),
      };
}

late final _sel_streamStatus = objc.registerName("streamStatus");
final _objc_msgSend_530 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_streamError = objc.registerName("streamError");
final _objc_msgSend_531 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// NSOutputStream
class NSOutputStream extends NSStream {
  NSOutputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOutputStream] that points to the same underlying object as [other].
  NSOutputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSOutputStream] that wraps the given raw object pointer.
  NSOutputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOutputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSOutputStream);
  }

  /// write:maxLength:
  int write_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _objc_msgSend_526(
        this.ref.pointer, _sel_write_maxLength_, buffer, len);
  }

  /// hasSpaceAvailable
  bool get hasSpaceAvailable {
    return _objc_msgSend_11(this.ref.pointer, _sel_hasSpaceAvailable);
  }

  /// initToMemory
  NSOutputStream initToMemory() {
    final _ret =
        _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_initToMemory);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// initToBuffer:capacity:
  NSOutputStream initToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, int capacity) {
    final _ret = _objc_msgSend_532(this.ref.retainAndReturnPointer(),
        _sel_initToBuffer_capacity_, buffer, capacity);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithURL:append:
  NSOutputStream? initWithURL_append_(objc.NSURL url, bool shouldAppend) {
    final _ret = _objc_msgSend_533(this.ref.retainAndReturnPointer(),
        _sel_initWithURL_append_, url.ref.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// init
  NSOutputStream init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSOutputStream new1() {
    final _ret = _objc_msgSend_4(_class_NSOutputStream, _sel_new);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSOutputStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSOutputStream, _sel_allocWithZone_, zone);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSOutputStream alloc() {
    final _ret = _objc_msgSend_4(_class_NSOutputStream, _sel_alloc);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSOutputStream = objc.getClass("NSOutputStream");
late final _sel_write_maxLength_ = objc.registerName("write:maxLength:");
late final _sel_hasSpaceAvailable = objc.registerName("hasSpaceAvailable");
late final _sel_initToMemory = objc.registerName("initToMemory");
late final _sel_initToBuffer_capacity_ =
    objc.registerName("initToBuffer:capacity:");
final _objc_msgSend_532 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8> buffer,
                ffi.UnsignedLong capacity)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_initWithURL_append_ = objc.registerName("initWithURL:append:");
final _objc_msgSend_533 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url,
                ffi.Bool shouldAppend)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_getContinuationStreamsWithCompletionHandler_ =
    objc.registerName("getContinuationStreamsWithCompletionHandler:");
final _objc_msgSend_534 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> completionHandler)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_isEligibleForHandoff =
    objc.registerName("isEligibleForHandoff");
late final _sel_setEligibleForHandoff_ =
    objc.registerName("setEligibleForHandoff:");
late final _sel_isEligibleForSearch = objc.registerName("isEligibleForSearch");
late final _sel_setEligibleForSearch_ =
    objc.registerName("setEligibleForSearch:");
late final _sel_isEligibleForPublicIndexing =
    objc.registerName("isEligibleForPublicIndexing");
late final _sel_setEligibleForPublicIndexing_ =
    objc.registerName("setEligibleForPublicIndexing:");
late final _sel_isEligibleForPrediction =
    objc.registerName("isEligibleForPrediction");
late final _sel_setEligibleForPrediction_ =
    objc.registerName("setEligibleForPrediction:");
late final _sel_setPersistentIdentifier_ =
    objc.registerName("setPersistentIdentifier:");
late final _sel_deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_ =
    objc.registerName(
        "deleteSavedUserActivitiesWithPersistentIdentifiers:completionHandler:");
final _objc_msgSend_535 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> persistentIdentifiers,
                ffi.Pointer<objc.ObjCBlockImpl> handler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_deleteAllSavedUserActivitiesWithCompletionHandler_ =
    objc.registerName("deleteAllSavedUserActivitiesWithCompletionHandler:");
late final _sel_stateRestorationActivity =
    objc.registerName("stateRestorationActivity");
final _objc_msgSend_536 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setStateRestorationActivity_ =
    objc.registerName("setStateRestorationActivity:");
final _objc_msgSend_537 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// UISceneConnectionOptions
class UISceneConnectionOptions extends objc.NSObject {
  UISceneConnectionOptions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneConnectionOptions] that points to the same underlying object as [other].
  UISceneConnectionOptions.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneConnectionOptions] that wraps the given raw object pointer.
  UISceneConnectionOptions.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneConnectionOptions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UISceneConnectionOptions);
  }

  /// new
  static UISceneConnectionOptions new1() {
    final _ret = _objc_msgSend_4(_class_UISceneConnectionOptions, _sel_new);
    return UISceneConnectionOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UISceneConnectionOptions init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneConnectionOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// URLContexts
  objc.NSSet get URLContexts {
    final _ret = _objc_msgSend_126(this.ref.pointer, _sel_URLContexts);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceApplication
  objc.NSString? get sourceApplication {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_sourceApplication);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// handoffUserActivityType
  objc.NSString? get handoffUserActivityType {
    final _ret =
        _objc_msgSend_40(this.ref.pointer, _sel_handoffUserActivityType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// userActivities
  objc.NSSet get userActivities {
    final _ret = _objc_msgSend_126(this.ref.pointer, _sel_userActivities);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// notificationResponse
  UNNotificationResponse? get notificationResponse {
    final _ret = _objc_msgSend_539(this.ref.pointer, _sel_notificationResponse);
    return _ret.address == 0
        ? null
        : UNNotificationResponse.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// shortcutItem
  UIApplicationShortcutItem? get shortcutItem {
    final _ret = _objc_msgSend_544(this.ref.pointer, _sel_shortcutItem);
    return _ret.address == 0
        ? null
        : UIApplicationShortcutItem.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// cloudKitShareMetadata
  CKShareMetadata? get cloudKitShareMetadata {
    final _ret =
        _objc_msgSend_545(this.ref.pointer, _sel_cloudKitShareMetadata);
    return _ret.address == 0
        ? null
        : CKShareMetadata.castFromPointer(_ret, retain: true, release: true);
  }

  /// allocWithZone:
  static UISceneConnectionOptions allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneConnectionOptions, _sel_allocWithZone_, zone);
    return UISceneConnectionOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneConnectionOptions alloc() {
    final _ret = _objc_msgSend_4(_class_UISceneConnectionOptions, _sel_alloc);
    return UISceneConnectionOptions.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneConnectionOptions =
    objc.getClass("UISceneConnectionOptions");
late final _sel_URLContexts = objc.registerName("URLContexts");
late final _sel_sourceApplication = objc.registerName("sourceApplication");
late final _sel_handoffUserActivityType =
    objc.registerName("handoffUserActivityType");
late final _sel_userActivities = objc.registerName("userActivities");

/// UNNotificationResponse
class UNNotificationResponse extends objc.NSObject {
  UNNotificationResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UNNotificationResponse] that points to the same underlying object as [other].
  UNNotificationResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UNNotificationResponse] that wraps the given raw object pointer.
  UNNotificationResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UNNotificationResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UNNotificationResponse);
  }

  /// notification
  UNNotification get notification {
    final _ret = _objc_msgSend_538(this.ref.pointer, _sel_notification);
    return UNNotification.castFromPointer(_ret, retain: true, release: true);
  }

  /// actionIdentifier
  objc.NSString get actionIdentifier {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_actionIdentifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UNNotificationResponse init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UNNotificationResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UNNotificationResponse new1() {
    final _ret = _objc_msgSend_4(_class_UNNotificationResponse, _sel_new);
    return UNNotificationResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UNNotificationResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UNNotificationResponse, _sel_allocWithZone_, zone);
    return UNNotificationResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UNNotificationResponse alloc() {
    final _ret = _objc_msgSend_4(_class_UNNotificationResponse, _sel_alloc);
    return UNNotificationResponse.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UNNotificationResponse =
    objc.getClass("UNNotificationResponse");

/// UNNotification
class UNNotification extends objc.ObjCObjectBase {
  UNNotification._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [UNNotification] that points to the same underlying object as [other].
  UNNotification.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UNNotification] that wraps the given raw object pointer.
  UNNotification.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UNNotification].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UNNotification);
  }
}

late final _class_UNNotification = objc.getClass("UNNotification");
late final _sel_notification = objc.registerName("notification");
final _objc_msgSend_538 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_actionIdentifier = objc.registerName("actionIdentifier");
late final _sel_notificationResponse =
    objc.registerName("notificationResponse");
final _objc_msgSend_539 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UIApplicationShortcutItem
class UIApplicationShortcutItem extends objc.NSObject {
  UIApplicationShortcutItem._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIApplicationShortcutItem] that points to the same underlying object as [other].
  UIApplicationShortcutItem.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIApplicationShortcutItem] that wraps the given raw object pointer.
  UIApplicationShortcutItem.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIApplicationShortcutItem].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIApplicationShortcutItem);
  }

  /// init
  UIApplicationShortcutItem init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIApplicationShortcutItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithType:localizedTitle:localizedSubtitle:icon:userInfo:
  UIApplicationShortcutItem
      initWithType_localizedTitle_localizedSubtitle_icon_userInfo_(
          objc.NSString type,
          objc.NSString localizedTitle,
          objc.NSString? localizedSubtitle,
          UIApplicationShortcutIcon? icon,
          objc.NSDictionary? userInfo) {
    final _ret = _objc_msgSend_541(
        this.ref.retainAndReturnPointer(),
        _sel_initWithType_localizedTitle_localizedSubtitle_icon_userInfo_,
        type.ref.pointer,
        localizedTitle.ref.pointer,
        localizedSubtitle?.ref.pointer ?? ffi.nullptr,
        icon?.ref.pointer ?? ffi.nullptr,
        userInfo?.ref.pointer ?? ffi.nullptr);
    return UIApplicationShortcutItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithType:localizedTitle:
  UIApplicationShortcutItem initWithType_localizedTitle_(
      objc.NSString type, objc.NSString localizedTitle) {
    final _ret = _objc_msgSend_542(
        this.ref.retainAndReturnPointer(),
        _sel_initWithType_localizedTitle_,
        type.ref.pointer,
        localizedTitle.ref.pointer);
    return UIApplicationShortcutItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// type
  objc.NSString get type {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_type);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedTitle
  objc.NSString get localizedTitle {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_localizedTitle);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// localizedSubtitle
  objc.NSString? get localizedSubtitle {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_localizedSubtitle);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// icon
  UIApplicationShortcutIcon? get icon {
    final _ret = _objc_msgSend_543(this.ref.pointer, _sel_icon);
    return _ret.address == 0
        ? null
        : UIApplicationShortcutIcon.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_112(this.ref.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// targetContentIdentifier
  objc.ObjCObjectBase? get targetContentIdentifier {
    final _ret =
        _objc_msgSend_18(this.ref.pointer, _sel_targetContentIdentifier);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// new
  static UIApplicationShortcutItem new1() {
    final _ret = _objc_msgSend_4(_class_UIApplicationShortcutItem, _sel_new);
    return UIApplicationShortcutItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIApplicationShortcutItem allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIApplicationShortcutItem, _sel_allocWithZone_, zone);
    return UIApplicationShortcutItem.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIApplicationShortcutItem alloc() {
    final _ret = _objc_msgSend_4(_class_UIApplicationShortcutItem, _sel_alloc);
    return UIApplicationShortcutItem.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIApplicationShortcutItem =
    objc.getClass("UIApplicationShortcutItem");

/// UIApplicationShortcutIcon
class UIApplicationShortcutIcon extends objc.NSObject {
  UIApplicationShortcutIcon._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIApplicationShortcutIcon] that points to the same underlying object as [other].
  UIApplicationShortcutIcon.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIApplicationShortcutIcon] that wraps the given raw object pointer.
  UIApplicationShortcutIcon.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIApplicationShortcutIcon].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIApplicationShortcutIcon);
  }

  /// iconWithType:
  static UIApplicationShortcutIcon iconWithType_(
      UIApplicationShortcutIconType type) {
    final _ret = _objc_msgSend_540(
        _class_UIApplicationShortcutIcon, _sel_iconWithType_, type.value);
    return UIApplicationShortcutIcon.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// iconWithTemplateImageName:
  static UIApplicationShortcutIcon iconWithTemplateImageName_(
      objc.NSString templateImageName) {
    final _ret = _objc_msgSend_103(_class_UIApplicationShortcutIcon,
        _sel_iconWithTemplateImageName_, templateImageName.ref.pointer);
    return UIApplicationShortcutIcon.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// iconWithSystemImageName:
  static UIApplicationShortcutIcon iconWithSystemImageName_(
      objc.NSString systemImageName) {
    final _ret = _objc_msgSend_103(_class_UIApplicationShortcutIcon,
        _sel_iconWithSystemImageName_, systemImageName.ref.pointer);
    return UIApplicationShortcutIcon.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  UIApplicationShortcutIcon init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIApplicationShortcutIcon.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIApplicationShortcutIcon new1() {
    final _ret = _objc_msgSend_4(_class_UIApplicationShortcutIcon, _sel_new);
    return UIApplicationShortcutIcon.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIApplicationShortcutIcon allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIApplicationShortcutIcon, _sel_allocWithZone_, zone);
    return UIApplicationShortcutIcon.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIApplicationShortcutIcon alloc() {
    final _ret = _objc_msgSend_4(_class_UIApplicationShortcutIcon, _sel_alloc);
    return UIApplicationShortcutIcon.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIApplicationShortcutIcon =
    objc.getClass("UIApplicationShortcutIcon");

enum UIApplicationShortcutIconType {
  UIApplicationShortcutIconTypeCompose(0),
  UIApplicationShortcutIconTypePlay(1),
  UIApplicationShortcutIconTypePause(2),
  UIApplicationShortcutIconTypeAdd(3),
  UIApplicationShortcutIconTypeLocation(4),
  UIApplicationShortcutIconTypeSearch(5),
  UIApplicationShortcutIconTypeShare(6),
  UIApplicationShortcutIconTypeProhibit(7),
  UIApplicationShortcutIconTypeContact(8),
  UIApplicationShortcutIconTypeHome(9),
  UIApplicationShortcutIconTypeMarkLocation(10),
  UIApplicationShortcutIconTypeFavorite(11),
  UIApplicationShortcutIconTypeLove(12),
  UIApplicationShortcutIconTypeCloud(13),
  UIApplicationShortcutIconTypeInvitation(14),
  UIApplicationShortcutIconTypeConfirmation(15),
  UIApplicationShortcutIconTypeMail(16),
  UIApplicationShortcutIconTypeMessage(17),
  UIApplicationShortcutIconTypeDate(18),
  UIApplicationShortcutIconTypeTime(19),
  UIApplicationShortcutIconTypeCapturePhoto(20),
  UIApplicationShortcutIconTypeCaptureVideo(21),
  UIApplicationShortcutIconTypeTask(22),
  UIApplicationShortcutIconTypeTaskCompleted(23),
  UIApplicationShortcutIconTypeAlarm(24),
  UIApplicationShortcutIconTypeBookmark(25),
  UIApplicationShortcutIconTypeShuffle(26),
  UIApplicationShortcutIconTypeAudio(27),
  UIApplicationShortcutIconTypeUpdate(28);

  final int value;
  const UIApplicationShortcutIconType(this.value);

  static UIApplicationShortcutIconType fromValue(int value) => switch (value) {
        0 => UIApplicationShortcutIconTypeCompose,
        1 => UIApplicationShortcutIconTypePlay,
        2 => UIApplicationShortcutIconTypePause,
        3 => UIApplicationShortcutIconTypeAdd,
        4 => UIApplicationShortcutIconTypeLocation,
        5 => UIApplicationShortcutIconTypeSearch,
        6 => UIApplicationShortcutIconTypeShare,
        7 => UIApplicationShortcutIconTypeProhibit,
        8 => UIApplicationShortcutIconTypeContact,
        9 => UIApplicationShortcutIconTypeHome,
        10 => UIApplicationShortcutIconTypeMarkLocation,
        11 => UIApplicationShortcutIconTypeFavorite,
        12 => UIApplicationShortcutIconTypeLove,
        13 => UIApplicationShortcutIconTypeCloud,
        14 => UIApplicationShortcutIconTypeInvitation,
        15 => UIApplicationShortcutIconTypeConfirmation,
        16 => UIApplicationShortcutIconTypeMail,
        17 => UIApplicationShortcutIconTypeMessage,
        18 => UIApplicationShortcutIconTypeDate,
        19 => UIApplicationShortcutIconTypeTime,
        20 => UIApplicationShortcutIconTypeCapturePhoto,
        21 => UIApplicationShortcutIconTypeCaptureVideo,
        22 => UIApplicationShortcutIconTypeTask,
        23 => UIApplicationShortcutIconTypeTaskCompleted,
        24 => UIApplicationShortcutIconTypeAlarm,
        25 => UIApplicationShortcutIconTypeBookmark,
        26 => UIApplicationShortcutIconTypeShuffle,
        27 => UIApplicationShortcutIconTypeAudio,
        28 => UIApplicationShortcutIconTypeUpdate,
        _ => throw ArgumentError(
            "Unknown value for UIApplicationShortcutIconType: $value"),
      };
}

late final _sel_iconWithType_ = objc.registerName("iconWithType:");
final _objc_msgSend_540 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong type)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_iconWithTemplateImageName_ =
    objc.registerName("iconWithTemplateImageName:");
late final _sel_iconWithSystemImageName_ =
    objc.registerName("iconWithSystemImageName:");
late final _sel_initWithType_localizedTitle_localizedSubtitle_icon_userInfo_ =
    objc.registerName(
        "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:");
final _objc_msgSend_541 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> type,
                ffi.Pointer<objc.ObjCObject> localizedTitle,
                ffi.Pointer<objc.ObjCObject> localizedSubtitle,
                ffi.Pointer<objc.ObjCObject> icon,
                ffi.Pointer<objc.ObjCObject> userInfo)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithType_localizedTitle_ =
    objc.registerName("initWithType:localizedTitle:");
final _objc_msgSend_542 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> type,
                ffi.Pointer<objc.ObjCObject> localizedTitle)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedTitle = objc.registerName("localizedTitle");
late final _sel_localizedSubtitle = objc.registerName("localizedSubtitle");
late final _sel_icon = objc.registerName("icon");
final _objc_msgSend_543 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_shortcutItem = objc.registerName("shortcutItem");
final _objc_msgSend_544 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// CKShareMetadata
class CKShareMetadata extends objc.ObjCObjectBase {
  CKShareMetadata._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [CKShareMetadata] that points to the same underlying object as [other].
  CKShareMetadata.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CKShareMetadata] that wraps the given raw object pointer.
  CKShareMetadata.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CKShareMetadata].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CKShareMetadata);
  }
}

late final _class_CKShareMetadata = objc.getClass("CKShareMetadata");
late final _sel_cloudKitShareMetadata =
    objc.registerName("cloudKitShareMetadata");
final _objc_msgSend_545 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithSession_connectionOptions_ =
    objc.registerName("initWithSession:connectionOptions:");
final _objc_msgSend_546 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> session,
                ffi.Pointer<objc.ObjCObject> connectionOptions)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_session = objc.registerName("session");
final _objc_msgSend_547 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

enum UISceneActivationState {
  UISceneActivationStateUnattached(-1),
  UISceneActivationStateForegroundActive(0),
  UISceneActivationStateForegroundInactive(1),
  UISceneActivationStateBackground(2);

  final int value;
  const UISceneActivationState(this.value);

  static UISceneActivationState fromValue(int value) => switch (value) {
        -1 => UISceneActivationStateUnattached,
        0 => UISceneActivationStateForegroundActive,
        1 => UISceneActivationStateForegroundInactive,
        2 => UISceneActivationStateBackground,
        _ => throw ArgumentError(
            "Unknown value for UISceneActivationState: $value"),
      };
}

late final _sel_activationState = objc.registerName("activationState");
final _objc_msgSend_548 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UISceneOpenExternalURLOptions
class UISceneOpenExternalURLOptions extends objc.NSObject {
  UISceneOpenExternalURLOptions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneOpenExternalURLOptions] that points to the same underlying object as [other].
  UISceneOpenExternalURLOptions.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneOpenExternalURLOptions] that wraps the given raw object pointer.
  UISceneOpenExternalURLOptions.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneOpenExternalURLOptions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UISceneOpenExternalURLOptions);
  }

  /// universalLinksOnly
  bool get universalLinksOnly {
    return _objc_msgSend_11(this.ref.pointer, _sel_universalLinksOnly);
  }

  /// setUniversalLinksOnly:
  set universalLinksOnly(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setUniversalLinksOnly_, value);
  }

  /// eventAttribution
  UIEventAttribution? get eventAttribution {
    final _ret = _objc_msgSend_551(this.ref.pointer, _sel_eventAttribution);
    return _ret.address == 0
        ? null
        : UIEventAttribution.castFromPointer(_ret, retain: true, release: true);
  }

  /// setEventAttribution:
  set eventAttribution(UIEventAttribution? value) {
    return _objc_msgSend_552(this.ref.pointer, _sel_setEventAttribution_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// init
  UISceneOpenExternalURLOptions init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneOpenExternalURLOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UISceneOpenExternalURLOptions new1() {
    final _ret =
        _objc_msgSend_4(_class_UISceneOpenExternalURLOptions, _sel_new);
    return UISceneOpenExternalURLOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UISceneOpenExternalURLOptions allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneOpenExternalURLOptions, _sel_allocWithZone_, zone);
    return UISceneOpenExternalURLOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneOpenExternalURLOptions alloc() {
    final _ret =
        _objc_msgSend_4(_class_UISceneOpenExternalURLOptions, _sel_alloc);
    return UISceneOpenExternalURLOptions.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneOpenExternalURLOptions =
    objc.getClass("UISceneOpenExternalURLOptions");
late final _sel_universalLinksOnly = objc.registerName("universalLinksOnly");
late final _sel_setUniversalLinksOnly_ =
    objc.registerName("setUniversalLinksOnly:");

/// UIEventAttribution
class UIEventAttribution extends objc.NSObject {
  UIEventAttribution._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIEventAttribution] that points to the same underlying object as [other].
  UIEventAttribution.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIEventAttribution] that wraps the given raw object pointer.
  UIEventAttribution.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIEventAttribution].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UIEventAttribution);
  }

  /// sourceIdentifier
  int get sourceIdentifier {
    return _objc_msgSend_549(this.ref.pointer, _sel_sourceIdentifier);
  }

  /// destinationURL
  objc.NSURL get destinationURL {
    final _ret = _objc_msgSend_186(this.ref.pointer, _sel_destinationURL);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// reportEndpoint
  objc.NSURL? get reportEndpoint {
    final _ret = _objc_msgSend_187(this.ref.pointer, _sel_reportEndpoint);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// sourceDescription
  objc.NSString get sourceDescription {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_sourceDescription);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// purchaser
  objc.NSString get purchaser {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_purchaser);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// initWithSourceIdentifier:destinationURL:sourceDescription:purchaser:
  UIEventAttribution
      initWithSourceIdentifier_destinationURL_sourceDescription_purchaser_(
          int sourceIdentifier,
          objc.NSURL destinationURL,
          objc.NSString sourceDescription,
          objc.NSString purchaser) {
    final _ret = _objc_msgSend_550(
        this.ref.retainAndReturnPointer(),
        _sel_initWithSourceIdentifier_destinationURL_sourceDescription_purchaser_,
        sourceIdentifier,
        destinationURL.ref.pointer,
        sourceDescription.ref.pointer,
        purchaser.ref.pointer);
    return UIEventAttribution.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  UIEventAttribution init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIEventAttribution.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIEventAttribution new1() {
    final _ret = _objc_msgSend_4(_class_UIEventAttribution, _sel_new);
    return UIEventAttribution.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIEventAttribution allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UIEventAttribution, _sel_allocWithZone_, zone);
    return UIEventAttribution.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIEventAttribution alloc() {
    final _ret = _objc_msgSend_4(_class_UIEventAttribution, _sel_alloc);
    return UIEventAttribution.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIEventAttribution = objc.getClass("UIEventAttribution");
late final _sel_sourceIdentifier = objc.registerName("sourceIdentifier");
final _objc_msgSend_549 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint8 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_destinationURL = objc.registerName("destinationURL");
late final _sel_reportEndpoint = objc.registerName("reportEndpoint");
late final _sel_sourceDescription = objc.registerName("sourceDescription");
late final _sel_purchaser = objc.registerName("purchaser");
late final _sel_initWithSourceIdentifier_destinationURL_sourceDescription_purchaser_ =
    objc.registerName(
        "initWithSourceIdentifier:destinationURL:sourceDescription:purchaser:");
final _objc_msgSend_550 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Uint8 sourceIdentifier,
                ffi.Pointer<objc.ObjCObject> destinationURL,
                ffi.Pointer<objc.ObjCObject> sourceDescription,
                ffi.Pointer<objc.ObjCObject> purchaser)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_eventAttribution = objc.registerName("eventAttribution");
final _objc_msgSend_551 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEventAttribution_ =
    objc.registerName("setEventAttribution:");
final _objc_msgSend_552 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_553 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> url,
                ffi.Pointer<objc.ObjCObject> options,
                ffi.Pointer<objc.ObjCBlockImpl> completion)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// UISceneActivationConditions
class UISceneActivationConditions extends objc.NSObject {
  UISceneActivationConditions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneActivationConditions] that points to the same underlying object as [other].
  UISceneActivationConditions.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneActivationConditions] that wraps the given raw object pointer.
  UISceneActivationConditions.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneActivationConditions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UISceneActivationConditions);
  }

  /// init
  UISceneActivationConditions init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneActivationConditions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithCoder:
  UISceneActivationConditions? initWithCoder_(objc.NSCoder aDecoder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, aDecoder.ref.pointer);
    return _ret.address == 0
        ? null
        : UISceneActivationConditions.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// canActivateForTargetContentIdentifierPredicate
  NSPredicate get canActivateForTargetContentIdentifierPredicate {
    final _ret = _objc_msgSend_562(
        this.ref.pointer, _sel_canActivateForTargetContentIdentifierPredicate);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCanActivateForTargetContentIdentifierPredicate:
  set canActivateForTargetContentIdentifierPredicate(NSPredicate value) {
    return _objc_msgSend_563(
        this.ref.pointer,
        _sel_setCanActivateForTargetContentIdentifierPredicate_,
        value.ref.pointer);
  }

  /// prefersToActivateForTargetContentIdentifierPredicate
  NSPredicate get prefersToActivateForTargetContentIdentifierPredicate {
    final _ret = _objc_msgSend_562(this.ref.pointer,
        _sel_prefersToActivateForTargetContentIdentifierPredicate);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setPrefersToActivateForTargetContentIdentifierPredicate:
  set prefersToActivateForTargetContentIdentifierPredicate(NSPredicate value) {
    return _objc_msgSend_563(
        this.ref.pointer,
        _sel_setPrefersToActivateForTargetContentIdentifierPredicate_,
        value.ref.pointer);
  }

  /// new
  static UISceneActivationConditions new1() {
    final _ret = _objc_msgSend_4(_class_UISceneActivationConditions, _sel_new);
    return UISceneActivationConditions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UISceneActivationConditions allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneActivationConditions, _sel_allocWithZone_, zone);
    return UISceneActivationConditions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneActivationConditions alloc() {
    final _ret =
        _objc_msgSend_4(_class_UISceneActivationConditions, _sel_alloc);
    return UISceneActivationConditions.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneActivationConditions =
    objc.getClass("UISceneActivationConditions");

/// NSPredicate
class NSPredicate extends objc.NSObject {
  NSPredicate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPredicate] that points to the same underlying object as [other].
  NSPredicate.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSPredicate] that wraps the given raw object pointer.
  NSPredicate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPredicate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSPredicate);
  }

  /// predicateWithFormat:argumentArray:
  static NSPredicate predicateWithFormat_argumentArray_(
      objc.NSString predicateFormat, objc.NSArray? arguments) {
    final _ret = _objc_msgSend_554(
        _class_NSPredicate,
        _sel_predicateWithFormat_argumentArray_,
        predicateFormat.ref.pointer,
        arguments?.ref.pointer ?? ffi.nullptr);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithFormat:
  static NSPredicate predicateWithFormat_(objc.NSString predicateFormat) {
    final _ret = _objc_msgSend_555(_class_NSPredicate,
        _sel_predicateWithFormat_, predicateFormat.ref.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithFormat:arguments:
  static NSPredicate predicateWithFormat_arguments_(
      objc.NSString predicateFormat, ffi.Pointer<ffi.Char> argList) {
    final _ret = _objc_msgSend_556(
        _class_NSPredicate,
        _sel_predicateWithFormat_arguments_,
        predicateFormat.ref.pointer,
        argList);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateFromMetadataQueryString:
  static NSPredicate? predicateFromMetadataQueryString_(
      objc.NSString queryString) {
    final _ret = _objc_msgSend_557(_class_NSPredicate,
        _sel_predicateFromMetadataQueryString_, queryString.ref.pointer);
    return _ret.address == 0
        ? null
        : NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithValue:
  static NSPredicate predicateWithValue_(bool value) {
    final _ret =
        _objc_msgSend_558(_class_NSPredicate, _sel_predicateWithValue_, value);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithBlock:
  static NSPredicate predicateWithBlock_(
      objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          block) {
    final _ret = _objc_msgSend_559(
        _class_NSPredicate, _sel_predicateWithBlock_, block.ref.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateFormat
  objc.NSString get predicateFormat {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_predicateFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// predicateWithSubstitutionVariables:
  NSPredicate predicateWithSubstitutionVariables_(objc.NSDictionary variables) {
    final _ret = _objc_msgSend_338(this.ref.pointer,
        _sel_predicateWithSubstitutionVariables_, variables.ref.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  /// evaluateWithObject:
  bool evaluateWithObject_(objc.ObjCObjectBase? object) {
    return _objc_msgSend_560(this.ref.pointer, _sel_evaluateWithObject_,
        object?.ref.pointer ?? ffi.nullptr);
  }

  /// evaluateWithObject:substitutionVariables:
  bool evaluateWithObject_substitutionVariables_(
      objc.ObjCObjectBase? object, objc.NSDictionary? bindings) {
    return _objc_msgSend_561(
        this.ref.pointer,
        _sel_evaluateWithObject_substitutionVariables_,
        object?.ref.pointer ?? ffi.nullptr,
        bindings?.ref.pointer ?? ffi.nullptr);
  }

  /// allowEvaluation
  void allowEvaluation() {
    _objc_msgSend_12(this.ref.pointer, _sel_allowEvaluation);
  }

  /// init
  NSPredicate init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSPredicate new1() {
    final _ret = _objc_msgSend_4(_class_NSPredicate, _sel_new);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSPredicate allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSPredicate, _sel_allocWithZone_, zone);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSPredicate alloc() {
    final _ret = _objc_msgSend_4(_class_NSPredicate, _sel_alloc);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSPredicate = objc.getClass("NSPredicate");
late final _sel_predicateWithFormat_argumentArray_ =
    objc.registerName("predicateWithFormat:argumentArray:");
final _objc_msgSend_554 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> predicateFormat,
                ffi.Pointer<objc.ObjCObject> arguments)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithFormat_ =
    objc.registerName("predicateWithFormat:");
final _objc_msgSend_555 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> predicateFormat)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithFormat_arguments_ =
    objc.registerName("predicateWithFormat:arguments:");
final _objc_msgSend_556 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> predicateFormat,
                ffi.Pointer<ffi.Char> argList)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Char>)>();
late final _sel_predicateFromMetadataQueryString_ =
    objc.registerName("predicateFromMetadataQueryString:");
final _objc_msgSend_557 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> queryString)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithValue_ = objc.registerName("predicateWithValue:");
final _objc_msgSend_558 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool value)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
bool _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
bool _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_bool_objcObjCObject_NSDictionary {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline,
                              false)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          bool Function(objc.ObjCObjectBase?, objc.NSDictionary?) fn) =>
      objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline, false)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : objc.ObjCObjectBase(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSDictionary.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_bool_objcObjCObject_NSDictionary_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  bool call(objc.ObjCObjectBase? arg0, objc.NSDictionary? arg1) =>
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(ref.pointer,
          arg0?.ref.pointer ?? ffi.nullptr, arg1?.ref.pointer ?? ffi.nullptr);
}

late final _sel_predicateWithBlock_ = objc.registerName("predicateWithBlock:");
final _objc_msgSend_559 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> block)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_predicateFormat = objc.registerName("predicateFormat");
late final _sel_predicateWithSubstitutionVariables_ =
    objc.registerName("predicateWithSubstitutionVariables:");
late final _sel_evaluateWithObject_ = objc.registerName("evaluateWithObject:");
final _objc_msgSend_560 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> object)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_evaluateWithObject_substitutionVariables_ =
    objc.registerName("evaluateWithObject:substitutionVariables:");
final _objc_msgSend_561 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> object,
                ffi.Pointer<objc.ObjCObject> bindings)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allowEvaluation = objc.registerName("allowEvaluation");
late final _sel_canActivateForTargetContentIdentifierPredicate =
    objc.registerName("canActivateForTargetContentIdentifierPredicate");
final _objc_msgSend_562 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCanActivateForTargetContentIdentifierPredicate_ =
    objc.registerName("setCanActivateForTargetContentIdentifierPredicate:");
final _objc_msgSend_563 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_prefersToActivateForTargetContentIdentifierPredicate =
    objc.registerName("prefersToActivateForTargetContentIdentifierPredicate");
late final _sel_setPrefersToActivateForTargetContentIdentifierPredicate_ = objc
    .registerName("setPrefersToActivateForTargetContentIdentifierPredicate:");
late final _sel_activationConditions =
    objc.registerName("activationConditions");
final _objc_msgSend_564 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActivationConditions_ =
    objc.registerName("setActivationConditions:");
final _objc_msgSend_565 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithWindowScene_ =
    objc.registerName("initWithWindowScene:");
final _objc_msgSend_566 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> windowScene)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_windowScene = objc.registerName("windowScene");
final _objc_msgSend_567 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setWindowScene_ = objc.registerName("setWindowScene:");
final _objc_msgSend_568 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_canResizeToFitContent =
    objc.registerName("canResizeToFitContent");
late final _sel_setCanResizeToFitContent_ =
    objc.registerName("setCanResizeToFitContent:");
late final _sel_setScreen_ = objc.registerName("setScreen:");
final _objc_msgSend_569 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_windowLevel = objc.registerName("windowLevel");
late final _sel_setWindowLevel_ = objc.registerName("setWindowLevel:");
late final _sel_isKeyWindow = objc.registerName("isKeyWindow");
late final _sel_canBecomeKeyWindow = objc.registerName("canBecomeKeyWindow");
late final _sel_becomeKeyWindow = objc.registerName("becomeKeyWindow");
late final _sel_resignKeyWindow = objc.registerName("resignKeyWindow");
late final _sel_makeKeyWindow = objc.registerName("makeKeyWindow");
late final _sel_makeKeyAndVisible = objc.registerName("makeKeyAndVisible");
late final _sel_rootViewController = objc.registerName("rootViewController");
late final _sel_setRootViewController_ =
    objc.registerName("setRootViewController:");
final _objc_msgSend_570 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sendEvent_ = objc.registerName("sendEvent:");
final _objc_msgSend_571 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertPoint_toWindow_ =
    objc.registerName("convertPoint:toWindow:");
final _objc_msgSend_572 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint point,
                ffi.Pointer<objc.ObjCObject> window)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_572Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint point,
                ffi.Pointer<objc.ObjCObject> window)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGPoint>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertPoint_fromWindow_ =
    objc.registerName("convertPoint:fromWindow:");
late final _sel_convertRect_toWindow_ =
    objc.registerName("convertRect:toWindow:");
final _objc_msgSend_573 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect rect,
                ffi.Pointer<objc.ObjCObject> window)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_573Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGRect>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect rect,
                ffi.Pointer<objc.ObjCObject> window)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGRect>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertRect_fromWindow_ =
    objc.registerName("convertRect:fromWindow:");
late final _sel_touchesForWindow_ = objc.registerName("touchesForWindow:");
final _objc_msgSend_574 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> window)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_touchesForView_ = objc.registerName("touchesForView:");
final _objc_msgSend_575 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> view)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_touchesForGestureRecognizer_ =
    objc.registerName("touchesForGestureRecognizer:");
final _objc_msgSend_576 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> gesture)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_coalescedTouchesForTouch_ =
    objc.registerName("coalescedTouchesForTouch:");
final _objc_msgSend_577 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> touch)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predictedTouchesForTouch_ =
    objc.registerName("predictedTouchesForTouch:");
late final _sel_sendAction_to_from_forEvent_ =
    objc.registerName("sendAction:to:from:forEvent:");
final _objc_msgSend_578 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector> action,
                ffi.Pointer<objc.ObjCObject> target,
                ffi.Pointer<objc.ObjCObject> sender,
                ffi.Pointer<objc.ObjCObject> event)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isNetworkActivityIndicatorVisible =
    objc.registerName("isNetworkActivityIndicatorVisible");
late final _sel_setNetworkActivityIndicatorVisible_ =
    objc.registerName("setNetworkActivityIndicatorVisible:");
late final _sel_statusBarStyle = objc.registerName("statusBarStyle");
late final _sel_isStatusBarHidden = objc.registerName("isStatusBarHidden");
late final _sel_statusBarOrientation =
    objc.registerName("statusBarOrientation");

enum UIInterfaceOrientationMask {
  UIInterfaceOrientationMaskPortrait(2),
  UIInterfaceOrientationMaskLandscapeLeft(16),
  UIInterfaceOrientationMaskLandscapeRight(8),
  UIInterfaceOrientationMaskPortraitUpsideDown(4),
  UIInterfaceOrientationMaskLandscape(24),
  UIInterfaceOrientationMaskAll(30),
  UIInterfaceOrientationMaskAllButUpsideDown(26);

  final int value;
  const UIInterfaceOrientationMask(this.value);

  static UIInterfaceOrientationMask fromValue(int value) => switch (value) {
        2 => UIInterfaceOrientationMaskPortrait,
        16 => UIInterfaceOrientationMaskLandscapeLeft,
        8 => UIInterfaceOrientationMaskLandscapeRight,
        4 => UIInterfaceOrientationMaskPortraitUpsideDown,
        24 => UIInterfaceOrientationMaskLandscape,
        30 => UIInterfaceOrientationMaskAll,
        26 => UIInterfaceOrientationMaskAllButUpsideDown,
        _ => throw ArgumentError(
            "Unknown value for UIInterfaceOrientationMask: $value"),
      };
}

late final _sel_supportedInterfaceOrientationsForWindow_ =
    objc.registerName("supportedInterfaceOrientationsForWindow:");
final _objc_msgSend_579 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> window)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_statusBarOrientationAnimationDuration =
    objc.registerName("statusBarOrientationAnimationDuration");
late final _sel_statusBarFrame = objc.registerName("statusBarFrame");
late final _sel_applicationIconBadgeNumber =
    objc.registerName("applicationIconBadgeNumber");
late final _sel_setApplicationIconBadgeNumber_ =
    objc.registerName("setApplicationIconBadgeNumber:");
late final _sel_applicationSupportsShakeToEdit =
    objc.registerName("applicationSupportsShakeToEdit");
late final _sel_setApplicationSupportsShakeToEdit_ =
    objc.registerName("setApplicationSupportsShakeToEdit:");

enum UIApplicationState {
  UIApplicationStateActive(0),
  UIApplicationStateInactive(1),
  UIApplicationStateBackground(2);

  final int value;
  const UIApplicationState(this.value);

  static UIApplicationState fromValue(int value) => switch (value) {
        0 => UIApplicationStateActive,
        1 => UIApplicationStateInactive,
        2 => UIApplicationStateBackground,
        _ =>
          throw ArgumentError("Unknown value for UIApplicationState: $value"),
      };
}

late final _sel_applicationState = objc.registerName("applicationState");
final _objc_msgSend_580 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_backgroundTimeRemaining =
    objc.registerName("backgroundTimeRemaining");
late final _sel_beginBackgroundTaskWithExpirationHandler_ =
    objc.registerName("beginBackgroundTaskWithExpirationHandler:");
final _objc_msgSend_581 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCBlockImpl> handler)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_beginBackgroundTaskWithName_expirationHandler_ =
    objc.registerName("beginBackgroundTaskWithName:expirationHandler:");
final _objc_msgSend_582 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> taskName,
                ffi.Pointer<objc.ObjCBlockImpl> handler)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_endBackgroundTask_ = objc.registerName("endBackgroundTask:");
final _objc_msgSend_583 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong identifier)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setMinimumBackgroundFetchInterval_ =
    objc.registerName("setMinimumBackgroundFetchInterval:");
final _objc_msgSend_584 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double minimumBackgroundFetchInterval)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();

enum UIBackgroundRefreshStatus {
  UIBackgroundRefreshStatusRestricted(0),
  UIBackgroundRefreshStatusDenied(1),
  UIBackgroundRefreshStatusAvailable(2);

  final int value;
  const UIBackgroundRefreshStatus(this.value);

  static UIBackgroundRefreshStatus fromValue(int value) => switch (value) {
        0 => UIBackgroundRefreshStatusRestricted,
        1 => UIBackgroundRefreshStatusDenied,
        2 => UIBackgroundRefreshStatusAvailable,
        _ => throw ArgumentError(
            "Unknown value for UIBackgroundRefreshStatus: $value"),
      };
}

late final _sel_backgroundRefreshStatus =
    objc.registerName("backgroundRefreshStatus");
final _objc_msgSend_585 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isProtectedDataAvailable =
    objc.registerName("isProtectedDataAvailable");
late final _sel_userInterfaceLayoutDirection =
    objc.registerName("userInterfaceLayoutDirection");
late final _sel_connectedScenes = objc.registerName("connectedScenes");
late final _sel_openSessions = objc.registerName("openSessions");
late final _sel_supportsMultipleScenes =
    objc.registerName("supportsMultipleScenes");

/// UISceneSessionActivationRequest
class UISceneSessionActivationRequest extends objc.NSObject {
  UISceneSessionActivationRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneSessionActivationRequest] that points to the same underlying object as [other].
  UISceneSessionActivationRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneSessionActivationRequest] that wraps the given raw object pointer.
  UISceneSessionActivationRequest.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneSessionActivationRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UISceneSessionActivationRequest);
  }

  /// role
  objc.NSString get role {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_role);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// session
  UISceneSession? get session {
    final _ret = _objc_msgSend_586(this.ref.pointer, _sel_session);
    return _ret.address == 0
        ? null
        : UISceneSession.castFromPointer(_ret, retain: true, release: true);
  }

  /// userActivity
  NSUserActivity? get userActivity {
    final _ret = _objc_msgSend_536(this.ref.pointer, _sel_userActivity);
    return _ret.address == 0
        ? null
        : NSUserActivity.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUserActivity:
  set userActivity(NSUserActivity? value) {
    return _objc_msgSend_537(this.ref.pointer, _sel_setUserActivity_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// options
  UISceneActivationRequestOptions? get options {
    final _ret = _objc_msgSend_590(this.ref.pointer, _sel_options);
    return _ret.address == 0
        ? null
        : UISceneActivationRequestOptions.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// setOptions:
  set options(UISceneActivationRequestOptions? value) {
    return _objc_msgSend_591(
        this.ref.pointer, _sel_setOptions_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// request
  static UISceneSessionActivationRequest request() {
    final _ret =
        _objc_msgSend_4(_class_UISceneSessionActivationRequest, _sel_request);
    return UISceneSessionActivationRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// requestWithRole:
  static UISceneSessionActivationRequest requestWithRole_(objc.NSString role) {
    final _ret = _objc_msgSend_103(_class_UISceneSessionActivationRequest,
        _sel_requestWithRole_, role.ref.pointer);
    return UISceneSessionActivationRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// requestWithSession:
  static UISceneSessionActivationRequest requestWithSession_(
      UISceneSession session) {
    final _ret = _objc_msgSend_592(_class_UISceneSessionActivationRequest,
        _sel_requestWithSession_, session.ref.pointer);
    return UISceneSessionActivationRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  UISceneSessionActivationRequest init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneSessionActivationRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UISceneSessionActivationRequest new1() {
    final _ret =
        _objc_msgSend_4(_class_UISceneSessionActivationRequest, _sel_new);
    return UISceneSessionActivationRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UISceneSessionActivationRequest allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneSessionActivationRequest, _sel_allocWithZone_, zone);
    return UISceneSessionActivationRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneSessionActivationRequest alloc() {
    final _ret =
        _objc_msgSend_4(_class_UISceneSessionActivationRequest, _sel_alloc);
    return UISceneSessionActivationRequest.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneSessionActivationRequest =
    objc.getClass("UISceneSessionActivationRequest");
final _objc_msgSend_586 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_userActivity = objc.registerName("userActivity");
late final _sel_setUserActivity_ = objc.registerName("setUserActivity:");

/// UISceneActivationRequestOptions
class UISceneActivationRequestOptions extends objc.NSObject {
  UISceneActivationRequestOptions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneActivationRequestOptions] that points to the same underlying object as [other].
  UISceneActivationRequestOptions.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneActivationRequestOptions] that wraps the given raw object pointer.
  UISceneActivationRequestOptions.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneActivationRequestOptions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UISceneActivationRequestOptions);
  }

  /// requestingScene
  UIScene? get requestingScene {
    final _ret = _objc_msgSend_390(this.ref.pointer, _sel_requestingScene);
    return _ret.address == 0
        ? null
        : UIScene.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRequestingScene:
  set requestingScene(UIScene? value) {
    return _objc_msgSend_587(this.ref.pointer, _sel_setRequestingScene_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// collectionJoinBehavior
  UISceneCollectionJoinBehavior get collectionJoinBehavior {
    final _ret =
        _objc_msgSend_588(this.ref.pointer, _sel_collectionJoinBehavior);
    return UISceneCollectionJoinBehavior.fromValue(_ret);
  }

  /// setCollectionJoinBehavior:
  set collectionJoinBehavior(UISceneCollectionJoinBehavior value) {
    return _objc_msgSend_589(
        this.ref.pointer, _sel_setCollectionJoinBehavior_, value.value);
  }

  /// init
  UISceneActivationRequestOptions init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneActivationRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UISceneActivationRequestOptions new1() {
    final _ret =
        _objc_msgSend_4(_class_UISceneActivationRequestOptions, _sel_new);
    return UISceneActivationRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UISceneActivationRequestOptions allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneActivationRequestOptions, _sel_allocWithZone_, zone);
    return UISceneActivationRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneActivationRequestOptions alloc() {
    final _ret =
        _objc_msgSend_4(_class_UISceneActivationRequestOptions, _sel_alloc);
    return UISceneActivationRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneActivationRequestOptions =
    objc.getClass("UISceneActivationRequestOptions");
late final _sel_requestingScene = objc.registerName("requestingScene");
late final _sel_setRequestingScene_ = objc.registerName("setRequestingScene:");
final _objc_msgSend_587 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum UISceneCollectionJoinBehavior {
  UISceneCollectionJoinBehaviorAutomatic(0),
  UISceneCollectionJoinBehaviorPreferred(1),
  UISceneCollectionJoinBehaviorDisallowed(2),
  UISceneCollectionJoinBehaviorPreferredWithoutActivating(3);

  final int value;
  const UISceneCollectionJoinBehavior(this.value);

  static UISceneCollectionJoinBehavior fromValue(int value) => switch (value) {
        0 => UISceneCollectionJoinBehaviorAutomatic,
        1 => UISceneCollectionJoinBehaviorPreferred,
        2 => UISceneCollectionJoinBehaviorDisallowed,
        3 => UISceneCollectionJoinBehaviorPreferredWithoutActivating,
        _ => throw ArgumentError(
            "Unknown value for UISceneCollectionJoinBehavior: $value"),
      };
}

late final _sel_collectionJoinBehavior =
    objc.registerName("collectionJoinBehavior");
final _objc_msgSend_588 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCollectionJoinBehavior_ =
    objc.registerName("setCollectionJoinBehavior:");
final _objc_msgSend_589 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_590 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setOptions_ = objc.registerName("setOptions:");
final _objc_msgSend_591 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_request = objc.registerName("request");
late final _sel_requestWithRole_ = objc.registerName("requestWithRole:");
late final _sel_requestWithSession_ = objc.registerName("requestWithSession:");
final _objc_msgSend_592 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> session)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_activateSceneSessionForRequest_errorHandler_ =
    objc.registerName("activateSceneSessionForRequest:errorHandler:");
final _objc_msgSend_593 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> request,
                ffi.Pointer<objc.ObjCBlockImpl> errorHandler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_requestSceneSessionActivation_userActivity_options_errorHandler_ =
    objc.registerName(
        "requestSceneSessionActivation:userActivity:options:errorHandler:");
final _objc_msgSend_594 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> sceneSession,
                ffi.Pointer<objc.ObjCObject> userActivity,
                ffi.Pointer<objc.ObjCObject> options,
                ffi.Pointer<objc.ObjCBlockImpl> errorHandler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// UISceneDestructionRequestOptions
class UISceneDestructionRequestOptions extends objc.NSObject {
  UISceneDestructionRequestOptions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UISceneDestructionRequestOptions] that points to the same underlying object as [other].
  UISceneDestructionRequestOptions.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UISceneDestructionRequestOptions] that wraps the given raw object pointer.
  UISceneDestructionRequestOptions.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UISceneDestructionRequestOptions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UISceneDestructionRequestOptions);
  }

  /// init
  UISceneDestructionRequestOptions init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UISceneDestructionRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UISceneDestructionRequestOptions new1() {
    final _ret =
        _objc_msgSend_4(_class_UISceneDestructionRequestOptions, _sel_new);
    return UISceneDestructionRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UISceneDestructionRequestOptions allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UISceneDestructionRequestOptions, _sel_allocWithZone_, zone);
    return UISceneDestructionRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UISceneDestructionRequestOptions alloc() {
    final _ret =
        _objc_msgSend_4(_class_UISceneDestructionRequestOptions, _sel_alloc);
    return UISceneDestructionRequestOptions.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UISceneDestructionRequestOptions =
    objc.getClass("UISceneDestructionRequestOptions");
late final _sel_requestSceneSessionDestruction_options_errorHandler_ =
    objc.registerName("requestSceneSessionDestruction:options:errorHandler:");
final _objc_msgSend_595 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> sceneSession,
                ffi.Pointer<objc.ObjCObject> options,
                ffi.Pointer<objc.ObjCBlockImpl> errorHandler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_requestSceneSessionRefresh_ =
    objc.registerName("requestSceneSessionRefresh:");
final _objc_msgSend_596 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> sceneSession)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerForRemoteNotifications =
    objc.registerName("registerForRemoteNotifications");
late final _sel_unregisterForRemoteNotifications =
    objc.registerName("unregisterForRemoteNotifications");
late final _sel_isRegisteredForRemoteNotifications =
    objc.registerName("isRegisteredForRemoteNotifications");

enum UIRemoteNotificationType {
  UIRemoteNotificationTypeNone(0),
  UIRemoteNotificationTypeBadge(1),
  UIRemoteNotificationTypeSound(2),
  UIRemoteNotificationTypeAlert(4),
  UIRemoteNotificationTypeNewsstandContentAvailability(8);

  final int value;
  const UIRemoteNotificationType(this.value);

  static UIRemoteNotificationType fromValue(int value) => switch (value) {
        0 => UIRemoteNotificationTypeNone,
        1 => UIRemoteNotificationTypeBadge,
        2 => UIRemoteNotificationTypeSound,
        4 => UIRemoteNotificationTypeAlert,
        8 => UIRemoteNotificationTypeNewsstandContentAvailability,
        _ => throw ArgumentError(
            "Unknown value for UIRemoteNotificationType: $value"),
      };
}

late final _sel_registerForRemoteNotificationTypes_ =
    objc.registerName("registerForRemoteNotificationTypes:");
final _objc_msgSend_597 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong types)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_enabledRemoteNotificationTypes =
    objc.registerName("enabledRemoteNotificationTypes");
final _objc_msgSend_598 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

/// UILocalNotification
class UILocalNotification extends objc.NSObject {
  UILocalNotification._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UILocalNotification] that points to the same underlying object as [other].
  UILocalNotification.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UILocalNotification] that wraps the given raw object pointer.
  UILocalNotification.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UILocalNotification].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_UILocalNotification);
  }

  /// init
  UILocalNotification init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UILocalNotification.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithCoder:
  UILocalNotification? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_66(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : UILocalNotification.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// fireDate
  objc.NSDate? get fireDate {
    final _ret = _objc_msgSend_524(this.ref.pointer, _sel_fireDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// setFireDate:
  set fireDate(objc.NSDate? value) {
    return _objc_msgSend_525(
        this.ref.pointer, _sel_setFireDate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// timeZone
  NSTimeZone? get timeZone {
    final _ret = _objc_msgSend_605(this.ref.pointer, _sel_timeZone);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTimeZone:
  set timeZone(NSTimeZone? value) {
    return _objc_msgSend_606(
        this.ref.pointer, _sel_setTimeZone_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// repeatInterval
  NSCalendarUnit get repeatInterval {
    final _ret = _objc_msgSend_607(this.ref.pointer, _sel_repeatInterval);
    return NSCalendarUnit.fromValue(_ret);
  }

  /// setRepeatInterval:
  set repeatInterval(NSCalendarUnit value) {
    return _objc_msgSend_608(
        this.ref.pointer, _sel_setRepeatInterval_, value.value);
  }

  /// repeatCalendar
  NSCalendar? get repeatCalendar {
    final _ret = _objc_msgSend_618(this.ref.pointer, _sel_repeatCalendar);
    return _ret.address == 0
        ? null
        : NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRepeatCalendar:
  set repeatCalendar(NSCalendar? value) {
    return _objc_msgSend_619(this.ref.pointer, _sel_setRepeatCalendar_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// region
  CLRegion? get region {
    final _ret = _objc_msgSend_646(this.ref.pointer, _sel_region);
    return _ret.address == 0
        ? null
        : CLRegion.castFromPointer(_ret, retain: true, release: true);
  }

  /// setRegion:
  set region(CLRegion? value) {
    return _objc_msgSend_647(
        this.ref.pointer, _sel_setRegion_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// regionTriggersOnce
  bool get regionTriggersOnce {
    return _objc_msgSend_11(this.ref.pointer, _sel_regionTriggersOnce);
  }

  /// setRegionTriggersOnce:
  set regionTriggersOnce(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setRegionTriggersOnce_, value);
  }

  /// alertBody
  objc.NSString? get alertBody {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_alertBody);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAlertBody:
  set alertBody(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setAlertBody_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// hasAction
  bool get hasAction {
    return _objc_msgSend_11(this.ref.pointer, _sel_hasAction);
  }

  /// setHasAction:
  set hasAction(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setHasAction_, value);
  }

  /// alertAction
  objc.NSString? get alertAction {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_alertAction);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAlertAction:
  set alertAction(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setAlertAction_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// alertLaunchImage
  objc.NSString? get alertLaunchImage {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_alertLaunchImage);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAlertLaunchImage:
  set alertLaunchImage(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setAlertLaunchImage_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// alertTitle
  objc.NSString? get alertTitle {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_alertTitle);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAlertTitle:
  set alertTitle(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setAlertTitle_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// soundName
  objc.NSString? get soundName {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_soundName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setSoundName:
  set soundName(objc.NSString? value) {
    return _objc_msgSend_111(this.ref.pointer, _sel_setSoundName_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// applicationIconBadgeNumber
  int get applicationIconBadgeNumber {
    return _objc_msgSend_59(this.ref.pointer, _sel_applicationIconBadgeNumber);
  }

  /// setApplicationIconBadgeNumber:
  set applicationIconBadgeNumber(int value) {
    return _objc_msgSend_60(
        this.ref.pointer, _sel_setApplicationIconBadgeNumber_, value);
  }

  /// userInfo
  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_112(this.ref.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setUserInfo:
  set userInfo(objc.NSDictionary? value) {
    return _objc_msgSend_113(
        this.ref.pointer, _sel_setUserInfo_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// category
  objc.NSString? get category {
    final _ret = _objc_msgSend_40(this.ref.pointer, _sel_category);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCategory:
  set category(objc.NSString? value) {
    return _objc_msgSend_111(
        this.ref.pointer, _sel_setCategory_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// new
  static UILocalNotification new1() {
    final _ret = _objc_msgSend_4(_class_UILocalNotification, _sel_new);
    return UILocalNotification.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UILocalNotification allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_UILocalNotification, _sel_allocWithZone_, zone);
    return UILocalNotification.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UILocalNotification alloc() {
    final _ret = _objc_msgSend_4(_class_UILocalNotification, _sel_alloc);
    return UILocalNotification.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UILocalNotification = objc.getClass("UILocalNotification");

/// NSTimeZone
class NSTimeZone extends objc.NSObject {
  NSTimeZone._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTimeZone] that points to the same underlying object as [other].
  NSTimeZone.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSTimeZone] that wraps the given raw object pointer.
  NSTimeZone.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTimeZone].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSTimeZone);
  }

  /// name
  objc.NSString get name {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// data
  objc.NSData get data {
    final _ret = _objc_msgSend_599(this.ref.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// secondsFromGMTForDate:
  int secondsFromGMTForDate_(objc.NSDate aDate) {
    return _objc_msgSend_600(
        this.ref.pointer, _sel_secondsFromGMTForDate_, aDate.ref.pointer);
  }

  /// abbreviationForDate:
  objc.NSString? abbreviationForDate_(objc.NSDate aDate) {
    final _ret = _objc_msgSend_601(
        this.ref.pointer, _sel_abbreviationForDate_, aDate.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// isDaylightSavingTimeForDate:
  bool isDaylightSavingTimeForDate_(objc.NSDate aDate) {
    return _objc_msgSend_602(
        this.ref.pointer, _sel_isDaylightSavingTimeForDate_, aDate.ref.pointer);
  }

  /// daylightSavingTimeOffsetForDate:
  double daylightSavingTimeOffsetForDate_(objc.NSDate aDate) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_603Fpret(this.ref.pointer,
            _sel_daylightSavingTimeOffsetForDate_, aDate.ref.pointer)
        : _objc_msgSend_603(this.ref.pointer,
            _sel_daylightSavingTimeOffsetForDate_, aDate.ref.pointer);
  }

  /// nextDaylightSavingTimeTransitionAfterDate:
  objc.NSDate? nextDaylightSavingTimeTransitionAfterDate_(objc.NSDate aDate) {
    final _ret = _objc_msgSend_604(this.ref.pointer,
        _sel_nextDaylightSavingTimeTransitionAfterDate_, aDate.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSTimeZone init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSTimeZone new1() {
    final _ret = _objc_msgSend_4(_class_NSTimeZone, _sel_new);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSTimeZone allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSTimeZone, _sel_allocWithZone_, zone);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSTimeZone alloc() {
    final _ret = _objc_msgSend_4(_class_NSTimeZone, _sel_alloc);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSTimeZone = objc.getClass("NSTimeZone");
late final _sel_data = objc.registerName("data");
final _objc_msgSend_599 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_secondsFromGMTForDate_ =
    objc.registerName("secondsFromGMTForDate:");
final _objc_msgSend_600 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aDate)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_abbreviationForDate_ =
    objc.registerName("abbreviationForDate:");
final _objc_msgSend_601 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aDate)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isDaylightSavingTimeForDate_ =
    objc.registerName("isDaylightSavingTimeForDate:");
final _objc_msgSend_602 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aDate)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_daylightSavingTimeOffsetForDate_ =
    objc.registerName("daylightSavingTimeOffsetForDate:");
final _objc_msgSend_603 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aDate)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_603Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aDate)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_nextDaylightSavingTimeTransitionAfterDate_ =
    objc.registerName("nextDaylightSavingTimeTransitionAfterDate:");
final _objc_msgSend_604 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> aDate)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeZone = objc.registerName("timeZone");
final _objc_msgSend_605 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTimeZone_ = objc.registerName("setTimeZone:");
final _objc_msgSend_606 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

enum NSCalendarUnit {
  NSCalendarUnitEra(2),
  NSCalendarUnitYear(4),
  NSCalendarUnitMonth(8),
  NSCalendarUnitDay(16),
  NSCalendarUnitHour(32),
  NSCalendarUnitMinute(64),
  NSCalendarUnitSecond(128),
  NSCalendarUnitWeekday(512),
  NSCalendarUnitWeekdayOrdinal(1024),
  NSCalendarUnitQuarter(2048),
  NSCalendarUnitWeekOfMonth(4096),
  NSCalendarUnitWeekOfYear(8192),
  NSCalendarUnitYearForWeekOfYear(16384),
  NSCalendarUnitNanosecond(32768),
  NSCalendarUnitCalendar(1048576),
  NSCalendarUnitTimeZone(2097152),
  NSWeekCalendarUnit(256);

  static const NSEraCalendarUnit = NSCalendarUnitEra;
  static const NSYearCalendarUnit = NSCalendarUnitYear;
  static const NSMonthCalendarUnit = NSCalendarUnitMonth;
  static const NSDayCalendarUnit = NSCalendarUnitDay;
  static const NSHourCalendarUnit = NSCalendarUnitHour;
  static const NSMinuteCalendarUnit = NSCalendarUnitMinute;
  static const NSSecondCalendarUnit = NSCalendarUnitSecond;
  static const NSWeekdayCalendarUnit = NSCalendarUnitWeekday;
  static const NSWeekdayOrdinalCalendarUnit = NSCalendarUnitWeekdayOrdinal;
  static const NSQuarterCalendarUnit = NSCalendarUnitQuarter;
  static const NSWeekOfMonthCalendarUnit = NSCalendarUnitWeekOfMonth;
  static const NSWeekOfYearCalendarUnit = NSCalendarUnitWeekOfYear;
  static const NSYearForWeekOfYearCalendarUnit =
      NSCalendarUnitYearForWeekOfYear;
  static const NSCalendarCalendarUnit = NSCalendarUnitCalendar;
  static const NSTimeZoneCalendarUnit = NSCalendarUnitTimeZone;

  final int value;
  const NSCalendarUnit(this.value);

  static NSCalendarUnit fromValue(int value) => switch (value) {
        2 => NSCalendarUnitEra,
        4 => NSCalendarUnitYear,
        8 => NSCalendarUnitMonth,
        16 => NSCalendarUnitDay,
        32 => NSCalendarUnitHour,
        64 => NSCalendarUnitMinute,
        128 => NSCalendarUnitSecond,
        512 => NSCalendarUnitWeekday,
        1024 => NSCalendarUnitWeekdayOrdinal,
        2048 => NSCalendarUnitQuarter,
        4096 => NSCalendarUnitWeekOfMonth,
        8192 => NSCalendarUnitWeekOfYear,
        16384 => NSCalendarUnitYearForWeekOfYear,
        32768 => NSCalendarUnitNanosecond,
        1048576 => NSCalendarUnitCalendar,
        2097152 => NSCalendarUnitTimeZone,
        256 => NSWeekCalendarUnit,
        _ => throw ArgumentError("Unknown value for NSCalendarUnit: $value"),
      };

  @override
  String toString() {
    if (this == NSCalendarUnitEra)
      return "NSCalendarUnit.NSCalendarUnitEra, NSCalendarUnit.NSEraCalendarUnit";
    if (this == NSCalendarUnitYear)
      return "NSCalendarUnit.NSCalendarUnitYear, NSCalendarUnit.NSYearCalendarUnit";
    if (this == NSCalendarUnitMonth)
      return "NSCalendarUnit.NSCalendarUnitMonth, NSCalendarUnit.NSMonthCalendarUnit";
    if (this == NSCalendarUnitDay)
      return "NSCalendarUnit.NSCalendarUnitDay, NSCalendarUnit.NSDayCalendarUnit";
    if (this == NSCalendarUnitHour)
      return "NSCalendarUnit.NSCalendarUnitHour, NSCalendarUnit.NSHourCalendarUnit";
    if (this == NSCalendarUnitMinute)
      return "NSCalendarUnit.NSCalendarUnitMinute, NSCalendarUnit.NSMinuteCalendarUnit";
    if (this == NSCalendarUnitSecond)
      return "NSCalendarUnit.NSCalendarUnitSecond, NSCalendarUnit.NSSecondCalendarUnit";
    if (this == NSCalendarUnitWeekday)
      return "NSCalendarUnit.NSCalendarUnitWeekday, NSCalendarUnit.NSWeekdayCalendarUnit";
    if (this == NSCalendarUnitWeekdayOrdinal)
      return "NSCalendarUnit.NSCalendarUnitWeekdayOrdinal, NSCalendarUnit.NSWeekdayOrdinalCalendarUnit";
    if (this == NSCalendarUnitQuarter)
      return "NSCalendarUnit.NSCalendarUnitQuarter, NSCalendarUnit.NSQuarterCalendarUnit";
    if (this == NSCalendarUnitWeekOfMonth)
      return "NSCalendarUnit.NSCalendarUnitWeekOfMonth, NSCalendarUnit.NSWeekOfMonthCalendarUnit";
    if (this == NSCalendarUnitWeekOfYear)
      return "NSCalendarUnit.NSCalendarUnitWeekOfYear, NSCalendarUnit.NSWeekOfYearCalendarUnit";
    if (this == NSCalendarUnitYearForWeekOfYear)
      return "NSCalendarUnit.NSCalendarUnitYearForWeekOfYear, NSCalendarUnit.NSYearForWeekOfYearCalendarUnit";
    if (this == NSCalendarUnitCalendar)
      return "NSCalendarUnit.NSCalendarUnitCalendar, NSCalendarUnit.NSCalendarCalendarUnit";
    if (this == NSCalendarUnitTimeZone)
      return "NSCalendarUnit.NSCalendarUnitTimeZone, NSCalendarUnit.NSTimeZoneCalendarUnit";
    return super.toString();
  }
}

late final _sel_repeatInterval = objc.registerName("repeatInterval");
final _objc_msgSend_607 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRepeatInterval_ = objc.registerName("setRepeatInterval:");
final _objc_msgSend_608 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// NSCalendar
class NSCalendar extends objc.NSObject {
  NSCalendar._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCalendar] that points to the same underlying object as [other].
  NSCalendar.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSCalendar] that wraps the given raw object pointer.
  NSCalendar.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCalendar].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSCalendar);
  }

  /// currentCalendar
  static NSCalendar getCurrentCalendar() {
    final _ret = _objc_msgSend_609(_class_NSCalendar, _sel_currentCalendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// autoupdatingCurrentCalendar
  static NSCalendar getAutoupdatingCurrentCalendar() {
    final _ret =
        _objc_msgSend_609(_class_NSCalendar, _sel_autoupdatingCurrentCalendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// calendarWithIdentifier:
  static NSCalendar? calendarWithIdentifier_(
      objc.NSString calendarIdentifierConstant) {
    final _ret = _objc_msgSend_610(_class_NSCalendar,
        _sel_calendarWithIdentifier_, calendarIdentifierConstant.ref.pointer);
    return _ret.address == 0
        ? null
        : NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  NSCalendar init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCalendarIdentifier:
  objc.ObjCObjectBase? initWithCalendarIdentifier_(objc.NSString ident) {
    final _ret = _objc_msgSend_5(this.ref.retainAndReturnPointer(),
        _sel_initWithCalendarIdentifier_, ident.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  /// calendarIdentifier
  objc.NSString get calendarIdentifier {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_calendarIdentifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// locale
  objc.NSLocale? get locale {
    final _ret = _objc_msgSend_175(this.ref.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  /// setLocale:
  set locale(objc.NSLocale? value) {
    return _objc_msgSend_611(
        this.ref.pointer, _sel_setLocale_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// timeZone
  NSTimeZone get timeZone {
    final _ret = _objc_msgSend_612(this.ref.pointer, _sel_timeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTimeZone:
  set timeZone(NSTimeZone value) {
    return _objc_msgSend_613(
        this.ref.pointer, _sel_setTimeZone_, value.ref.pointer);
  }

  /// firstWeekday
  int get firstWeekday {
    return _objc_msgSend_53(this.ref.pointer, _sel_firstWeekday);
  }

  /// setFirstWeekday:
  set firstWeekday(int value) {
    return _objc_msgSend_376(this.ref.pointer, _sel_setFirstWeekday_, value);
  }

  /// minimumDaysInFirstWeek
  int get minimumDaysInFirstWeek {
    return _objc_msgSend_53(this.ref.pointer, _sel_minimumDaysInFirstWeek);
  }

  /// setMinimumDaysInFirstWeek:
  set minimumDaysInFirstWeek(int value) {
    return _objc_msgSend_376(
        this.ref.pointer, _sel_setMinimumDaysInFirstWeek_, value);
  }

  /// eraSymbols
  objc.NSArray get eraSymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_eraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// longEraSymbols
  objc.NSArray get longEraSymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_longEraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// monthSymbols
  objc.NSArray get monthSymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_monthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortMonthSymbols
  objc.NSArray get shortMonthSymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_shortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortMonthSymbols
  objc.NSArray get veryShortMonthSymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_veryShortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// standaloneMonthSymbols
  objc.NSArray get standaloneMonthSymbols {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_standaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortStandaloneMonthSymbols
  objc.NSArray get shortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_shortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortStandaloneMonthSymbols
  objc.NSArray get veryShortStandaloneMonthSymbols {
    final _ret = _objc_msgSend_27(
        this.ref.pointer, _sel_veryShortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// weekdaySymbols
  objc.NSArray get weekdaySymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_weekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortWeekdaySymbols
  objc.NSArray get shortWeekdaySymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_shortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortWeekdaySymbols
  objc.NSArray get veryShortWeekdaySymbols {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_veryShortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// standaloneWeekdaySymbols
  objc.NSArray get standaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_standaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortStandaloneWeekdaySymbols
  objc.NSArray get shortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_shortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// veryShortStandaloneWeekdaySymbols
  objc.NSArray get veryShortStandaloneWeekdaySymbols {
    final _ret = _objc_msgSend_27(
        this.ref.pointer, _sel_veryShortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// quarterSymbols
  objc.NSArray get quarterSymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_quarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortQuarterSymbols
  objc.NSArray get shortQuarterSymbols {
    final _ret = _objc_msgSend_27(this.ref.pointer, _sel_shortQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// standaloneQuarterSymbols
  objc.NSArray get standaloneQuarterSymbols {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_standaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// shortStandaloneQuarterSymbols
  objc.NSArray get shortStandaloneQuarterSymbols {
    final _ret =
        _objc_msgSend_27(this.ref.pointer, _sel_shortStandaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// AMSymbol
  objc.NSString get AMSymbol {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_AMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// PMSymbol
  objc.NSString get PMSymbol {
    final _ret = _objc_msgSend_2(this.ref.pointer, _sel_PMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// minimumRangeOfUnit:
  void minimumRangeOfUnit_(ffi.Pointer<_NSRange> stret, NSCalendarUnit unit) {
    objc.useMsgSendVariants
        ? _objc_msgSend_614Stret(
            stret, this.ref.pointer, _sel_minimumRangeOfUnit_, unit.value)
        : stret.ref = _objc_msgSend_614(
            this.ref.pointer, _sel_minimumRangeOfUnit_, unit.value);
  }

  /// maximumRangeOfUnit:
  void maximumRangeOfUnit_(ffi.Pointer<_NSRange> stret, NSCalendarUnit unit) {
    objc.useMsgSendVariants
        ? _objc_msgSend_614Stret(
            stret, this.ref.pointer, _sel_maximumRangeOfUnit_, unit.value)
        : stret.ref = _objc_msgSend_614(
            this.ref.pointer, _sel_maximumRangeOfUnit_, unit.value);
  }

  /// rangeOfUnit:inUnit:forDate:
  void rangeOfUnit_inUnit_forDate_(ffi.Pointer<_NSRange> stret,
      NSCalendarUnit smaller, NSCalendarUnit larger, objc.NSDate date) {
    objc.useMsgSendVariants
        ? _objc_msgSend_615Stret(
            stret,
            this.ref.pointer,
            _sel_rangeOfUnit_inUnit_forDate_,
            smaller.value,
            larger.value,
            date.ref.pointer)
        : stret.ref = _objc_msgSend_615(
            this.ref.pointer,
            _sel_rangeOfUnit_inUnit_forDate_,
            smaller.value,
            larger.value,
            date.ref.pointer);
  }

  /// ordinalityOfUnit:inUnit:forDate:
  int ordinalityOfUnit_inUnit_forDate_(
      NSCalendarUnit smaller, NSCalendarUnit larger, objc.NSDate date) {
    return _objc_msgSend_616(
        this.ref.pointer,
        _sel_ordinalityOfUnit_inUnit_forDate_,
        smaller.value,
        larger.value,
        date.ref.pointer);
  }

  /// rangeOfUnit:startDate:interval:forDate:
  bool rangeOfUnit_startDate_interval_forDate_(
      NSCalendarUnit unit,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      objc.NSDate date) {
    return _objc_msgSend_617(
        this.ref.pointer,
        _sel_rangeOfUnit_startDate_interval_forDate_,
        unit.value,
        datep,
        tip,
        date.ref.pointer);
  }

  /// dateFromComponents:
  objc.NSDate? dateFromComponents_(NSDateComponents comps) {
    final _ret = _objc_msgSend_624(
        this.ref.pointer, _sel_dateFromComponents_, comps.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// components:fromDate:
  NSDateComponents components_fromDate_(
      NSCalendarUnit unitFlags, objc.NSDate date) {
    final _ret = _objc_msgSend_625(this.ref.pointer, _sel_components_fromDate_,
        unitFlags.value, date.ref.pointer);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateByAddingComponents:toDate:options:
  objc.NSDate? dateByAddingComponents_toDate_options_(
      NSDateComponents comps, objc.NSDate date, NSCalendarOptions opts) {
    final _ret = _objc_msgSend_626(
        this.ref.pointer,
        _sel_dateByAddingComponents_toDate_options_,
        comps.ref.pointer,
        date.ref.pointer,
        opts.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// components:fromDate:toDate:options:
  NSDateComponents components_fromDate_toDate_options_(
      NSCalendarUnit unitFlags,
      objc.NSDate startingDate,
      objc.NSDate resultDate,
      NSCalendarOptions opts) {
    final _ret = _objc_msgSend_627(
        this.ref.pointer,
        _sel_components_fromDate_toDate_options_,
        unitFlags.value,
        startingDate.ref.pointer,
        resultDate.ref.pointer,
        opts.value);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// getEra:year:month:day:fromDate:
  void getEra_year_month_day_fromDate_(
      ffi.Pointer<ffi.Long> eraValuePointer,
      ffi.Pointer<ffi.Long> yearValuePointer,
      ffi.Pointer<ffi.Long> monthValuePointer,
      ffi.Pointer<ffi.Long> dayValuePointer,
      objc.NSDate date) {
    _objc_msgSend_628(
        this.ref.pointer,
        _sel_getEra_year_month_day_fromDate_,
        eraValuePointer,
        yearValuePointer,
        monthValuePointer,
        dayValuePointer,
        date.ref.pointer);
  }

  /// getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:
  void getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_(
      ffi.Pointer<ffi.Long> eraValuePointer,
      ffi.Pointer<ffi.Long> yearValuePointer,
      ffi.Pointer<ffi.Long> weekValuePointer,
      ffi.Pointer<ffi.Long> weekdayValuePointer,
      objc.NSDate date) {
    _objc_msgSend_628(
        this.ref.pointer,
        _sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_,
        eraValuePointer,
        yearValuePointer,
        weekValuePointer,
        weekdayValuePointer,
        date.ref.pointer);
  }

  /// getHour:minute:second:nanosecond:fromDate:
  void getHour_minute_second_nanosecond_fromDate_(
      ffi.Pointer<ffi.Long> hourValuePointer,
      ffi.Pointer<ffi.Long> minuteValuePointer,
      ffi.Pointer<ffi.Long> secondValuePointer,
      ffi.Pointer<ffi.Long> nanosecondValuePointer,
      objc.NSDate date) {
    _objc_msgSend_628(
        this.ref.pointer,
        _sel_getHour_minute_second_nanosecond_fromDate_,
        hourValuePointer,
        minuteValuePointer,
        secondValuePointer,
        nanosecondValuePointer,
        date.ref.pointer);
  }

  /// component:fromDate:
  int component_fromDate_(NSCalendarUnit unit, objc.NSDate date) {
    return _objc_msgSend_629(this.ref.pointer, _sel_component_fromDate_,
        unit.value, date.ref.pointer);
  }

  /// dateWithEra:year:month:day:hour:minute:second:nanosecond:
  objc.NSDate? dateWithEra_year_month_day_hour_minute_second_nanosecond_(
      int eraValue,
      int yearValue,
      int monthValue,
      int dayValue,
      int hourValue,
      int minuteValue,
      int secondValue,
      int nanosecondValue) {
    final _ret = _objc_msgSend_630(
        this.ref.pointer,
        _sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_,
        eraValue,
        yearValue,
        monthValue,
        dayValue,
        hourValue,
        minuteValue,
        secondValue,
        nanosecondValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:
  objc.NSDate?
      dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_(
          int eraValue,
          int yearValue,
          int weekValue,
          int weekdayValue,
          int hourValue,
          int minuteValue,
          int secondValue,
          int nanosecondValue) {
    final _ret = _objc_msgSend_630(
        this.ref.pointer,
        _sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_,
        eraValue,
        yearValue,
        weekValue,
        weekdayValue,
        hourValue,
        minuteValue,
        secondValue,
        nanosecondValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// startOfDayForDate:
  objc.NSDate startOfDayForDate_(objc.NSDate date) {
    final _ret = _objc_msgSend_631(
        this.ref.pointer, _sel_startOfDayForDate_, date.ref.pointer);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// componentsInTimeZone:fromDate:
  NSDateComponents componentsInTimeZone_fromDate_(
      NSTimeZone timezone, objc.NSDate date) {
    final _ret = _objc_msgSend_632(
        this.ref.pointer,
        _sel_componentsInTimeZone_fromDate_,
        timezone.ref.pointer,
        date.ref.pointer);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// compareDate:toDate:toUnitGranularity:
  objc.NSComparisonResult compareDate_toDate_toUnitGranularity_(
      objc.NSDate date1, objc.NSDate date2, NSCalendarUnit unit) {
    final _ret = _objc_msgSend_633(
        this.ref.pointer,
        _sel_compareDate_toDate_toUnitGranularity_,
        date1.ref.pointer,
        date2.ref.pointer,
        unit.value);
    return objc.NSComparisonResult.fromValue(_ret);
  }

  /// isDate:equalToDate:toUnitGranularity:
  bool isDate_equalToDate_toUnitGranularity_(
      objc.NSDate date1, objc.NSDate date2, NSCalendarUnit unit) {
    return _objc_msgSend_634(
        this.ref.pointer,
        _sel_isDate_equalToDate_toUnitGranularity_,
        date1.ref.pointer,
        date2.ref.pointer,
        unit.value);
  }

  /// isDate:inSameDayAsDate:
  bool isDate_inSameDayAsDate_(objc.NSDate date1, objc.NSDate date2) {
    return _objc_msgSend_635(this.ref.pointer, _sel_isDate_inSameDayAsDate_,
        date1.ref.pointer, date2.ref.pointer);
  }

  /// isDateInToday:
  bool isDateInToday_(objc.NSDate date) {
    return _objc_msgSend_602(
        this.ref.pointer, _sel_isDateInToday_, date.ref.pointer);
  }

  /// isDateInYesterday:
  bool isDateInYesterday_(objc.NSDate date) {
    return _objc_msgSend_602(
        this.ref.pointer, _sel_isDateInYesterday_, date.ref.pointer);
  }

  /// isDateInTomorrow:
  bool isDateInTomorrow_(objc.NSDate date) {
    return _objc_msgSend_602(
        this.ref.pointer, _sel_isDateInTomorrow_, date.ref.pointer);
  }

  /// isDateInWeekend:
  bool isDateInWeekend_(objc.NSDate date) {
    return _objc_msgSend_602(
        this.ref.pointer, _sel_isDateInWeekend_, date.ref.pointer);
  }

  /// rangeOfWeekendStartDate:interval:containingDate:
  bool rangeOfWeekendStartDate_interval_containingDate_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      objc.NSDate date) {
    return _objc_msgSend_636(
        this.ref.pointer,
        _sel_rangeOfWeekendStartDate_interval_containingDate_,
        datep,
        tip,
        date.ref.pointer);
  }

  /// nextWeekendStartDate:interval:options:afterDate:
  bool nextWeekendStartDate_interval_options_afterDate_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      NSCalendarOptions options,
      objc.NSDate date) {
    return _objc_msgSend_637(
        this.ref.pointer,
        _sel_nextWeekendStartDate_interval_options_afterDate_,
        datep,
        tip,
        options.value,
        date.ref.pointer);
  }

  /// components:fromDateComponents:toDateComponents:options:
  NSDateComponents components_fromDateComponents_toDateComponents_options_(
      NSCalendarUnit unitFlags,
      NSDateComponents startingDateComp,
      NSDateComponents resultDateComp,
      NSCalendarOptions options) {
    final _ret = _objc_msgSend_638(
        this.ref.pointer,
        _sel_components_fromDateComponents_toDateComponents_options_,
        unitFlags.value,
        startingDateComp.ref.pointer,
        resultDateComp.ref.pointer,
        options.value);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateByAddingUnit:value:toDate:options:
  objc.NSDate? dateByAddingUnit_value_toDate_options_(NSCalendarUnit unit,
      int value, objc.NSDate date, NSCalendarOptions options) {
    final _ret = _objc_msgSend_639(
        this.ref.pointer,
        _sel_dateByAddingUnit_value_toDate_options_,
        unit.value,
        value,
        date.ref.pointer,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:
  void enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_(
      objc.NSDate start,
      NSDateComponents comps,
      NSCalendarOptions opts,
      objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool,
                  ffi.Pointer<ffi.Bool>)>
          block) {
    _objc_msgSend_640(
        this.ref.pointer,
        _sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_,
        start.ref.pointer,
        comps.ref.pointer,
        opts.value,
        block.ref.pointer);
  }

  /// nextDateAfterDate:matchingComponents:options:
  objc.NSDate? nextDateAfterDate_matchingComponents_options_(
      objc.NSDate date, NSDateComponents comps, NSCalendarOptions options) {
    final _ret = _objc_msgSend_641(
        this.ref.pointer,
        _sel_nextDateAfterDate_matchingComponents_options_,
        date.ref.pointer,
        comps.ref.pointer,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// nextDateAfterDate:matchingUnit:value:options:
  objc.NSDate? nextDateAfterDate_matchingUnit_value_options_(objc.NSDate date,
      NSCalendarUnit unit, int value, NSCalendarOptions options) {
    final _ret = _objc_msgSend_642(
        this.ref.pointer,
        _sel_nextDateAfterDate_matchingUnit_value_options_,
        date.ref.pointer,
        unit.value,
        value,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// nextDateAfterDate:matchingHour:minute:second:options:
  objc.NSDate? nextDateAfterDate_matchingHour_minute_second_options_(
      objc.NSDate date,
      int hourValue,
      int minuteValue,
      int secondValue,
      NSCalendarOptions options) {
    final _ret = _objc_msgSend_643(
        this.ref.pointer,
        _sel_nextDateAfterDate_matchingHour_minute_second_options_,
        date.ref.pointer,
        hourValue,
        minuteValue,
        secondValue,
        options.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateBySettingUnit:value:ofDate:options:
  objc.NSDate? dateBySettingUnit_value_ofDate_options_(
      NSCalendarUnit unit, int v, objc.NSDate date, NSCalendarOptions opts) {
    final _ret = _objc_msgSend_639(
        this.ref.pointer,
        _sel_dateBySettingUnit_value_ofDate_options_,
        unit.value,
        v,
        date.ref.pointer,
        opts.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// dateBySettingHour:minute:second:ofDate:options:
  objc.NSDate? dateBySettingHour_minute_second_ofDate_options_(
      int h, int m, int s, objc.NSDate date, NSCalendarOptions opts) {
    final _ret = _objc_msgSend_644(
        this.ref.pointer,
        _sel_dateBySettingHour_minute_second_ofDate_options_,
        h,
        m,
        s,
        date.ref.pointer,
        opts.value);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// date:matchesComponents:
  bool date_matchesComponents_(objc.NSDate date, NSDateComponents components) {
    return _objc_msgSend_645(this.ref.pointer, _sel_date_matchesComponents_,
        date.ref.pointer, components.ref.pointer);
  }

  /// new
  static NSCalendar new1() {
    final _ret = _objc_msgSend_4(_class_NSCalendar, _sel_new);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSCalendar allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(_class_NSCalendar, _sel_allocWithZone_, zone);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSCalendar alloc() {
    final _ret = _objc_msgSend_4(_class_NSCalendar, _sel_alloc);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSCalendar = objc.getClass("NSCalendar");
late final _sel_currentCalendar = objc.registerName("currentCalendar");
final _objc_msgSend_609 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_autoupdatingCurrentCalendar =
    objc.registerName("autoupdatingCurrentCalendar");
late final _sel_calendarWithIdentifier_ =
    objc.registerName("calendarWithIdentifier:");
final _objc_msgSend_610 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> calendarIdentifierConstant)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCalendarIdentifier_ =
    objc.registerName("initWithCalendarIdentifier:");
late final _sel_calendarIdentifier = objc.registerName("calendarIdentifier");
late final _sel_setLocale_ = objc.registerName("setLocale:");
final _objc_msgSend_611 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_612 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_613 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_firstWeekday = objc.registerName("firstWeekday");
late final _sel_setFirstWeekday_ = objc.registerName("setFirstWeekday:");
late final _sel_minimumDaysInFirstWeek =
    objc.registerName("minimumDaysInFirstWeek");
late final _sel_setMinimumDaysInFirstWeek_ =
    objc.registerName("setMinimumDaysInFirstWeek:");
late final _sel_eraSymbols = objc.registerName("eraSymbols");
late final _sel_longEraSymbols = objc.registerName("longEraSymbols");
late final _sel_monthSymbols = objc.registerName("monthSymbols");
late final _sel_shortMonthSymbols = objc.registerName("shortMonthSymbols");
late final _sel_veryShortMonthSymbols =
    objc.registerName("veryShortMonthSymbols");
late final _sel_standaloneMonthSymbols =
    objc.registerName("standaloneMonthSymbols");
late final _sel_shortStandaloneMonthSymbols =
    objc.registerName("shortStandaloneMonthSymbols");
late final _sel_veryShortStandaloneMonthSymbols =
    objc.registerName("veryShortStandaloneMonthSymbols");
late final _sel_weekdaySymbols = objc.registerName("weekdaySymbols");
late final _sel_shortWeekdaySymbols = objc.registerName("shortWeekdaySymbols");
late final _sel_veryShortWeekdaySymbols =
    objc.registerName("veryShortWeekdaySymbols");
late final _sel_standaloneWeekdaySymbols =
    objc.registerName("standaloneWeekdaySymbols");
late final _sel_shortStandaloneWeekdaySymbols =
    objc.registerName("shortStandaloneWeekdaySymbols");
late final _sel_veryShortStandaloneWeekdaySymbols =
    objc.registerName("veryShortStandaloneWeekdaySymbols");
late final _sel_quarterSymbols = objc.registerName("quarterSymbols");
late final _sel_shortQuarterSymbols = objc.registerName("shortQuarterSymbols");
late final _sel_standaloneQuarterSymbols =
    objc.registerName("standaloneQuarterSymbols");
late final _sel_shortStandaloneQuarterSymbols =
    objc.registerName("shortStandaloneQuarterSymbols");
late final _sel_AMSymbol = objc.registerName("AMSymbol");
late final _sel_PMSymbol = objc.registerName("PMSymbol");
late final _sel_minimumRangeOfUnit_ = objc.registerName("minimumRangeOfUnit:");
final _objc_msgSend_614 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong unit)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_614Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong unit)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_maximumRangeOfUnit_ = objc.registerName("maximumRangeOfUnit:");
late final _sel_rangeOfUnit_inUnit_forDate_ =
    objc.registerName("rangeOfUnit:inUnit:forDate:");
final _objc_msgSend_615 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong smaller,
                ffi.UnsignedLong larger,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_615Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong smaller,
                ffi.UnsignedLong larger,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_ordinalityOfUnit_inUnit_forDate_ =
    objc.registerName("ordinalityOfUnit:inUnit:forDate:");
final _objc_msgSend_616 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong smaller,
                ffi.UnsignedLong larger,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rangeOfUnit_startDate_interval_forDate_ =
    objc.registerName("rangeOfUnit:startDate:interval:forDate:");
final _objc_msgSend_617 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong unit,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
                ffi.Pointer<ffi.Double> tip,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<objc.ObjCObject>)>();

/// NSDateComponents
class NSDateComponents extends objc.NSObject {
  NSDateComponents._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDateComponents] that points to the same underlying object as [other].
  NSDateComponents.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSDateComponents] that wraps the given raw object pointer.
  NSDateComponents.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDateComponents].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSDateComponents);
  }

  /// calendar
  NSCalendar? get calendar {
    final _ret = _objc_msgSend_618(this.ref.pointer, _sel_calendar);
    return _ret.address == 0
        ? null
        : NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCalendar:
  set calendar(NSCalendar? value) {
    return _objc_msgSend_619(
        this.ref.pointer, _sel_setCalendar_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// timeZone
  NSTimeZone? get timeZone {
    final _ret = _objc_msgSend_605(this.ref.pointer, _sel_timeZone);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  /// setTimeZone:
  set timeZone(NSTimeZone? value) {
    return _objc_msgSend_606(
        this.ref.pointer, _sel_setTimeZone_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// era
  int get era {
    return _objc_msgSend_59(this.ref.pointer, _sel_era);
  }

  /// setEra:
  set era(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setEra_, value);
  }

  /// year
  int get year {
    return _objc_msgSend_59(this.ref.pointer, _sel_year);
  }

  /// setYear:
  set year(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setYear_, value);
  }

  /// month
  int get month {
    return _objc_msgSend_59(this.ref.pointer, _sel_month);
  }

  /// setMonth:
  set month(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setMonth_, value);
  }

  /// day
  int get day {
    return _objc_msgSend_59(this.ref.pointer, _sel_day);
  }

  /// setDay:
  set day(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setDay_, value);
  }

  /// hour
  int get hour {
    return _objc_msgSend_59(this.ref.pointer, _sel_hour);
  }

  /// setHour:
  set hour(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setHour_, value);
  }

  /// minute
  int get minute {
    return _objc_msgSend_59(this.ref.pointer, _sel_minute);
  }

  /// setMinute:
  set minute(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setMinute_, value);
  }

  /// second
  int get second {
    return _objc_msgSend_59(this.ref.pointer, _sel_second);
  }

  /// setSecond:
  set second(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setSecond_, value);
  }

  /// nanosecond
  int get nanosecond {
    return _objc_msgSend_59(this.ref.pointer, _sel_nanosecond);
  }

  /// setNanosecond:
  set nanosecond(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setNanosecond_, value);
  }

  /// weekday
  int get weekday {
    return _objc_msgSend_59(this.ref.pointer, _sel_weekday);
  }

  /// setWeekday:
  set weekday(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setWeekday_, value);
  }

  /// weekdayOrdinal
  int get weekdayOrdinal {
    return _objc_msgSend_59(this.ref.pointer, _sel_weekdayOrdinal);
  }

  /// setWeekdayOrdinal:
  set weekdayOrdinal(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setWeekdayOrdinal_, value);
  }

  /// quarter
  int get quarter {
    return _objc_msgSend_59(this.ref.pointer, _sel_quarter);
  }

  /// setQuarter:
  set quarter(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setQuarter_, value);
  }

  /// weekOfMonth
  int get weekOfMonth {
    return _objc_msgSend_59(this.ref.pointer, _sel_weekOfMonth);
  }

  /// setWeekOfMonth:
  set weekOfMonth(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setWeekOfMonth_, value);
  }

  /// weekOfYear
  int get weekOfYear {
    return _objc_msgSend_59(this.ref.pointer, _sel_weekOfYear);
  }

  /// setWeekOfYear:
  set weekOfYear(int value) {
    return _objc_msgSend_60(this.ref.pointer, _sel_setWeekOfYear_, value);
  }

  /// yearForWeekOfYear
  int get yearForWeekOfYear {
    return _objc_msgSend_59(this.ref.pointer, _sel_yearForWeekOfYear);
  }

  /// setYearForWeekOfYear:
  set yearForWeekOfYear(int value) {
    return _objc_msgSend_60(
        this.ref.pointer, _sel_setYearForWeekOfYear_, value);
  }

  /// isLeapMonth
  bool get leapMonth {
    return _objc_msgSend_11(this.ref.pointer, _sel_isLeapMonth);
  }

  /// setLeapMonth:
  set leapMonth(bool value) {
    return _objc_msgSend_13(this.ref.pointer, _sel_setLeapMonth_, value);
  }

  /// date
  objc.NSDate? get date {
    final _ret = _objc_msgSend_524(this.ref.pointer, _sel_date);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  /// week
  int week() {
    return _objc_msgSend_59(this.ref.pointer, _sel_week);
  }

  /// setWeek:
  void setWeek_(int v) {
    _objc_msgSend_620(this.ref.pointer, _sel_setWeek_, v);
  }

  /// setValue:forComponent:
  void setValue_forComponent_(int value, NSCalendarUnit unit) {
    _objc_msgSend_621(
        this.ref.pointer, _sel_setValue_forComponent_, value, unit.value);
  }

  /// valueForComponent:
  int valueForComponent_(NSCalendarUnit unit) {
    return _objc_msgSend_622(
        this.ref.pointer, _sel_valueForComponent_, unit.value);
  }

  /// isValidDate
  bool get validDate {
    return _objc_msgSend_11(this.ref.pointer, _sel_isValidDate);
  }

  /// isValidDateInCalendar:
  bool isValidDateInCalendar_(NSCalendar calendar) {
    return _objc_msgSend_623(
        this.ref.pointer, _sel_isValidDateInCalendar_, calendar.ref.pointer);
  }

  /// init
  NSDateComponents init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSDateComponents new1() {
    final _ret = _objc_msgSend_4(_class_NSDateComponents, _sel_new);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSDateComponents allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_9(_class_NSDateComponents, _sel_allocWithZone_, zone);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSDateComponents alloc() {
    final _ret = _objc_msgSend_4(_class_NSDateComponents, _sel_alloc);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSDateComponents = objc.getClass("NSDateComponents");
late final _sel_calendar = objc.registerName("calendar");
final _objc_msgSend_618 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCalendar_ = objc.registerName("setCalendar:");
final _objc_msgSend_619 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_era = objc.registerName("era");
late final _sel_setEra_ = objc.registerName("setEra:");
late final _sel_year = objc.registerName("year");
late final _sel_setYear_ = objc.registerName("setYear:");
late final _sel_month = objc.registerName("month");
late final _sel_setMonth_ = objc.registerName("setMonth:");
late final _sel_day = objc.registerName("day");
late final _sel_setDay_ = objc.registerName("setDay:");
late final _sel_hour = objc.registerName("hour");
late final _sel_setHour_ = objc.registerName("setHour:");
late final _sel_minute = objc.registerName("minute");
late final _sel_setMinute_ = objc.registerName("setMinute:");
late final _sel_second = objc.registerName("second");
late final _sel_setSecond_ = objc.registerName("setSecond:");
late final _sel_nanosecond = objc.registerName("nanosecond");
late final _sel_setNanosecond_ = objc.registerName("setNanosecond:");
late final _sel_weekday = objc.registerName("weekday");
late final _sel_setWeekday_ = objc.registerName("setWeekday:");
late final _sel_weekdayOrdinal = objc.registerName("weekdayOrdinal");
late final _sel_setWeekdayOrdinal_ = objc.registerName("setWeekdayOrdinal:");
late final _sel_quarter = objc.registerName("quarter");
late final _sel_setQuarter_ = objc.registerName("setQuarter:");
late final _sel_weekOfMonth = objc.registerName("weekOfMonth");
late final _sel_setWeekOfMonth_ = objc.registerName("setWeekOfMonth:");
late final _sel_weekOfYear = objc.registerName("weekOfYear");
late final _sel_setWeekOfYear_ = objc.registerName("setWeekOfYear:");
late final _sel_yearForWeekOfYear = objc.registerName("yearForWeekOfYear");
late final _sel_setYearForWeekOfYear_ =
    objc.registerName("setYearForWeekOfYear:");
late final _sel_isLeapMonth = objc.registerName("isLeapMonth");
late final _sel_setLeapMonth_ = objc.registerName("setLeapMonth:");
late final _sel_date = objc.registerName("date");
late final _sel_week = objc.registerName("week");
late final _sel_setWeek_ = objc.registerName("setWeek:");
final _objc_msgSend_620 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long v)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setValue_forComponent_ =
    objc.registerName("setValue:forComponent:");
final _objc_msgSend_621 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long value,
                ffi.UnsignedLong unit)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_valueForComponent_ = objc.registerName("valueForComponent:");
final _objc_msgSend_622 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong unit)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isValidDate = objc.registerName("isValidDate");
late final _sel_isValidDateInCalendar_ =
    objc.registerName("isValidDateInCalendar:");
final _objc_msgSend_623 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> calendar)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateFromComponents_ = objc.registerName("dateFromComponents:");
final _objc_msgSend_624 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> comps)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_components_fromDate_ =
    objc.registerName("components:fromDate:");
final _objc_msgSend_625 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong unitFlags,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

enum NSCalendarOptions {
  NSCalendarWrapComponents(1),
  NSCalendarMatchStrictly(2),
  NSCalendarSearchBackwards(4),
  NSCalendarMatchPreviousTimePreservingSmallerUnits(256),
  NSCalendarMatchNextTimePreservingSmallerUnits(512),
  NSCalendarMatchNextTime(1024),
  NSCalendarMatchFirst(4096),
  NSCalendarMatchLast(8192);

  final int value;
  const NSCalendarOptions(this.value);

  static NSCalendarOptions fromValue(int value) => switch (value) {
        1 => NSCalendarWrapComponents,
        2 => NSCalendarMatchStrictly,
        4 => NSCalendarSearchBackwards,
        256 => NSCalendarMatchPreviousTimePreservingSmallerUnits,
        512 => NSCalendarMatchNextTimePreservingSmallerUnits,
        1024 => NSCalendarMatchNextTime,
        4096 => NSCalendarMatchFirst,
        8192 => NSCalendarMatchLast,
        _ => throw ArgumentError("Unknown value for NSCalendarOptions: $value"),
      };
}

late final _sel_dateByAddingComponents_toDate_options_ =
    objc.registerName("dateByAddingComponents:toDate:options:");
final _objc_msgSend_626 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> comps,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.UnsignedLong opts)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_components_fromDate_toDate_options_ =
    objc.registerName("components:fromDate:toDate:options:");
final _objc_msgSend_627 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong unitFlags,
                ffi.Pointer<objc.ObjCObject> startingDate,
                ffi.Pointer<objc.ObjCObject> resultDate,
                ffi.UnsignedLong opts)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_getEra_year_month_day_fromDate_ =
    objc.registerName("getEra:year:month:day:fromDate:");
final _objc_msgSend_628 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Long> eraValuePointer,
                ffi.Pointer<ffi.Long> yearValuePointer,
                ffi.Pointer<ffi.Long> monthValuePointer,
                ffi.Pointer<ffi.Long> dayValuePointer,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_ =
    objc.registerName("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:");
late final _sel_getHour_minute_second_nanosecond_fromDate_ =
    objc.registerName("getHour:minute:second:nanosecond:fromDate:");
late final _sel_component_fromDate_ = objc.registerName("component:fromDate:");
final _objc_msgSend_629 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong unit,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_ = objc
    .registerName("dateWithEra:year:month:day:hour:minute:second:nanosecond:");
final _objc_msgSend_630 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long eraValue,
                ffi.Long yearValue,
                ffi.Long monthValue,
                ffi.Long dayValue,
                ffi.Long hourValue,
                ffi.Long minuteValue,
                ffi.Long secondValue,
                ffi.Long nanosecondValue)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int)>();
late final _sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_ =
    objc.registerName(
        "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:");
late final _sel_startOfDayForDate_ = objc.registerName("startOfDayForDate:");
final _objc_msgSend_631 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_componentsInTimeZone_fromDate_ =
    objc.registerName("componentsInTimeZone:fromDate:");
final _objc_msgSend_632 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> timezone,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_compareDate_toDate_toUnitGranularity_ =
    objc.registerName("compareDate:toDate:toUnitGranularity:");
final _objc_msgSend_633 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date1,
                ffi.Pointer<objc.ObjCObject> date2,
                ffi.UnsignedLong unit)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_isDate_equalToDate_toUnitGranularity_ =
    objc.registerName("isDate:equalToDate:toUnitGranularity:");
final _objc_msgSend_634 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date1,
                ffi.Pointer<objc.ObjCObject> date2,
                ffi.UnsignedLong unit)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_isDate_inSameDayAsDate_ =
    objc.registerName("isDate:inSameDayAsDate:");
final _objc_msgSend_635 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date1,
                ffi.Pointer<objc.ObjCObject> date2)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isDateInToday_ = objc.registerName("isDateInToday:");
late final _sel_isDateInYesterday_ = objc.registerName("isDateInYesterday:");
late final _sel_isDateInTomorrow_ = objc.registerName("isDateInTomorrow:");
late final _sel_isDateInWeekend_ = objc.registerName("isDateInWeekend:");
late final _sel_rangeOfWeekendStartDate_interval_containingDate_ =
    objc.registerName("rangeOfWeekendStartDate:interval:containingDate:");
final _objc_msgSend_636 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
                ffi.Pointer<ffi.Double> tip,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_nextWeekendStartDate_interval_options_afterDate_ =
    objc.registerName("nextWeekendStartDate:interval:options:afterDate:");
final _objc_msgSend_637 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
                ffi.Pointer<ffi.Double> tip,
                ffi.UnsignedLong options,
                ffi.Pointer<objc.ObjCObject> date)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_components_fromDateComponents_toDateComponents_options_ = objc
    .registerName("components:fromDateComponents:toDateComponents:options:");
final _objc_msgSend_638 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong unitFlags,
                ffi.Pointer<objc.ObjCObject> startingDateComp,
                ffi.Pointer<objc.ObjCObject> resultDateComp,
                ffi.UnsignedLong options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_dateByAddingUnit_value_toDate_options_ =
    objc.registerName("dateByAddingUnit:value:toDate:options:");
final _objc_msgSend_639 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong unit,
                ffi.Long value,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.UnsignedLong options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
void _ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Bool arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, bool,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        bool, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>`.
abstract final class ObjCBlock_ffiVoid_NSDate_bool_bool {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool,
                      ffi.Pointer<ffi.Bool>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Bool arg1, ffi.Pointer<ffi.Bool> arg2)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
                              _ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)> fromFunction(
          void Function(objc.NSDate?, bool, ffi.Pointer<ffi.Bool>) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>(
                          _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
                  fn(arg0.address == 0 ? null : objc.NSDate.castFromPointer(arg0, retain: true, release: true), arg1, arg2)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>
      listener(void Function(objc.NSDate?, bool, ffi.Pointer<ffi.Bool>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Bool,
                        ffi.Pointer<ffi.Bool>)>.listener(
                _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
            fn(
                arg0.address == 0
                    ? null
                    : objc.NSDate.castFromPointer(arg0,
                        retain: false, release: true),
                arg1,
                arg2));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSDate_bool_bool(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool,
            ffi.Pointer<ffi.Bool>)>(wrapper, retain: false, release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)>`.
extension ObjCBlock_ffiVoid_NSDate_bool_bool_CallExtension on objc.ObjCBlock<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<ffi.Bool>)> {
  void call(objc.NSDate? arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Bool arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<objc.ObjCObject>,
                      bool,
                      ffi.Pointer<ffi.Bool>)>()(
          ref.pointer, arg0?.ref.pointer ?? ffi.nullptr, arg1, arg2);
}

late final _sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_ =
    objc.registerName(
        "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:");
final _objc_msgSend_640 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> start,
                ffi.Pointer<objc.ObjCObject> comps,
                ffi.UnsignedLong opts,
                ffi.Pointer<objc.ObjCBlockImpl> block)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_nextDateAfterDate_matchingComponents_options_ =
    objc.registerName("nextDateAfterDate:matchingComponents:options:");
final _objc_msgSend_641 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.Pointer<objc.ObjCObject> comps,
                ffi.UnsignedLong options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_nextDateAfterDate_matchingUnit_value_options_ =
    objc.registerName("nextDateAfterDate:matchingUnit:value:options:");
final _objc_msgSend_642 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.UnsignedLong unit,
                ffi.Long value,
                ffi.UnsignedLong options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int)>();
late final _sel_nextDateAfterDate_matchingHour_minute_second_options_ =
    objc.registerName("nextDateAfterDate:matchingHour:minute:second:options:");
final _objc_msgSend_643 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.Long hourValue,
                ffi.Long minuteValue,
                ffi.Long secondValue,
                ffi.UnsignedLong options)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int,
            int)>();
late final _sel_dateBySettingUnit_value_ofDate_options_ =
    objc.registerName("dateBySettingUnit:value:ofDate:options:");
late final _sel_dateBySettingHour_minute_second_ofDate_options_ =
    objc.registerName("dateBySettingHour:minute:second:ofDate:options:");
final _objc_msgSend_644 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long h,
                ffi.Long m,
                ffi.Long s,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.UnsignedLong opts)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_date_matchesComponents_ =
    objc.registerName("date:matchesComponents:");
final _objc_msgSend_645 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> date,
                ffi.Pointer<objc.ObjCObject> components)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_repeatCalendar = objc.registerName("repeatCalendar");
late final _sel_setRepeatCalendar_ = objc.registerName("setRepeatCalendar:");

/// CLRegion
class CLRegion extends objc.ObjCObjectBase {
  CLRegion._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [CLRegion] that points to the same underlying object as [other].
  CLRegion.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [CLRegion] that wraps the given raw object pointer.
  CLRegion.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [CLRegion].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.ref.pointer, _sel_isKindOfClass_, _class_CLRegion);
  }
}

late final _class_CLRegion = objc.getClass("CLRegion");
late final _sel_region = objc.registerName("region");
final _objc_msgSend_646 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRegion_ = objc.registerName("setRegion:");
final _objc_msgSend_647 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_regionTriggersOnce = objc.registerName("regionTriggersOnce");
late final _sel_setRegionTriggersOnce_ =
    objc.registerName("setRegionTriggersOnce:");
late final _sel_alertBody = objc.registerName("alertBody");
late final _sel_setAlertBody_ = objc.registerName("setAlertBody:");
late final _sel_hasAction = objc.registerName("hasAction");
late final _sel_setHasAction_ = objc.registerName("setHasAction:");
late final _sel_alertAction = objc.registerName("alertAction");
late final _sel_setAlertAction_ = objc.registerName("setAlertAction:");
late final _sel_alertLaunchImage = objc.registerName("alertLaunchImage");
late final _sel_setAlertLaunchImage_ =
    objc.registerName("setAlertLaunchImage:");
late final _sel_alertTitle = objc.registerName("alertTitle");
late final _sel_setAlertTitle_ = objc.registerName("setAlertTitle:");
late final _sel_soundName = objc.registerName("soundName");
late final _sel_setSoundName_ = objc.registerName("setSoundName:");
late final _sel_category = objc.registerName("category");
late final _sel_setCategory_ = objc.registerName("setCategory:");
late final _sel_presentLocalNotificationNow_ =
    objc.registerName("presentLocalNotificationNow:");
final _objc_msgSend_648 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> notification)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_scheduleLocalNotification_ =
    objc.registerName("scheduleLocalNotification:");
late final _sel_cancelLocalNotification_ =
    objc.registerName("cancelLocalNotification:");
late final _sel_cancelAllLocalNotifications =
    objc.registerName("cancelAllLocalNotifications");
late final _sel_scheduledLocalNotifications =
    objc.registerName("scheduledLocalNotifications");
late final _sel_setScheduledLocalNotifications_ =
    objc.registerName("setScheduledLocalNotifications:");

/// UIUserNotificationSettings
class UIUserNotificationSettings extends objc.NSObject {
  UIUserNotificationSettings._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [UIUserNotificationSettings] that points to the same underlying object as [other].
  UIUserNotificationSettings.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [UIUserNotificationSettings] that wraps the given raw object pointer.
  UIUserNotificationSettings.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [UIUserNotificationSettings].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_UIUserNotificationSettings);
  }

  /// settingsForTypes:categories:
  static UIUserNotificationSettings settingsForTypes_categories_(
      UIUserNotificationType types, objc.NSSet? categories) {
    final _ret = _objc_msgSend_649(
        _class_UIUserNotificationSettings,
        _sel_settingsForTypes_categories_,
        types.value,
        categories?.ref.pointer ?? ffi.nullptr);
    return UIUserNotificationSettings.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// types
  UIUserNotificationType get types {
    final _ret = _objc_msgSend_650(this.ref.pointer, _sel_types);
    return UIUserNotificationType.fromValue(_ret);
  }

  /// categories
  objc.NSSet? get categories {
    final _ret = _objc_msgSend_521(this.ref.pointer, _sel_categories);
    return _ret.address == 0
        ? null
        : objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  UIUserNotificationSettings init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return UIUserNotificationSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static UIUserNotificationSettings new1() {
    final _ret = _objc_msgSend_4(_class_UIUserNotificationSettings, _sel_new);
    return UIUserNotificationSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static UIUserNotificationSettings allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_UIUserNotificationSettings, _sel_allocWithZone_, zone);
    return UIUserNotificationSettings.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static UIUserNotificationSettings alloc() {
    final _ret = _objc_msgSend_4(_class_UIUserNotificationSettings, _sel_alloc);
    return UIUserNotificationSettings.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_UIUserNotificationSettings =
    objc.getClass("UIUserNotificationSettings");

enum UIUserNotificationType {
  UIUserNotificationTypeNone(0),
  UIUserNotificationTypeBadge(1),
  UIUserNotificationTypeSound(2),
  UIUserNotificationTypeAlert(4);

  final int value;
  const UIUserNotificationType(this.value);

  static UIUserNotificationType fromValue(int value) => switch (value) {
        0 => UIUserNotificationTypeNone,
        1 => UIUserNotificationTypeBadge,
        2 => UIUserNotificationTypeSound,
        4 => UIUserNotificationTypeAlert,
        _ => throw ArgumentError(
            "Unknown value for UIUserNotificationType: $value"),
      };
}

late final _sel_settingsForTypes_categories_ =
    objc.registerName("settingsForTypes:categories:");
final _objc_msgSend_649 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong types,
                ffi.Pointer<objc.ObjCObject> categories)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_types = objc.registerName("types");
final _objc_msgSend_650 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_categories = objc.registerName("categories");
late final _sel_registerUserNotificationSettings_ =
    objc.registerName("registerUserNotificationSettings:");
final _objc_msgSend_651 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> notificationSettings)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentUserNotificationSettings =
    objc.registerName("currentUserNotificationSettings");
final _objc_msgSend_652 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_beginReceivingRemoteControlEvents =
    objc.registerName("beginReceivingRemoteControlEvents");
late final _sel_endReceivingRemoteControlEvents =
    objc.registerName("endReceivingRemoteControlEvents");
late final _sel_setNewsstandIconImage_ =
    objc.registerName("setNewsstandIconImage:");
final _objc_msgSend_653 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> image)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shortcutItems = objc.registerName("shortcutItems");
late final _sel_setShortcutItems_ = objc.registerName("setShortcutItems:");
late final _sel_supportsAlternateIcons =
    objc.registerName("supportsAlternateIcons");
void _ObjCBlock_ffiVoid_NSError1_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
void _ObjCBlock_ffiVoid_NSError1_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>))(arg0);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSError1 {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_ffiVoid_NSError1_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSError1_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(arg0.address == 0 ? null : objc.NSError.castFromPointer(arg0, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>
      listener(void Function(objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSError1_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
            ? null
            : objc.NSError.castFromPointer(arg0,
                retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSError1(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSError1_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSError? arg0) => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      ref.pointer, arg0?.ref.pointer ?? ffi.nullptr);
}

late final _sel_setAlternateIconName_completionHandler_ =
    objc.registerName("setAlternateIconName:completionHandler:");
final _objc_msgSend_654 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> alternateIconName,
                ffi.Pointer<objc.ObjCBlockImpl> completionHandler)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_alternateIconName = objc.registerName("alternateIconName");
late final _sel_extendStateRestoration =
    objc.registerName("extendStateRestoration");
late final _sel_completeStateRestoration =
    objc.registerName("completeStateRestoration");
late final _sel_ignoreSnapshotOnNextApplicationLaunch =
    objc.registerName("ignoreSnapshotOnNextApplicationLaunch");
late final _sel_registerObjectForStateRestoration_restorationIdentifier_ = objc
    .registerName("registerObjectForStateRestoration:restorationIdentifier:");
final _objc_msgSend_655 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> object,
                ffi.Pointer<objc.ObjCObject> restorationIdentifier)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isProximitySensingEnabled =
    objc.registerName("isProximitySensingEnabled");
late final _sel_setProximitySensingEnabled_ =
    objc.registerName("setProximitySensingEnabled:");
late final _sel_setStatusBarHidden_animated_ =
    objc.registerName("setStatusBarHidden:animated:");
final _objc_msgSend_656 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool hidden,
                ffi.Bool animated)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool, bool)>();
late final _sel_setStatusBarOrientation_ =
    objc.registerName("setStatusBarOrientation:");
final _objc_msgSend_657 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setStatusBarOrientation_animated_ =
    objc.registerName("setStatusBarOrientation:animated:");
final _objc_msgSend_658 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong interfaceOrientation,
                ffi.Bool animated)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, bool)>();
late final _sel_setStatusBarStyle_ = objc.registerName("setStatusBarStyle:");
final _objc_msgSend_659 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong value)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setStatusBarStyle_animated_ =
    objc.registerName("setStatusBarStyle:animated:");
final _objc_msgSend_660 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong statusBarStyle,
                ffi.Bool animated)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, bool)>();
late final _sel_setStatusBarHidden_ = objc.registerName("setStatusBarHidden:");
late final _sel_setStatusBarHidden_withAnimation_ =
    objc.registerName("setStatusBarHidden:withAnimation:");
final _objc_msgSend_661 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool hidden,
                ffi.UnsignedLong animation)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool, int)>();
late final _sel_setKeepAliveTimeout_handler_ =
    objc.registerName("setKeepAliveTimeout:handler:");
final _objc_msgSend_662 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double timeout,
                ffi.Pointer<objc.ObjCBlockImpl> keepAliveHandler)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_clearKeepAliveTimeout =
    objc.registerName("clearKeepAliveTimeout");

/// ! @enum ASWebAuthenticationSessionErrorCode
/// @abstract Error code of the NSError object passed in by ASWebAuthenticationSessionCompletionHandler.
/// @constant ASWebAuthenticationSessionErrorCodeCanceledLogin The user has canceled login by cancelling the
/// alert asking for permission to log in to this app, or by dismissing the view controller for loading the
/// authentication webpage.
/// @constant ASWebAuthenticationSessionErrorCodePresentationContextNotProvided A valid presentationContextProvider
/// was not found when -start was called. Ensure this property was not nil when -start was called.
/// @constant ASWebAuthenticationSessionErrorCodePresentationContextInvalid The presentation context returned
/// was not elligible to show the authentication UI. For iOS, validate that the UIWindow is in a foreground scene.
enum ASWebAuthenticationSessionErrorCode {
  ASWebAuthenticationSessionErrorCodeCanceledLogin(1),
  ASWebAuthenticationSessionErrorCodePresentationContextNotProvided(2),
  ASWebAuthenticationSessionErrorCodePresentationContextInvalid(3);

  final int value;
  const ASWebAuthenticationSessionErrorCode(this.value);

  static ASWebAuthenticationSessionErrorCode fromValue(int value) =>
      switch (value) {
        1 => ASWebAuthenticationSessionErrorCodeCanceledLogin,
        2 => ASWebAuthenticationSessionErrorCodePresentationContextNotProvided,
        3 => ASWebAuthenticationSessionErrorCodePresentationContextInvalid,
        _ => throw ArgumentError(
            "Unknown value for ASWebAuthenticationSessionErrorCode: $value"),
      };
}

/// !
/// @class ASWebAuthenticationSession
/// An ASWebAuthenticationSession object can be used to authenticate a user with a web service, even if the web service is run
/// by a third party. ASWebAuthenticationSession puts the user in control of whether they want to use their existing logged-in
/// session from Safari. The app provides a URL that points to the authentication webpage. The page will be loaded in a secure
/// view controller. From the webpage, the user can authenticate herself and grant access to the app.
/// On completion, the service will send a callback URL with an authentication token, and this URL will be passed to the app by
/// ASWebAuthenticationSessionCompletionHandler.
///
/// The callback URL usually has a custom URL scheme. For the app to receive the callback URL, it needs to either register the
/// custom URL scheme in its Info.plist, or set the scheme to callbackURLScheme argument in the initializer.
///
/// If the user has already logged into the web service in Safari or other apps via ASWebAuthenticationSession, it is possible to
/// share the existing login information. An alert will be presented to get the user's consent for sharing their existing login
/// information. If the user cancels the alert, the session will be canceled, and the completion handler will be called with
/// the error code ASWebAuthenticationSessionErrorCodeCanceledLogin.
///
/// If the user taps Cancel when showing the login webpage for the web service, the session will be canceled, and the completion
/// handler will be called with the error code ASWebAuthenticationSessionErrorCodeCanceledLogin.
///
/// The app can cancel the session by calling -[ASWebAuthenticationSession cancel]. This will also dismiss the view controller that
/// is showing the web service's login page.
class ASWebAuthenticationSession extends objc.NSObject {
  ASWebAuthenticationSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [ASWebAuthenticationSession] that points to the same underlying object as [other].
  ASWebAuthenticationSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [ASWebAuthenticationSession] that wraps the given raw object pointer.
  ASWebAuthenticationSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [ASWebAuthenticationSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_ASWebAuthenticationSession);
  }

  /// ! @abstract Returns an ASWebAuthenticationSession object.
  /// @param URL the initial URL pointing to the authentication webpage. Only supports URLs with http:// or https:// schemes.
  /// @param callbackURLScheme the custom URL scheme that the app expects in the callback URL.
  /// @param completionHandler the completion handler which is called when the session is completed successfully or canceled by user.
  ASWebAuthenticationSession initWithURL_callbackURLScheme_completionHandler_(
      objc.NSURL URL,
      objc.NSString? callbackURLScheme,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_663(
        this.ref.retainAndReturnPointer(),
        _sel_initWithURL_callbackURLScheme_completionHandler_,
        URL.ref.pointer,
        callbackURLScheme?.ref.pointer ?? ffi.nullptr,
        completionHandler.ref.pointer);
    return ASWebAuthenticationSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// initWithURL:callback:completionHandler:
  ASWebAuthenticationSession initWithURL_callback_completionHandler_(
      objc.NSURL URL,
      ASWebAuthenticationSessionCallback callback,
      objc.ObjCBlock<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
          completionHandler) {
    final _ret = _objc_msgSend_664(
        this.ref.retainAndReturnPointer(),
        _sel_initWithURL_callback_completionHandler_,
        URL.ref.pointer,
        callback.ref.pointer,
        completionHandler.ref.pointer);
    return ASWebAuthenticationSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// ! @abstract Provides context to target where in an application's UI the authorization view should be shown. A provider
  /// must be set prior to calling -start, otherwise the authorization view cannot be displayed. If deploying to iOS prior to
  /// 13.0, the desired window is inferred by the application's key window.
  objc.ObjCObjectBase? get presentationContextProvider {
    final _ret =
        _objc_msgSend_18(this.ref.pointer, _sel_presentationContextProvider);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// ! @abstract Provides context to target where in an application's UI the authorization view should be shown. A provider
  /// must be set prior to calling -start, otherwise the authorization view cannot be displayed. If deploying to iOS prior to
  /// 13.0, the desired window is inferred by the application's key window.
  set presentationContextProvider(objc.ObjCObjectBase? value) {
    return _objc_msgSend_19(
        this.ref.pointer,
        _sel_setPresentationContextProvider_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// ! @abstract Indicates whether this session should ask the browser for an ephemeral session.
  /// @discussion Ephemeral web browser sessions do not not share cookies or other browsing data with a user's normal browser session.
  /// This value is NO by default. Setting this property after calling -[ASWebAuthenticationSession start] has no effect.
  bool get prefersEphemeralWebBrowserSession {
    return _objc_msgSend_11(
        this.ref.pointer, _sel_prefersEphemeralWebBrowserSession);
  }

  /// ! @abstract Indicates whether this session should ask the browser for an ephemeral session.
  /// @discussion Ephemeral web browser sessions do not not share cookies or other browsing data with a user's normal browser session.
  /// This value is NO by default. Setting this property after calling -[ASWebAuthenticationSession start] has no effect.
  set prefersEphemeralWebBrowserSession(bool value) {
    return _objc_msgSend_13(
        this.ref.pointer, _sel_setPrefersEphemeralWebBrowserSession_, value);
  }

  /// Any additional header fields to be set when loading the initial URL.
  /// All header field names must start with the "X-" prefix.
  objc.NSDictionary? get additionalHeaderFields {
    final _ret =
        _objc_msgSend_112(this.ref.pointer, _sel_additionalHeaderFields);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// Any additional header fields to be set when loading the initial URL.
  /// All header field names must start with the "X-" prefix.
  set additionalHeaderFields(objc.NSDictionary? value) {
    return _objc_msgSend_113(this.ref.pointer, _sel_setAdditionalHeaderFields_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// ! @abstract Returns whether the session can be successfully started. This property returns the same value as calling -start,
  /// but without the side effect of actually starting the session.
  bool get canStart {
    return _objc_msgSend_11(this.ref.pointer, _sel_canStart);
  }

  /// ! @abstract Starts the ASWebAuthenticationSession instance after it is instantiated.
  /// @discussion start can only be called once for an ASWebAuthenticationSession instance. This also means calling start on a
  /// canceled session will fail.
  /// @result Returns YES if the session starts successfully.
  bool start() {
    return _objc_msgSend_11(this.ref.pointer, _sel_start);
  }

  /// ! @abstract Cancel an ASWebAuthenticationSession. If the view controller is already presented to load the webpage for
  /// authentication, it will be dismissed. Calling cancel on an already canceled session will have no effect.
  void cancel() {
    _objc_msgSend_12(this.ref.pointer, _sel_cancel);
  }

  /// new
  static ASWebAuthenticationSession new1() {
    final _ret = _objc_msgSend_4(_class_ASWebAuthenticationSession, _sel_new);
    return ASWebAuthenticationSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  ASWebAuthenticationSession init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return ASWebAuthenticationSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static ASWebAuthenticationSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_ASWebAuthenticationSession, _sel_allocWithZone_, zone);
    return ASWebAuthenticationSession.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static ASWebAuthenticationSession alloc() {
    final _ret = _objc_msgSend_4(_class_ASWebAuthenticationSession, _sel_alloc);
    return ASWebAuthenticationSession.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_ASWebAuthenticationSession =
    objc.getClass("ASWebAuthenticationSession");
void _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_ffiVoid_NSURL_NSError {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          void Function(objc.NSURL?, objc.NSError?) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
                      .cast(),
              (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0.address == 0 ? null : objc.NSURL.castFromPointer(arg0, retain: true, release: true), arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> listener(
      void Function(objc.NSURL?, objc.NSError?) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>)>.listener(
                _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0.address == 0
                ? null
                : objc.NSURL
                    .castFromPointer(arg0, retain: false, release: true),
            arg1.address == 0
                ? null
                : objc.NSError.castFromPointer(arg1, retain: false, release: true)));
    final wrapper = wrapListenerBlock_ObjCBlock_ffiVoid_NSURL_NSError(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
        wrapper,
        retain: false,
        release: true);
  }

  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_ffiVoid_NSURL_NSError_CallExtension on objc.ObjCBlock<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)> {
  void call(objc.NSURL? arg0, objc.NSError? arg1) => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(ref.pointer,
      arg0?.ref.pointer ?? ffi.nullptr, arg1?.ref.pointer ?? ffi.nullptr);
}

late final _sel_initWithURL_callbackURLScheme_completionHandler_ =
    objc.registerName("initWithURL:callbackURLScheme:completionHandler:");
final _objc_msgSend_663 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> URL,
                ffi.Pointer<objc.ObjCObject> callbackURLScheme,
                ffi.Pointer<objc.ObjCBlockImpl> completionHandler)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();

/// ASWebAuthenticationSessionCallback
class ASWebAuthenticationSessionCallback extends objc.NSObject {
  ASWebAuthenticationSessionCallback._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [ASWebAuthenticationSessionCallback] that points to the same underlying object as [other].
  ASWebAuthenticationSessionCallback.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [ASWebAuthenticationSessionCallback] that wraps the given raw object pointer.
  ASWebAuthenticationSessionCallback.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [ASWebAuthenticationSessionCallback].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.ref.pointer, _sel_isKindOfClass_,
        _class_ASWebAuthenticationSessionCallback);
  }

  /// Creates a callback object that matches against URLs with the given custom scheme.
  /// @param customScheme The custom scheme that the app expects in the callback URL.
  static ASWebAuthenticationSessionCallback callbackWithCustomScheme_(
      objc.NSString customScheme) {
    final _ret = _objc_msgSend_103(_class_ASWebAuthenticationSessionCallback,
        _sel_callbackWithCustomScheme_, customScheme.ref.pointer);
    return ASWebAuthenticationSessionCallback.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Creates a callback object that matches against HTTPS URLs with the given host and path.
  /// @param host The host that the app expects in the callback URL. The host must be associated with the
  /// app using associated web credentials domains.
  /// @param path The path that the app expects in the callback URL.
  static ASWebAuthenticationSessionCallback callbackWithHTTPSHost_path_(
      objc.NSString host, objc.NSString path) {
    final _ret = _objc_msgSend_542(_class_ASWebAuthenticationSessionCallback,
        _sel_callbackWithHTTPSHost_path_, host.ref.pointer, path.ref.pointer);
    return ASWebAuthenticationSessionCallback.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// init
  ASWebAuthenticationSessionCallback init() {
    final _ret = _objc_msgSend_4(this.ref.retainAndReturnPointer(), _sel_init);
    return ASWebAuthenticationSessionCallback.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static ASWebAuthenticationSessionCallback new1() {
    final _ret =
        _objc_msgSend_4(_class_ASWebAuthenticationSessionCallback, _sel_new);
    return ASWebAuthenticationSessionCallback.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Check whether a given main-frame navigation URL matches the callback expected by the client app. Handles all URL-based callback strategies, including custom schemes and HTTPS navigations.
  /// This is mainly meant for web browsers adopting the ASWebAuthenticationWebBrowser API, but may also be useful for other apps for debugging purposes.
  /// @param url The URL to check.
  bool matchesURL_(objc.NSURL url) {
    return _objc_msgSend_20(
        this.ref.pointer, _sel_matchesURL_, url.ref.pointer);
  }

  /// allocWithZone:
  static ASWebAuthenticationSessionCallback allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_9(
        _class_ASWebAuthenticationSessionCallback, _sel_allocWithZone_, zone);
    return ASWebAuthenticationSessionCallback.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static ASWebAuthenticationSessionCallback alloc() {
    final _ret =
        _objc_msgSend_4(_class_ASWebAuthenticationSessionCallback, _sel_alloc);
    return ASWebAuthenticationSessionCallback.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_ASWebAuthenticationSessionCallback =
    objc.getClass("ASWebAuthenticationSessionCallback");
late final _sel_callbackWithCustomScheme_ =
    objc.registerName("callbackWithCustomScheme:");
late final _sel_callbackWithHTTPSHost_path_ =
    objc.registerName("callbackWithHTTPSHost:path:");
late final _sel_matchesURL_ = objc.registerName("matchesURL:");
late final _sel_initWithURL_callback_completionHandler_ =
    objc.registerName("initWithURL:callback:completionHandler:");
final _objc_msgSend_664 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject> URL,
                ffi.Pointer<objc.ObjCObject> callback,
                ffi.Pointer<objc.ObjCBlockImpl> completionHandler)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_presentationContextProvider =
    objc.registerName("presentationContextProvider");
late final _sel_setPresentationContextProvider_ =
    objc.registerName("setPresentationContextProvider:");
late final _sel_prefersEphemeralWebBrowserSession =
    objc.registerName("prefersEphemeralWebBrowserSession");
late final _sel_setPrefersEphemeralWebBrowserSession_ =
    objc.registerName("setPrefersEphemeralWebBrowserSession:");
late final _sel_additionalHeaderFields =
    objc.registerName("additionalHeaderFields");
late final _sel_setAdditionalHeaderFields_ =
    objc.registerName("setAdditionalHeaderFields:");
late final _sel_canStart = objc.registerName("canStart");
late final _sel_start = objc.registerName("start");
late final _sel_cancel = objc.registerName("cancel");

/// ! @abstract Provides context to target where in an application's UI the authorization view should be shown.
abstract final class ASWebAuthenticationPresentationContextProviding {
  /// Builds an object that implements the ASWebAuthenticationPresentationContextProviding protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required UIWindow Function(ASWebAuthenticationSession)
          presentationAnchorForWebAuthenticationSession_}) {
    final builder = objc.ObjCProtocolBuilder();
    ASWebAuthenticationPresentationContextProviding
        .presentationAnchorForWebAuthenticationSession_
        .implement(builder, presentationAnchorForWebAuthenticationSession_);
    return builder.build();
  }

  /// Adds the implementation of the ASWebAuthenticationPresentationContextProviding protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required UIWindow Function(ASWebAuthenticationSession)
          presentationAnchorForWebAuthenticationSession_}) {
    ASWebAuthenticationPresentationContextProviding
        .presentationAnchorForWebAuthenticationSession_
        .implement(builder, presentationAnchorForWebAuthenticationSession_);
  }

  /// ! @abstract Return the ASPresentationAnchor in the closest proximity to where a user interacted with your app to trigger
  /// authentication. If starting an ASWebAuthenticationSession on first launch, use the application's main window.
  /// @param session The session requesting a presentation anchor.
  /// @result The ASPresentationAnchor most closely associated with the UI used to trigger authentication.
  static final presentationAnchorForWebAuthenticationSession_ =
      objc.ObjCProtocolMethod<UIWindow Function(ASWebAuthenticationSession)>(
    _sel_presentationAnchorForWebAuthenticationSession_,
    objc.getProtocolMethodSignature(
      _protocol_ASWebAuthenticationPresentationContextProviding,
      _sel_presentationAnchorForWebAuthenticationSession_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (UIWindow Function(ASWebAuthenticationSession) func) =>
        ObjCBlock_UIWindow_ffiVoid_ASWebAuthenticationSession.fromFunction(
            (ffi.Pointer<ffi.Void> _, ASWebAuthenticationSession session) =>
                func(session)),
  );
}

late final _protocol_ASWebAuthenticationPresentationContextProviding =
    objc.getProtocol("ASWebAuthenticationPresentationContextProviding");

/// NSObject
abstract final class NSObject {
  /// Builds an object that implements the NSObject protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  static objc.ObjCObjectBase implement(
      {required bool Function(objc.ObjCObjectBase) isEqual_,
      required objc.ObjCObjectBase Function() class1,
      required objc.ObjCObjectBase Function() self,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>)
          performSelector_,
      required objc.ObjCObjectBase Function(
              ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
          performSelector_withObject_,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
              objc.ObjCObjectBase, objc.ObjCObjectBase)
          performSelector_withObject_withObject_,
      required bool Function() isProxy,
      required bool Function(objc.ObjCObjectBase) isKindOfClass_,
      required bool Function(objc.ObjCObjectBase) isMemberOfClass_,
      required bool Function(objc.Protocol) conformsToProtocol_,
      required bool Function(ffi.Pointer<objc.ObjCSelector>)
          respondsToSelector_,
      required objc.ObjCObjectBase Function() retain,
      required void Function() release,
      required objc.ObjCObjectBase Function() autorelease,
      required int Function() retainCount,
      required ffi.Pointer<_NSZone> Function() zone,
      required int Function() hash,
      required objc.ObjCObjectBase Function() superclass,
      required objc.NSString Function() description,
      objc.NSString Function()? debugDescription}) {
    final builder = objc.ObjCProtocolBuilder();
    NSObject.isEqual_.implement(builder, isEqual_);
    NSObject.class1.implement(builder, class1);
    NSObject.self.implement(builder, self);
    NSObject.performSelector_.implement(builder, performSelector_);
    NSObject.performSelector_withObject_
        .implement(builder, performSelector_withObject_);
    NSObject.performSelector_withObject_withObject_
        .implement(builder, performSelector_withObject_withObject_);
    NSObject.isProxy.implement(builder, isProxy);
    NSObject.isKindOfClass_.implement(builder, isKindOfClass_);
    NSObject.isMemberOfClass_.implement(builder, isMemberOfClass_);
    NSObject.conformsToProtocol_.implement(builder, conformsToProtocol_);
    NSObject.respondsToSelector_.implement(builder, respondsToSelector_);
    NSObject.retain.implement(builder, retain);
    NSObject.release.implement(builder, release);
    NSObject.autorelease.implement(builder, autorelease);
    NSObject.retainCount.implement(builder, retainCount);
    NSObject.zone.implement(builder, zone);
    NSObject.hash.implement(builder, hash);
    NSObject.superclass.implement(builder, superclass);
    NSObject.description.implement(builder, description);
    NSObject.debugDescription.implement(builder, debugDescription);
    return builder.build();
  }

  /// Adds the implementation of the NSObject protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {required bool Function(objc.ObjCObjectBase) isEqual_,
      required objc.ObjCObjectBase Function() class1,
      required objc.ObjCObjectBase Function() self,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>)
          performSelector_,
      required objc.ObjCObjectBase Function(
              ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
          performSelector_withObject_,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
              objc.ObjCObjectBase, objc.ObjCObjectBase)
          performSelector_withObject_withObject_,
      required bool Function() isProxy,
      required bool Function(objc.ObjCObjectBase) isKindOfClass_,
      required bool Function(objc.ObjCObjectBase) isMemberOfClass_,
      required bool Function(objc.Protocol) conformsToProtocol_,
      required bool Function(ffi.Pointer<objc.ObjCSelector>)
          respondsToSelector_,
      required objc.ObjCObjectBase Function() retain,
      required void Function() release,
      required objc.ObjCObjectBase Function() autorelease,
      required int Function() retainCount,
      required ffi.Pointer<_NSZone> Function() zone,
      required int Function() hash,
      required objc.ObjCObjectBase Function() superclass,
      required objc.NSString Function() description,
      objc.NSString Function()? debugDescription}) {
    NSObject.isEqual_.implement(builder, isEqual_);
    NSObject.class1.implement(builder, class1);
    NSObject.self.implement(builder, self);
    NSObject.performSelector_.implement(builder, performSelector_);
    NSObject.performSelector_withObject_
        .implement(builder, performSelector_withObject_);
    NSObject.performSelector_withObject_withObject_
        .implement(builder, performSelector_withObject_withObject_);
    NSObject.isProxy.implement(builder, isProxy);
    NSObject.isKindOfClass_.implement(builder, isKindOfClass_);
    NSObject.isMemberOfClass_.implement(builder, isMemberOfClass_);
    NSObject.conformsToProtocol_.implement(builder, conformsToProtocol_);
    NSObject.respondsToSelector_.implement(builder, respondsToSelector_);
    NSObject.retain.implement(builder, retain);
    NSObject.release.implement(builder, release);
    NSObject.autorelease.implement(builder, autorelease);
    NSObject.retainCount.implement(builder, retainCount);
    NSObject.zone.implement(builder, zone);
    NSObject.hash.implement(builder, hash);
    NSObject.superclass.implement(builder, superclass);
    NSObject.description.implement(builder, description);
    NSObject.debugDescription.implement(builder, debugDescription);
  }

  /// Builds an object that implements the NSObject protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly. All
  /// methods that can be implemented as listeners will be.
  static objc.ObjCObjectBase implementAsListener(
      {required bool Function(objc.ObjCObjectBase) isEqual_,
      required objc.ObjCObjectBase Function() class1,
      required objc.ObjCObjectBase Function() self,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>)
          performSelector_,
      required objc.ObjCObjectBase Function(
              ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
          performSelector_withObject_,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
              objc.ObjCObjectBase, objc.ObjCObjectBase)
          performSelector_withObject_withObject_,
      required bool Function() isProxy,
      required bool Function(objc.ObjCObjectBase) isKindOfClass_,
      required bool Function(objc.ObjCObjectBase) isMemberOfClass_,
      required bool Function(objc.Protocol) conformsToProtocol_,
      required bool Function(ffi.Pointer<objc.ObjCSelector>)
          respondsToSelector_,
      required objc.ObjCObjectBase Function() retain,
      required void Function() release,
      required objc.ObjCObjectBase Function() autorelease,
      required int Function() retainCount,
      required ffi.Pointer<_NSZone> Function() zone,
      required int Function() hash,
      required objc.ObjCObjectBase Function() superclass,
      required objc.NSString Function() description,
      objc.NSString Function()? debugDescription}) {
    final builder = objc.ObjCProtocolBuilder();
    NSObject.isEqual_.implement(builder, isEqual_);
    NSObject.class1.implement(builder, class1);
    NSObject.self.implement(builder, self);
    NSObject.performSelector_.implement(builder, performSelector_);
    NSObject.performSelector_withObject_
        .implement(builder, performSelector_withObject_);
    NSObject.performSelector_withObject_withObject_
        .implement(builder, performSelector_withObject_withObject_);
    NSObject.isProxy.implement(builder, isProxy);
    NSObject.isKindOfClass_.implement(builder, isKindOfClass_);
    NSObject.isMemberOfClass_.implement(builder, isMemberOfClass_);
    NSObject.conformsToProtocol_.implement(builder, conformsToProtocol_);
    NSObject.respondsToSelector_.implement(builder, respondsToSelector_);
    NSObject.retain.implement(builder, retain);
    NSObject.release.implementAsListener(builder, release);
    NSObject.autorelease.implement(builder, autorelease);
    NSObject.retainCount.implement(builder, retainCount);
    NSObject.zone.implement(builder, zone);
    NSObject.hash.implement(builder, hash);
    NSObject.superclass.implement(builder, superclass);
    NSObject.description.implement(builder, description);
    NSObject.debugDescription.implement(builder, debugDescription);
    return builder.build();
  }

  /// Adds the implementation of the NSObject protocol to an existing
  /// [objc.ObjCProtocolBuilder]. All methods that can be implemented as listeners will
  /// be.
  static void addToBuilderAsListener(objc.ObjCProtocolBuilder builder,
      {required bool Function(objc.ObjCObjectBase) isEqual_,
      required objc.ObjCObjectBase Function() class1,
      required objc.ObjCObjectBase Function() self,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>)
          performSelector_,
      required objc.ObjCObjectBase Function(
              ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
          performSelector_withObject_,
      required objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
              objc.ObjCObjectBase, objc.ObjCObjectBase)
          performSelector_withObject_withObject_,
      required bool Function() isProxy,
      required bool Function(objc.ObjCObjectBase) isKindOfClass_,
      required bool Function(objc.ObjCObjectBase) isMemberOfClass_,
      required bool Function(objc.Protocol) conformsToProtocol_,
      required bool Function(ffi.Pointer<objc.ObjCSelector>)
          respondsToSelector_,
      required objc.ObjCObjectBase Function() retain,
      required void Function() release,
      required objc.ObjCObjectBase Function() autorelease,
      required int Function() retainCount,
      required ffi.Pointer<_NSZone> Function() zone,
      required int Function() hash,
      required objc.ObjCObjectBase Function() superclass,
      required objc.NSString Function() description,
      objc.NSString Function()? debugDescription}) {
    NSObject.isEqual_.implement(builder, isEqual_);
    NSObject.class1.implement(builder, class1);
    NSObject.self.implement(builder, self);
    NSObject.performSelector_.implement(builder, performSelector_);
    NSObject.performSelector_withObject_
        .implement(builder, performSelector_withObject_);
    NSObject.performSelector_withObject_withObject_
        .implement(builder, performSelector_withObject_withObject_);
    NSObject.isProxy.implement(builder, isProxy);
    NSObject.isKindOfClass_.implement(builder, isKindOfClass_);
    NSObject.isMemberOfClass_.implement(builder, isMemberOfClass_);
    NSObject.conformsToProtocol_.implement(builder, conformsToProtocol_);
    NSObject.respondsToSelector_.implement(builder, respondsToSelector_);
    NSObject.retain.implement(builder, retain);
    NSObject.release.implementAsListener(builder, release);
    NSObject.autorelease.implement(builder, autorelease);
    NSObject.retainCount.implement(builder, retainCount);
    NSObject.zone.implement(builder, zone);
    NSObject.hash.implement(builder, hash);
    NSObject.superclass.implement(builder, superclass);
    NSObject.description.implement(builder, description);
    NSObject.debugDescription.implement(builder, debugDescription);
  }

  /// isEqual:
  static final isEqual_ =
      objc.ObjCProtocolMethod<bool Function(objc.ObjCObjectBase)>(
    _sel_isEqual_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isEqual_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (bool Function(objc.ObjCObjectBase) func) =>
        ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.ObjCObjectBase object) =>
                func(object)),
  );

  /// class
  static final class1 = objc.ObjCProtocolMethod<objc.ObjCObjectBase Function()>(
    _sel_class,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_class,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function() func) =>
        ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
            func()),
  );

  /// self
  static final self = objc.ObjCProtocolMethod<objc.ObjCObjectBase Function()>(
    _sel_self,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_self,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function() func) =>
        ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
            func()),
  );

  /// performSelector:
  static final performSelector_ = objc.ObjCProtocolMethod<
      objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>)>(
    _sel_performSelector_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_performSelector_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>) func) =>
        ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector.fromFunction(
            (ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCSelector> aSelector) =>
                func(aSelector)),
  );

  /// performSelector:withObject:
  static final performSelector_withObject_ = objc.ObjCProtocolMethod<
      objc.ObjCObjectBase Function(
          ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)>(
    _sel_performSelector_withObject_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_performSelector_withObject_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function(
                ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase)
            func) =>
        ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCSelector> aSelector,
                    objc.ObjCObjectBase object) =>
                func(aSelector, object)),
  );

  /// performSelector:withObject:withObject:
  static final performSelector_withObject_withObject_ = objc.ObjCProtocolMethod<
      objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
          objc.ObjCObjectBase, objc.ObjCObjectBase)>(
    _sel_performSelector_withObject_withObject_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_performSelector_withObject_withObject_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function(ffi.Pointer<objc.ObjCSelector>,
                objc.ObjCObjectBase, objc.ObjCObjectBase)
            func) =>
        ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject
            .fromFunction((ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCSelector> aSelector,
                    objc.ObjCObjectBase object1,
                    objc.ObjCObjectBase object2) =>
                func(aSelector, object1, object2)),
  );

  /// isProxy
  static final isProxy = objc.ObjCProtocolMethod<bool Function()>(
    _sel_isProxy,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isProxy,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (bool Function() func) => ObjCBlock_bool_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// isKindOfClass:
  static final isKindOfClass_ =
      objc.ObjCProtocolMethod<bool Function(objc.ObjCObjectBase)>(
    _sel_isKindOfClass_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isKindOfClass_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (bool Function(objc.ObjCObjectBase) func) =>
        ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.ObjCObjectBase object) =>
                func(object)),
  );

  /// isMemberOfClass:
  static final isMemberOfClass_ =
      objc.ObjCProtocolMethod<bool Function(objc.ObjCObjectBase)>(
    _sel_isMemberOfClass_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_isMemberOfClass_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (bool Function(objc.ObjCObjectBase) func) =>
        ObjCBlock_bool_ffiVoid_objcObjCObject.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.ObjCObjectBase object) =>
                func(object)),
  );

  /// conformsToProtocol:
  static final conformsToProtocol_ =
      objc.ObjCProtocolMethod<bool Function(objc.Protocol)>(
    _sel_conformsToProtocol_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_conformsToProtocol_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (bool Function(objc.Protocol) func) =>
        ObjCBlock_bool_ffiVoid_Protocol.fromFunction(
            (ffi.Pointer<ffi.Void> _, objc.Protocol aProtocol) =>
                func(aProtocol)),
  );

  /// respondsToSelector:
  static final respondsToSelector_ =
      objc.ObjCProtocolMethod<bool Function(ffi.Pointer<objc.ObjCSelector>)>(
    _sel_respondsToSelector_,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_respondsToSelector_,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (bool Function(ffi.Pointer<objc.ObjCSelector>) func) =>
        ObjCBlock_bool_ffiVoid_objcObjCSelector.fromFunction(
            (ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCSelector> aSelector) =>
                func(aSelector)),
  );

  /// retain
  static final retain = objc.ObjCProtocolMethod<objc.ObjCObjectBase Function()>(
    _sel_retain,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_retain,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function() func) =>
        ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
            func()),
  );

  /// release
  static final release = objc.ObjCProtocolListenableMethod<void Function()>(
    _sel_release,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_release,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (void Function() func) => ObjCBlock_ffiVoid_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
    (void Function() func) => ObjCBlock_ffiVoid_ffiVoid.listener((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// autorelease
  static final autorelease =
      objc.ObjCProtocolMethod<objc.ObjCObjectBase Function()>(
    _sel_autorelease,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_autorelease,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function() func) =>
        ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
            func()),
  );

  /// retainCount
  static final retainCount = objc.ObjCProtocolMethod<int Function()>(
    _sel_retainCount,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_retainCount,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (int Function() func) => ObjCBlock_ffiUnsignedLong_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// zone
  static final zone = objc.ObjCProtocolMethod<ffi.Pointer<_NSZone> Function()>(
    _sel_zone,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_zone,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (ffi.Pointer<_NSZone> Function() func) =>
        ObjCBlock_NSZone_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
            func()),
  );

  /// hash
  static final hash = objc.ObjCProtocolMethod<int Function()>(
    _sel_hash,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_hash,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (int Function() func) => ObjCBlock_ffiUnsignedLong_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// superclass
  static final superclass =
      objc.ObjCProtocolMethod<objc.ObjCObjectBase Function()>(
    _sel_superclass,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_superclass,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.ObjCObjectBase Function() func) =>
        ObjCBlock_objcObjCObject_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
            func()),
  );

  /// description
  static final description = objc.ObjCProtocolMethod<objc.NSString Function()>(
    _sel_description,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_description,
      isRequired: true,
      isInstanceMethod: true,
    ),
    (objc.NSString Function() func) => ObjCBlock_NSString_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );

  /// debugDescription
  static final debugDescription =
      objc.ObjCProtocolMethod<objc.NSString Function()>(
    _sel_debugDescription,
    objc.getProtocolMethodSignature(
      _protocol_NSObject,
      _sel_debugDescription,
      isRequired: false,
      isInstanceMethod: true,
    ),
    (objc.NSString Function() func) => ObjCBlock_NSString_ffiVoid.fromFunction((
      ffi.Pointer<ffi.Void> _,
    ) =>
        func()),
  );
}

late final _protocol_NSObject = objc.getProtocol("NSObject");
late final _sel_isEqual_ = objc.registerName("isEqual:");
bool _ObjCBlock_bool_ffiVoid_objcObjCObject_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> _,
        ffi.Pointer<objc.ObjCObject> object) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCObject> object)>>()
        .asFunction<
            bool Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(_, object);
bool _ObjCBlock_bool_ffiVoid_objcObjCObject_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> _,
        ffi.Pointer<objc.ObjCObject> object) =>
    (objc.getBlockClosure(block) as bool Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(_, object);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_bool_ffiVoid_objcObjCObject {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Bool Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCObject> object)>> ptr) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_bool_ffiVoid_objcObjCObject_fnPtrTrampoline,
                              false)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)> fromFunction(
          bool Function(ffi.Pointer<ffi.Void>, objc.ObjCObjectBase) fn) =>
      objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_bool_ffiVoid_objcObjCObject_closureTrampoline, false)
                      .cast(),
              (ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCObject> object) =>
                  fn(_, objc.ObjCObjectBase(object, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_bool_ffiVoid_objcObjCObject_CallExtension on objc.ObjCBlock<
    ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)> {
  bool call(ffi.Pointer<ffi.Void> _, objc.ObjCObjectBase object) =>
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.Void> _,
                          ffi.Pointer<objc.ObjCObject> object)>>()
              .asFunction<
                  bool Function(ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()(
          ref.pointer, _, object.ref.pointer);
}

late final _sel_class = objc.registerName("class");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> _)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>()(_);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>))(_);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void> _)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(_ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)> fromFunction(
          objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<ffi.Void>)>(_ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline)
                  .cast(),
              (ffi.Pointer<ffi.Void> _) => fn(_).ref.retainAndAutorelease()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_CallExtension on objc
    .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)> {
  objc.ObjCObjectBase call(ffi.Pointer<ffi.Void> _) => objc.ObjCObjectBase(
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> _)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, _),
      retain: true,
      release: true);
}

late final _sel_self = objc.registerName("self");
late final _sel_performSelector_ = objc.registerName("performSelector:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCSelector> aSelector) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> _,
                        ffi.Pointer<objc.ObjCSelector> aSelector)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCSelector>)>()(_, aSelector);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCSelector> aSelector) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCSelector>))(_, aSelector);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
                              _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_fnPtrTrampoline)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>
      fromFunction(objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>) fn) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
                          _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_closureTrampoline)
                      .cast(),
                  (ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector) =>
                      fn(_, aSelector).ref.retainAndAutorelease()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_CallExtension
    on objc.ObjCBlock<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)> {
  objc.ObjCObjectBase call(
          ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector) =>
      objc.ObjCObjectBase(
          ref.pointer.ref.invoke
                  .cast<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl> block,
                              ffi.Pointer<ffi.Void> _,
                              ffi.Pointer<objc.ObjCSelector> aSelector)>>()
                  .asFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<objc.ObjCSelector>)>()(
              ref.pointer, _, aSelector),
          retain: true,
          release: true);
}

late final _sel_performSelector_withObject_ =
    objc.registerName("performSelector:withObject:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCSelector> aSelector,
            ffi.Pointer<objc.ObjCObject> object) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> _,
                        ffi.Pointer<objc.ObjCSelector> aSelector,
                        ffi.Pointer<objc.ObjCObject> object)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCSelector>,
                    ffi.Pointer<objc.ObjCObject>)>()(_, aSelector, object);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCSelector> aSelector,
            ffi.Pointer<objc.ObjCObject> object) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>))(_, aSelector, object);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCSelector>,
                      ffi.Pointer<objc.ObjCObject>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector, ffi.Pointer<objc.ObjCObject> object)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCSelector>,
                      ffi.Pointer<objc.ObjCObject>)>(
              objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_fnPtrTrampoline).cast(), ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>
      fromFunction(objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase) fn) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_closureTrampoline)
                          .cast(),
                  (ffi.Pointer<ffi.Void> _,
                          ffi.Pointer<objc.ObjCSelector> aSelector,
                          ffi.Pointer<objc.ObjCObject> object) =>
                      fn(_, aSelector, objc.ObjCObjectBase(object, retain: true, release: true)).ref.retainAndAutorelease()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_CallExtension
    on objc.ObjCBlock<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)> {
  objc.ObjCObjectBase call(
          ffi.Pointer<ffi.Void> _,
          ffi.Pointer<objc.ObjCSelector> aSelector,
          objc.ObjCObjectBase object) =>
      objc.ObjCObjectBase(
          ref.pointer.ref.invoke
                  .cast<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl> block,
                              ffi.Pointer<ffi.Void> _,
                              ffi.Pointer<objc.ObjCSelector> aSelector,
                              ffi.Pointer<objc.ObjCObject> object)>>()
                  .asFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<objc.ObjCSelector>,
                          ffi.Pointer<objc.ObjCObject>)>()(
              ref.pointer, _, aSelector, object.ref.pointer),
          retain: true,
          release: true);
}

late final _sel_performSelector_withObject_withObject_ =
    objc.registerName("performSelector:withObject:withObject:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCSelector> aSelector,
            ffi.Pointer<objc.ObjCObject> object1,
            ffi.Pointer<objc.ObjCObject> object2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> _,
                        ffi.Pointer<objc.ObjCSelector> aSelector,
                        ffi.Pointer<objc.ObjCObject> object1,
                        ffi.Pointer<objc.ObjCObject> object2)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCSelector>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(_, aSelector, object1, object2);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCSelector> aSelector,
            ffi.Pointer<objc.ObjCObject> object1,
            ffi.Pointer<objc.ObjCObject> object2) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(_, aSelector, object1, object2);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCSelector>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Pointer<objc.ObjCObject> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)> fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector, ffi.Pointer<objc.ObjCObject> object1, ffi.Pointer<objc.ObjCObject> object2)>> ptr) =>
      objc.ObjCBlock<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCSelector>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>(
          objc.newPointerBlock(_cFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_fnPtrTrampoline).cast(), ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>
      fromFunction(objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, objc.ObjCObjectBase, objc.ObjCObjectBase) fn) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_closureTrampoline)
                          .cast(),
                  (ffi.Pointer<ffi.Void> _,
                          ffi.Pointer<objc.ObjCSelector> aSelector,
                          ffi.Pointer<objc.ObjCObject> object1,
                          ffi.Pointer<objc.ObjCObject> object2) =>
                      fn(_, aSelector, objc.ObjCObjectBase(object1, retain: true, release: true), objc.ObjCObjectBase(object2, retain: true, release: true)).ref.retainAndAutorelease()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_objcObjCSelector_objcObjCObject_objcObjCObject_CallExtension
    on objc.ObjCBlock<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)> {
  objc.ObjCObjectBase call(
          ffi.Pointer<ffi.Void> _,
          ffi.Pointer<objc.ObjCSelector> aSelector,
          objc.ObjCObjectBase object1,
          objc.ObjCObjectBase object2) =>
      objc.ObjCObjectBase(
          ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.Void> _,
                          ffi.Pointer<objc.ObjCSelector> aSelector,
                          ffi.Pointer<objc.ObjCObject> object1,
                          ffi.Pointer<objc.ObjCObject> object2)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<objc.ObjCSelector>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, _, aSelector, object1.ref.pointer, object2.ref.pointer),
          retain: true,
          release: true);
}

late final _sel_isProxy = objc.registerName("isProxy");
bool _ObjCBlock_bool_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> _)>>()
        .asFunction<bool Function(ffi.Pointer<ffi.Void>)>()(_);
bool _ObjCBlock_bool_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<ffi.Void>))(_);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_bool_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> _)>>
              ptr) =>
      objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>(
          objc.newPointerBlock(
              _cFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
                          _ObjCBlock_bool_ffiVoid_fnPtrTrampoline, false)
                      .cast(),
              ptr.cast()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)> fromFunction(
          bool Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<ffi.Void>)>(
                      _ObjCBlock_bool_ffiVoid_closureTrampoline, false)
                  .cast(),
              (ffi.Pointer<ffi.Void> _) => fn(_)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_bool_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)> {
  bool call(ffi.Pointer<ffi.Void> _) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<ffi.Void> _)>>()
      .asFunction<
          bool Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<ffi.Void>)>()(ref.pointer, _);
}

late final _sel_isMemberOfClass_ = objc.registerName("isMemberOfClass:");
late final _sel_conformsToProtocol_ = objc.registerName("conformsToProtocol:");
bool _ObjCBlock_bool_ffiVoid_Protocol_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> _,
        ffi.Pointer<objc.ObjCObject> aProtocol) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCObject> aProtocol)>>()
        .asFunction<
            bool Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(_, aProtocol);
bool _ObjCBlock_bool_ffiVoid_Protocol_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> _,
        ffi.Pointer<objc.ObjCObject> aProtocol) =>
    (objc.getBlockClosure(block) as bool Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(_, aProtocol);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)>`.
abstract final class ObjCBlock_bool_ffiVoid_Protocol {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Bool Function(ffi.Pointer<ffi.Void>,
                  objc.Protocol)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCObject> aProtocol)>> ptr) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
                              _ObjCBlock_bool_ffiVoid_Protocol_fnPtrTrampoline,
                              false)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)> fromFunction(
          bool Function(ffi.Pointer<ffi.Void>, objc.Protocol) fn) =>
      objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??=
                  ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_bool_ffiVoid_Protocol_closureTrampoline,
                          false)
                      .cast(),
              (ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCObject> aProtocol) =>
                  fn(_, objc.Protocol.castFromPointer(aProtocol, retain: true, release: true))),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)>`.
extension ObjCBlock_bool_ffiVoid_Protocol_CallExtension
    on objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, objc.Protocol)> {
  bool call(ffi.Pointer<ffi.Void> _, objc.Protocol aProtocol) =>
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.Void> _,
                          ffi.Pointer<objc.ObjCObject> aProtocol)>>()
              .asFunction<
                  bool Function(ffi.Pointer<objc.ObjCBlockImpl>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()(
          ref.pointer, _, aProtocol.ref.pointer);
}

late final _sel_respondsToSelector_ = objc.registerName("respondsToSelector:");
bool _ObjCBlock_bool_ffiVoid_objcObjCSelector_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> _,
        ffi.Pointer<objc.ObjCSelector> aSelector) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Void> _,
                    ffi.Pointer<objc.ObjCSelector> aSelector)>>()
        .asFunction<
            bool Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCSelector>)>()(_, aSelector);
bool _ObjCBlock_bool_ffiVoid_objcObjCSelector_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> _,
        ffi.Pointer<objc.ObjCSelector> aSelector) =>
    (objc.getBlockClosure(block) as bool Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>))(_, aSelector);

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>`.
abstract final class ObjCBlock_bool_ffiVoid_objcObjCSelector {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Bool Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector)>> ptr) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
                              _ObjCBlock_bool_ffiVoid_objcObjCSelector_fnPtrTrampoline,
                              false)
                          .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>
      fromFunction(bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>) fn) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??=
                      ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>(
                              _ObjCBlock_bool_ffiVoid_objcObjCSelector_closureTrampoline, false)
                          .cast(),
                  (ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector) =>
                      fn(_, aSelector)),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)>`.
extension ObjCBlock_bool_ffiVoid_objcObjCSelector_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCSelector>)> {
  bool call(
          ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCSelector> aSelector) =>
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> _,
                      ffi.Pointer<objc.ObjCSelector> aSelector)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCSelector>)>()(ref.pointer, _, aSelector);
}

late final _sel_retain = objc.registerName("retain");
late final _sel_release = objc.registerName("release");
void _ObjCBlock_ffiVoid_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> _)>>()
        .asFunction<void Function(ffi.Pointer<ffi.Void>)>()(_);
void _ObjCBlock_ffiVoid_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<ffi.Void>))(_);

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_ffiVoid_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> _)>> ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<ffi.Void>)>(_ObjCBlock_ffiVoid_ffiVoid_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)> fromFunction(
          void Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Void Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
                      _ObjCBlock_ffiVoid_ffiVoid_closureTrampoline)
                  .cast(),
              (ffi.Pointer<ffi.Void> _) => fn(_)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)> listener(
      void Function(ffi.Pointer<ffi.Void>) fn) {
    final raw = objc.newClosureBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                        ffi.Pointer<ffi.Void>)>.listener(
                _ObjCBlock_ffiVoid_ffiVoid_closureTrampoline)
              ..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        (ffi.Pointer<ffi.Void> _) => fn(_));
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>(raw,
        retain: false, release: true);
  }

  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>?
      _dartFuncListenerTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_ffiVoid_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>)> {
  void call(ffi.Pointer<ffi.Void> _) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<ffi.Void> _)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<ffi.Void>)>()(ref.pointer, _);
}

late final _sel_autorelease = objc.registerName("autorelease");
late final _sel_retainCount = objc.registerName("retainCount");
int _ObjCBlock_ffiUnsignedLong_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void> _)>>()
        .asFunction<int Function(ffi.Pointer<ffi.Void>)>()(_);
int _ObjCBlock_ffiUnsignedLong_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    (objc.getBlockClosure(block) as int Function(ffi.Pointer<ffi.Void>))(_);

/// Construction methods for `objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_ffiUnsignedLong_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void> _)>> ptr) =>
          objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.UnsignedLong Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<ffi.Void>)>(_ObjCBlock_ffiUnsignedLong_ffiVoid_fnPtrTrampoline, 0)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)> fromFunction(
          int Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.UnsignedLong Function(
                              ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
                      _ObjCBlock_ffiUnsignedLong_ffiVoid_closureTrampoline, 0)
                  .cast(),
              (ffi.Pointer<ffi.Void> _) => fn(_)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_ffiUnsignedLong_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)> {
  int call(ffi.Pointer<ffi.Void> _) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<ffi.Void> _)>>()
      .asFunction<
          int Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<ffi.Void>)>()(ref.pointer, _);
}

late final _sel_zone = objc.registerName("zone");
ffi.Pointer<_NSZone> _ObjCBlock_NSZone_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void> _)>>()
        .asFunction<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>()(_);
ffi.Pointer<_NSZone> _ObjCBlock_NSZone_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    (objc.getBlockClosure(block) as ffi.Pointer<_NSZone> Function(
        ffi.Pointer<ffi.Void>))(_);

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_NSZone_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void> _)>> ptr) =>
          objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<_NSZone> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<ffi.Void>)>(_ObjCBlock_NSZone_ffiVoid_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)> fromFunction(
          ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Pointer<_NSZone> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<ffi.Void>)>(_ObjCBlock_NSZone_ffiVoid_closureTrampoline)
                  .cast(),
              (ffi.Pointer<ffi.Void> _) => fn(_)),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_NSZone_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Pointer<_NSZone> Function(ffi.Pointer<ffi.Void>)> {
  ffi.Pointer<_NSZone> call(ffi.Pointer<ffi.Void> _) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<_NSZone> Function(
                  ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<ffi.Void> _)>>()
      .asFunction<
          ffi.Pointer<_NSZone> Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<ffi.Void>)>()(ref.pointer, _);
}

late final _sel_hash = objc.registerName("hash");
late final _sel_superclass = objc.registerName("superclass");
late final _sel_description = objc.registerName("description");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSString_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> _)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>()(_);
ffi.Pointer<objc.ObjCObject> _ObjCBlock_NSString_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> _) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<ffi.Void>))(_);

/// Construction methods for `objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_NSString_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void> _)>> ptr) =>
          objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<ffi.Void>)>(_ObjCBlock_NSString_ffiVoid_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)> fromFunction(
          objc.NSString Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<ffi.Void>)>(_ObjCBlock_NSString_ffiVoid_closureTrampoline)
                  .cast(),
              (ffi.Pointer<ffi.Void> _) => fn(_).ref.retainAndAutorelease()),
          retain: false,
          release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_NSString_ffiVoid_CallExtension
    on objc.ObjCBlock<objc.NSString Function(ffi.Pointer<ffi.Void>)> {
  objc.NSString call(ffi.Pointer<ffi.Void> _) => objc.NSString.castFromPointer(
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> _)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, _),
      retain: true,
      release: true);
}

late final _sel_debugDescription = objc.registerName("debugDescription");
late final _sel_presentationAnchorForWebAuthenticationSession_ =
    objc.registerName("presentationAnchorForWebAuthenticationSession:");
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_UIWindow_ffiVoid_ASWebAuthenticationSession_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCObject> session) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void> _,
                        ffi.Pointer<objc.ObjCObject> session)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<objc.ObjCObject>)>()(_, session);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_UIWindow_ffiVoid_ASWebAuthenticationSession_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> _,
            ffi.Pointer<objc.ObjCObject> session) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(_, session);

/// Construction methods for `objc.ObjCBlock<UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>`.
abstract final class ObjCBlock_UIWindow_ffiVoid_ASWebAuthenticationSession {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  UIWindow Function(
                      ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCObject> session)>> ptr) =>
          objc.ObjCBlock<UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>(
              objc.newPointerBlock(
                  _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl>,
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<objc.ObjCObject>)>(_ObjCBlock_UIWindow_ffiVoid_ASWebAuthenticationSession_fnPtrTrampoline)
                      .cast(),
                  ptr.cast()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>
      fromFunction(UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession) fn) =>
          objc.ObjCBlock<UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>(
              objc.newClosureBlock(
                  _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
                          _ObjCBlock_UIWindow_ffiVoid_ASWebAuthenticationSession_closureTrampoline)
                      .cast(),
                  (ffi.Pointer<ffi.Void> _, ffi.Pointer<objc.ObjCObject> session) =>
                      fn(_, ASWebAuthenticationSession.castFromPointer(session, retain: true, release: true))
                          .ref
                          .retainAndAutorelease()),
              retain: false,
              release: true);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
}

/// Call operator for `objc.ObjCBlock<UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)>`.
extension ObjCBlock_UIWindow_ffiVoid_ASWebAuthenticationSession_CallExtension
    on objc.ObjCBlock<
        UIWindow Function(ffi.Pointer<ffi.Void>, ASWebAuthenticationSession)> {
  UIWindow call(ffi.Pointer<ffi.Void> _, ASWebAuthenticationSession session) =>
      UIWindow.castFromPointer(
          ref.pointer.ref.invoke
                  .cast<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<objc.ObjCBlockImpl> block,
                              ffi.Pointer<ffi.Void> _,
                              ffi.Pointer<objc.ObjCObject> session)>>()
                  .asFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<objc.ObjCObject>)>()(
              ref.pointer, _, session.ref.pointer),
          retain: true,
          release: true);
}
