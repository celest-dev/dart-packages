// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `dev.celest.native_storage.NativeStorage`
class NativeStorage extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<NativeStorage> $type;

  @jni$_.internal
  NativeStorage.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/celest/native_storage/NativeStorage');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $NativeStorage$NullableType();
  static const type = $NativeStorage$Type();
  static final _id_getAllKeys = _class.instanceMethodId(
    r'getAllKeys',
    r'()Ljava/util/List;',
  );

  static final _getAllKeys = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.List getAllKeys()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JString> getAllKeys() {
    return _getAllKeys(reference.pointer, _id_getAllKeys as jni$_.JMethodIDPtr)
        .object<jni$_.JList<jni$_.JString>>(
            const jni$_.JListType<jni$_.JString>(jni$_.JStringType()));
  }

  static final _id_write = _class.instanceMethodId(
    r'write',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _write = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void write(java.lang.String string, java.lang.String string1)`
  void write(
    jni$_.JString string,
    jni$_.JString? string1,
  ) {
    final _$string = string.reference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _write(reference.pointer, _id_write as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_read = _class.instanceMethodId(
    r'read',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _read = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String read(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? read(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _read(
            reference.pointer, _id_read as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_delete = _class.instanceMethodId(
    r'delete',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _delete = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String delete(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? delete(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _delete(reference.pointer, _id_delete as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_clear = _class.instanceMethodId(
    r'clear',
    r'()V',
  );

  static final _clear = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void clear()`
  void clear() {
    _clear(reference.pointer, _id_clear as jni$_.JMethodIDPtr).check();
  }
}

final class $NativeStorage$NullableType extends jni$_.JObjType<NativeStorage?> {
  @jni$_.internal
  const $NativeStorage$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/celest/native_storage/NativeStorage;';

  @jni$_.internal
  @core$_.override
  NativeStorage? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : NativeStorage.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeStorage?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($NativeStorage$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeStorage$NullableType) &&
        other is $NativeStorage$NullableType;
  }
}

final class $NativeStorage$Type extends jni$_.JObjType<NativeStorage> {
  @jni$_.internal
  const $NativeStorage$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/celest/native_storage/NativeStorage;';

  @jni$_.internal
  @core$_.override
  NativeStorage fromReference(jni$_.JReference reference) =>
      NativeStorage.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeStorage?> get nullableType =>
      const $NativeStorage$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($NativeStorage$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeStorage$Type) &&
        other is $NativeStorage$Type;
  }
}

/// from: `dev.celest.native_storage.NativeLocalStorage`
class NativeLocalStorage extends NativeStorage {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<NativeLocalStorage> $type;

  @jni$_.internal
  NativeLocalStorage.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/celest/native_storage/NativeLocalStorage');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $NativeLocalStorage$NullableType();
  static const type = $NativeLocalStorage$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context, java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory NativeLocalStorage(
    Context context,
    jni$_.JString string,
    jni$_.JString? string1,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return NativeLocalStorage.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer,
            _$string1.pointer)
        .reference);
  }
}

final class $NativeLocalStorage$NullableType
    extends jni$_.JObjType<NativeLocalStorage?> {
  @jni$_.internal
  const $NativeLocalStorage$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/celest/native_storage/NativeLocalStorage;';

  @jni$_.internal
  @core$_.override
  NativeLocalStorage? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : NativeLocalStorage.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $NativeStorage$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeLocalStorage?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($NativeLocalStorage$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeLocalStorage$NullableType) &&
        other is $NativeLocalStorage$NullableType;
  }
}

final class $NativeLocalStorage$Type
    extends jni$_.JObjType<NativeLocalStorage> {
  @jni$_.internal
  const $NativeLocalStorage$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/celest/native_storage/NativeLocalStorage;';

  @jni$_.internal
  @core$_.override
  NativeLocalStorage fromReference(jni$_.JReference reference) =>
      NativeLocalStorage.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $NativeStorage$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeLocalStorage?> get nullableType =>
      const $NativeLocalStorage$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($NativeLocalStorage$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeLocalStorage$Type) &&
        other is $NativeLocalStorage$Type;
  }
}

/// from: `dev.celest.native_storage.NativeSecureStorage`
class NativeSecureStorage extends NativeStorage {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<NativeSecureStorage> $type;

  @jni$_.internal
  NativeSecureStorage.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'dev/celest/native_storage/NativeSecureStorage');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $NativeSecureStorage$NullableType();
  static const type = $NativeSecureStorage$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context, java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory NativeSecureStorage(
    Context context,
    jni$_.JString string,
    jni$_.JString? string1,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return NativeSecureStorage.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer,
            _$string1.pointer)
        .reference);
  }
}

final class $NativeSecureStorage$NullableType
    extends jni$_.JObjType<NativeSecureStorage?> {
  @jni$_.internal
  const $NativeSecureStorage$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/celest/native_storage/NativeSecureStorage;';

  @jni$_.internal
  @core$_.override
  NativeSecureStorage? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : NativeSecureStorage.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $NativeStorage$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeSecureStorage?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($NativeSecureStorage$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeSecureStorage$NullableType) &&
        other is $NativeSecureStorage$NullableType;
  }
}

final class $NativeSecureStorage$Type
    extends jni$_.JObjType<NativeSecureStorage> {
  @jni$_.internal
  const $NativeSecureStorage$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ldev/celest/native_storage/NativeSecureStorage;';

  @jni$_.internal
  @core$_.override
  NativeSecureStorage fromReference(jni$_.JReference reference) =>
      NativeSecureStorage.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $NativeStorage$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeSecureStorage?> get nullableType =>
      const $NativeSecureStorage$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($NativeSecureStorage$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeSecureStorage$Type) &&
        other is $NativeSecureStorage$Type;
  }
}

/// from: `android.app.Activity$ScreenCaptureCallback`
class Activity$ScreenCaptureCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Activity$ScreenCaptureCallback> $type;

  @jni$_.internal
  Activity$ScreenCaptureCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/app/Activity$ScreenCaptureCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Activity$ScreenCaptureCallback$NullableType();
  static const type = $Activity$ScreenCaptureCallback$Type();
  static final _id_onScreenCaptured = _class.instanceMethodId(
    r'onScreenCaptured',
    r'()V',
  );

  static final _onScreenCaptured = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void onScreenCaptured()`
  void onScreenCaptured() {
    _onScreenCaptured(
            reference.pointer, _id_onScreenCaptured as jni$_.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Activity$ScreenCaptureCallback> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onScreenCaptured()V') {
        _$impls[$p]!.onScreenCaptured();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Activity$ScreenCaptureCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.app.Activity$ScreenCaptureCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onScreenCaptured$async) r'onScreenCaptured()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Activity$ScreenCaptureCallback.implement(
    $Activity$ScreenCaptureCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Activity$ScreenCaptureCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Activity$ScreenCaptureCallback {
  factory $Activity$ScreenCaptureCallback({
    required void Function() onScreenCaptured,
    bool onScreenCaptured$async,
  }) = _$Activity$ScreenCaptureCallback;

  void onScreenCaptured();
  bool get onScreenCaptured$async => false;
}

final class _$Activity$ScreenCaptureCallback
    with $Activity$ScreenCaptureCallback {
  _$Activity$ScreenCaptureCallback({
    required void Function() onScreenCaptured,
    this.onScreenCaptured$async = false,
  }) : _onScreenCaptured = onScreenCaptured;

  final void Function() _onScreenCaptured;
  final bool onScreenCaptured$async;

  void onScreenCaptured() {
    return _onScreenCaptured();
  }
}

final class $Activity$ScreenCaptureCallback$NullableType
    extends jni$_.JObjType<Activity$ScreenCaptureCallback?> {
  @jni$_.internal
  const $Activity$ScreenCaptureCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity$ScreenCaptureCallback;';

  @jni$_.internal
  @core$_.override
  Activity$ScreenCaptureCallback? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Activity$ScreenCaptureCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity$ScreenCaptureCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$ScreenCaptureCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($Activity$ScreenCaptureCallback$NullableType) &&
        other is $Activity$ScreenCaptureCallback$NullableType;
  }
}

final class $Activity$ScreenCaptureCallback$Type
    extends jni$_.JObjType<Activity$ScreenCaptureCallback> {
  @jni$_.internal
  const $Activity$ScreenCaptureCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity$ScreenCaptureCallback;';

  @jni$_.internal
  @core$_.override
  Activity$ScreenCaptureCallback fromReference(jni$_.JReference reference) =>
      Activity$ScreenCaptureCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity$ScreenCaptureCallback?> get nullableType =>
      const $Activity$ScreenCaptureCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$ScreenCaptureCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$ScreenCaptureCallback$Type) &&
        other is $Activity$ScreenCaptureCallback$Type;
  }
}

/// from: `android.app.Activity`
class Activity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Activity> $type;

  @jni$_.internal
  Activity.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/app/Activity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Activity$NullableType();
  static const type = $Activity$Type();

  /// from: `static public final int DEFAULT_KEYS_DIALER`
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: `static public final int DEFAULT_KEYS_DISABLE`
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_GLOBAL`
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_LOCAL`
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: `static public final int DEFAULT_KEYS_SHORTCUT`
  static const DEFAULT_KEYS_SHORTCUT = 2;

  /// from: `static public final int FULLSCREEN_MODE_REQUEST_ENTER`
  static const FULLSCREEN_MODE_REQUEST_ENTER = 1;

  /// from: `static public final int FULLSCREEN_MODE_REQUEST_EXIT`
  static const FULLSCREEN_MODE_REQUEST_EXIT = 0;

  /// from: `static public final int OVERRIDE_TRANSITION_CLOSE`
  static const OVERRIDE_TRANSITION_CLOSE = 1;

  /// from: `static public final int OVERRIDE_TRANSITION_OPEN`
  static const OVERRIDE_TRANSITION_OPEN = 0;

  /// from: `static public final int RESULT_CANCELED`
  static const RESULT_CANCELED = 0;

  /// from: `static public final int RESULT_FIRST_USER`
  static const RESULT_FIRST_USER = 1;

  /// from: `static public final int RESULT_OK`
  static const RESULT_OK = -1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setIntent = _class.instanceMethodId(
    r'setIntent',
    r'(Landroid/content/Intent;)V',
  );

  static final _setIntent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setIntent(android.content.Intent intent)`
  void setIntent(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setIntent(reference.pointer, _id_setIntent as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_getCaller = _class.instanceMethodId(
    r'getCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getCaller = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.ComponentCaller getCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCaller() {
    return _getCaller(reference.pointer, _id_getCaller as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setIntent$1 = _class.instanceMethodId(
    r'setIntent',
    r'(Landroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _setIntent$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setIntent(android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void setIntent$1(
    jni$_.JObject? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller =
        componentCaller?.reference ?? jni$_.jNullReference;
    _setIntent$1(reference.pointer, _id_setIntent$1 as jni$_.JMethodIDPtr,
            _$intent.pointer, _$componentCaller.pointer)
        .check();
  }

  static final _id_setLocusContext = _class.instanceMethodId(
    r'setLocusContext',
    r'(Landroid/content/LocusId;Landroid/os/Bundle;)V',
  );

  static final _setLocusContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)`
  void setLocusContext(
    jni$_.JObject? locusId,
    jni$_.JObject? bundle,
  ) {
    final _$locusId = locusId?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setLocusContext(
            reference.pointer,
            _id_setLocusContext as jni$_.JMethodIDPtr,
            _$locusId.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_getApplication = _class.instanceMethodId(
    r'getApplication',
    r'()Landroid/app/Application;',
  );

  static final _getApplication = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.app.Application getApplication()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplication() {
    return _getApplication(
            reference.pointer, _id_getApplication as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isChild = _class.instanceMethodId(
    r'isChild',
    r'()Z',
  );

  static final _isChild = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isChild()`
  bool isChild() {
    return _isChild(reference.pointer, _id_isChild as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getParent = _class.instanceMethodId(
    r'getParent',
    r'()Landroid/app/Activity;',
  );

  static final _getParent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.app.Activity getParent()`
  /// The returned object must be released after use, by calling the [release] method.
  Activity? getParent() {
    return _getParent(reference.pointer, _id_getParent as jni$_.JMethodIDPtr)
        .object<Activity?>(const $Activity$NullableType());
  }

  static final _id_getWindowManager = _class.instanceMethodId(
    r'getWindowManager',
    r'()Landroid/view/WindowManager;',
  );

  static final _getWindowManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.WindowManager getWindowManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindowManager() {
    return _getWindowManager(
            reference.pointer, _id_getWindowManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWindow = _class.instanceMethodId(
    r'getWindow',
    r'()Landroid/view/Window;',
  );

  static final _getWindow = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.Window getWindow()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindow() {
    return _getWindow(reference.pointer, _id_getWindow as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLoaderManager = _class.instanceMethodId(
    r'getLoaderManager',
    r'()Landroid/app/LoaderManager;',
  );

  static final _getLoaderManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.LoaderManager getLoaderManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLoaderManager() {
    return _getLoaderManager(
            reference.pointer, _id_getLoaderManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCurrentFocus = _class.instanceMethodId(
    r'getCurrentFocus',
    r'()Landroid/view/View;',
  );

  static final _getCurrentFocus = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.View getCurrentFocus()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCurrentFocus() {
    return _getCurrentFocus(
            reference.pointer, _id_getCurrentFocus as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerActivityLifecycleCallbacks = _class.instanceMethodId(
    r'registerActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _registerActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void registerActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks =
        activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _registerActivityLifecycleCallbacks(
            reference.pointer,
            _id_registerActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
            _$activityLifecycleCallbacks.pointer)
        .check();
  }

  static final _id_unregisterActivityLifecycleCallbacks =
      _class.instanceMethodId(
    r'unregisterActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _unregisterActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void unregisterActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks =
        activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterActivityLifecycleCallbacks(
            reference.pointer,
            _id_unregisterActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
            _$activityLifecycleCallbacks.pointer)
        .check();
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_getSplashScreen = _class.instanceMethodId(
    r'getSplashScreen',
    r'()Landroid/window/SplashScreen;',
  );

  static final _getSplashScreen = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.window.SplashScreen getSplashScreen()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSplashScreen() {
    return _getSplashScreen(
            reference.pointer, _id_getSplashScreen as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onCreate(reference.pointer, _id_onCreate as jni$_.JMethodIDPtr,
            _$bundle.pointer, _$persistableBundle.pointer)
        .check();
  }

  static final _id_onRestoreInstanceState = _class.instanceMethodId(
    r'onRestoreInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onRestoreInstanceState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onRestoreInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onRestoreInstanceState(
            reference.pointer,
            _id_onRestoreInstanceState as jni$_.JMethodIDPtr,
            _$bundle.pointer,
            _$persistableBundle.pointer)
        .check();
  }

  static final _id_onPostCreate = _class.instanceMethodId(
    r'onPostCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onPostCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onPostCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onPostCreate(reference.pointer, _id_onPostCreate as jni$_.JMethodIDPtr,
            _$bundle.pointer, _$persistableBundle.pointer)
        .check();
  }

  static final _id_onStateNotSaved = _class.instanceMethodId(
    r'onStateNotSaved',
    r'()V',
  );

  static final _onStateNotSaved = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onStateNotSaved()`
  void onStateNotSaved() {
    _onStateNotSaved(
            reference.pointer, _id_onStateNotSaved as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onTopResumedActivityChanged = _class.instanceMethodId(
    r'onTopResumedActivityChanged',
    r'(Z)V',
  );

  static final _onTopResumedActivityChanged =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTopResumedActivityChanged(boolean z)`
  void onTopResumedActivityChanged(
    bool z,
  ) {
    _onTopResumedActivityChanged(reference.pointer,
            _id_onTopResumedActivityChanged as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isVoiceInteraction = _class.instanceMethodId(
    r'isVoiceInteraction',
    r'()Z',
  );

  static final _isVoiceInteraction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isVoiceInteraction()`
  bool isVoiceInteraction() {
    return _isVoiceInteraction(
            reference.pointer, _id_isVoiceInteraction as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isVoiceInteractionRoot = _class.instanceMethodId(
    r'isVoiceInteractionRoot',
    r'()Z',
  );

  static final _isVoiceInteractionRoot = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isVoiceInteractionRoot()`
  bool isVoiceInteractionRoot() {
    return _isVoiceInteractionRoot(
            reference.pointer, _id_isVoiceInteractionRoot as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getVoiceInteractor = _class.instanceMethodId(
    r'getVoiceInteractor',
    r'()Landroid/app/VoiceInteractor;',
  );

  static final _getVoiceInteractor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.VoiceInteractor getVoiceInteractor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getVoiceInteractor() {
    return _getVoiceInteractor(
            reference.pointer, _id_getVoiceInteractor as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isLocalVoiceInteractionSupported = _class.instanceMethodId(
    r'isLocalVoiceInteractionSupported',
    r'()Z',
  );

  static final _isLocalVoiceInteractionSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isLocalVoiceInteractionSupported()`
  bool isLocalVoiceInteractionSupported() {
    return _isLocalVoiceInteractionSupported(reference.pointer,
            _id_isLocalVoiceInteractionSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_startLocalVoiceInteraction = _class.instanceMethodId(
    r'startLocalVoiceInteraction',
    r'(Landroid/os/Bundle;)V',
  );

  static final _startLocalVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startLocalVoiceInteraction(android.os.Bundle bundle)`
  void startLocalVoiceInteraction(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startLocalVoiceInteraction(
            reference.pointer,
            _id_startLocalVoiceInteraction as jni$_.JMethodIDPtr,
            _$bundle.pointer)
        .check();
  }

  static final _id_onLocalVoiceInteractionStarted = _class.instanceMethodId(
    r'onLocalVoiceInteractionStarted',
    r'()V',
  );

  static final _onLocalVoiceInteractionStarted =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public void onLocalVoiceInteractionStarted()`
  void onLocalVoiceInteractionStarted() {
    _onLocalVoiceInteractionStarted(reference.pointer,
            _id_onLocalVoiceInteractionStarted as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onLocalVoiceInteractionStopped = _class.instanceMethodId(
    r'onLocalVoiceInteractionStopped',
    r'()V',
  );

  static final _onLocalVoiceInteractionStopped =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public void onLocalVoiceInteractionStopped()`
  void onLocalVoiceInteractionStopped() {
    _onLocalVoiceInteractionStopped(reference.pointer,
            _id_onLocalVoiceInteractionStopped as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_stopLocalVoiceInteraction = _class.instanceMethodId(
    r'stopLocalVoiceInteraction',
    r'()V',
  );

  static final _stopLocalVoiceInteraction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void stopLocalVoiceInteraction()`
  void stopLocalVoiceInteraction() {
    _stopLocalVoiceInteraction(reference.pointer,
            _id_stopLocalVoiceInteraction as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onNewIntent = _class.instanceMethodId(
    r'onNewIntent',
    r'(Landroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _onNewIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onNewIntent(android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void onNewIntent(
    jni$_.JObject? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller =
        componentCaller?.reference ?? jni$_.jNullReference;
    _onNewIntent(reference.pointer, _id_onNewIntent as jni$_.JMethodIDPtr,
            _$intent.pointer, _$componentCaller.pointer)
        .check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onSaveInstanceState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onSaveInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as jni$_.JMethodIDPtr,
            _$bundle.pointer,
            _$persistableBundle.pointer)
        .check();
  }

  static final _id_onCreateThumbnail = _class.instanceMethodId(
    r'onCreateThumbnail',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z',
  );

  static final _onCreateThumbnail = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)`
  bool onCreateThumbnail(
    jni$_.JObject? bitmap,
    jni$_.JObject? canvas,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    final _$canvas = canvas?.reference ?? jni$_.jNullReference;
    return _onCreateThumbnail(
            reference.pointer,
            _id_onCreateThumbnail as jni$_.JMethodIDPtr,
            _$bitmap.pointer,
            _$canvas.pointer)
        .boolean;
  }

  static final _id_onCreateDescription = _class.instanceMethodId(
    r'onCreateDescription',
    r'()Ljava/lang/CharSequence;',
  );

  static final _onCreateDescription = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.CharSequence onCreateDescription()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateDescription() {
    return _onCreateDescription(
            reference.pointer, _id_onCreateDescription as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onProvideAssistData = _class.instanceMethodId(
    r'onProvideAssistData',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onProvideAssistData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onProvideAssistData(android.os.Bundle bundle)`
  void onProvideAssistData(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onProvideAssistData(reference.pointer,
            _id_onProvideAssistData as jni$_.JMethodIDPtr, _$bundle.pointer)
        .check();
  }

  static final _id_onProvideAssistContent = _class.instanceMethodId(
    r'onProvideAssistContent',
    r'(Landroid/app/assist/AssistContent;)V',
  );

  static final _onProvideAssistContent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onProvideAssistContent(android.app.assist.AssistContent assistContent)`
  void onProvideAssistContent(
    jni$_.JObject? assistContent,
  ) {
    final _$assistContent = assistContent?.reference ?? jni$_.jNullReference;
    _onProvideAssistContent(
            reference.pointer,
            _id_onProvideAssistContent as jni$_.JMethodIDPtr,
            _$assistContent.pointer)
        .check();
  }

  static final _id_onGetDirectActions = _class.instanceMethodId(
    r'onGetDirectActions',
    r'(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onGetDirectActions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)`
  void onGetDirectActions(
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$cancellationSignal =
        cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onGetDirectActions(
            reference.pointer,
            _id_onGetDirectActions as jni$_.JMethodIDPtr,
            _$cancellationSignal.pointer,
            _$consumer.pointer)
        .check();
  }

  static final _id_onPerformDirectAction = _class.instanceMethodId(
    r'onPerformDirectAction',
    r'(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onPerformDirectAction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)`
  void onPerformDirectAction(
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$cancellationSignal =
        cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onPerformDirectAction(
            reference.pointer,
            _id_onPerformDirectAction as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$bundle.pointer,
            _$cancellationSignal.pointer,
            _$consumer.pointer)
        .check();
  }

  static final _id_requestShowKeyboardShortcuts = _class.instanceMethodId(
    r'requestShowKeyboardShortcuts',
    r'()V',
  );

  static final _requestShowKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final void requestShowKeyboardShortcuts()`
  void requestShowKeyboardShortcuts() {
    _requestShowKeyboardShortcuts(reference.pointer,
            _id_requestShowKeyboardShortcuts as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_dismissKeyboardShortcutsHelper = _class.instanceMethodId(
    r'dismissKeyboardShortcutsHelper',
    r'()V',
  );

  static final _dismissKeyboardShortcutsHelper =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final void dismissKeyboardShortcutsHelper()`
  void dismissKeyboardShortcutsHelper() {
    _dismissKeyboardShortcutsHelper(reference.pointer,
            _id_dismissKeyboardShortcutsHelper as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onProvideKeyboardShortcuts = _class.instanceMethodId(
    r'onProvideKeyboardShortcuts',
    r'(Ljava/util/List;Landroid/view/Menu;I)V',
  );

  static final _onProvideKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int)>();

  /// from: `public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)`
  void onProvideKeyboardShortcuts(
    jni$_.JList<jni$_.JObject?>? list,
    jni$_.JObject? menu,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onProvideKeyboardShortcuts(
            reference.pointer,
            _id_onProvideKeyboardShortcuts as jni$_.JMethodIDPtr,
            _$list.pointer,
            _$menu.pointer,
            i)
        .check();
  }

  static final _id_showAssist = _class.instanceMethodId(
    r'showAssist',
    r'(Landroid/os/Bundle;)Z',
  );

  static final _showAssist = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean showAssist(android.os.Bundle bundle)`
  bool showAssist(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showAssist(reference.pointer, _id_showAssist as jni$_.JMethodIDPtr,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_reportFullyDrawn = _class.instanceMethodId(
    r'reportFullyDrawn',
    r'()V',
  );

  static final _reportFullyDrawn = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void reportFullyDrawn()`
  void reportFullyDrawn() {
    _reportFullyDrawn(
            reference.pointer, _id_reportFullyDrawn as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onMultiWindowModeChanged = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onMultiWindowModeChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onMultiWindowModeChanged(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onMultiWindowModeChanged(
            reference.pointer,
            _id_onMultiWindowModeChanged as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$configuration.pointer)
        .check();
  }

  static final _id_onMultiWindowModeChanged$1 = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(Z)V',
  );

  static final _onMultiWindowModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onMultiWindowModeChanged(boolean z)`
  void onMultiWindowModeChanged$1(
    bool z,
  ) {
    _onMultiWindowModeChanged$1(reference.pointer,
            _id_onMultiWindowModeChanged$1 as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isInMultiWindowMode = _class.instanceMethodId(
    r'isInMultiWindowMode',
    r'()Z',
  );

  static final _isInMultiWindowMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isInMultiWindowMode()`
  bool isInMultiWindowMode() {
    return _isInMultiWindowMode(
            reference.pointer, _id_isInMultiWindowMode as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onPictureInPictureModeChanged = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onPictureInPictureModeChanged =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<
                              (jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onPictureInPictureModeChanged(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onPictureInPictureModeChanged(
            reference.pointer,
            _id_onPictureInPictureModeChanged as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$configuration.pointer)
        .check();
  }

  static final _id_onPictureInPictureUiStateChanged = _class.instanceMethodId(
    r'onPictureInPictureUiStateChanged',
    r'(Landroid/app/PictureInPictureUiState;)V',
  );

  static final _onPictureInPictureUiStateChanged =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)`
  void onPictureInPictureUiStateChanged(
    jni$_.JObject? pictureInPictureUiState,
  ) {
    final _$pictureInPictureUiState =
        pictureInPictureUiState?.reference ?? jni$_.jNullReference;
    _onPictureInPictureUiStateChanged(
            reference.pointer,
            _id_onPictureInPictureUiStateChanged as jni$_.JMethodIDPtr,
            _$pictureInPictureUiState.pointer)
        .check();
  }

  static final _id_onPictureInPictureModeChanged$1 = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(Z)V',
  );

  static final _onPictureInPictureModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onPictureInPictureModeChanged(boolean z)`
  void onPictureInPictureModeChanged$1(
    bool z,
  ) {
    _onPictureInPictureModeChanged$1(
            reference.pointer,
            _id_onPictureInPictureModeChanged$1 as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isInPictureInPictureMode = _class.instanceMethodId(
    r'isInPictureInPictureMode',
    r'()Z',
  );

  static final _isInPictureInPictureMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isInPictureInPictureMode()`
  bool isInPictureInPictureMode() {
    return _isInPictureInPictureMode(reference.pointer,
            _id_isInPictureInPictureMode as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_enterPictureInPictureMode = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'()V',
  );

  static final _enterPictureInPictureMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void enterPictureInPictureMode()`
  void enterPictureInPictureMode() {
    _enterPictureInPictureMode(reference.pointer,
            _id_enterPictureInPictureMode as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_enterPictureInPictureMode$1 = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'(Landroid/app/PictureInPictureParams;)Z',
  );

  static final _enterPictureInPictureMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)`
  bool enterPictureInPictureMode$1(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams =
        pictureInPictureParams?.reference ?? jni$_.jNullReference;
    return _enterPictureInPictureMode$1(
            reference.pointer,
            _id_enterPictureInPictureMode$1 as jni$_.JMethodIDPtr,
            _$pictureInPictureParams.pointer)
        .boolean;
  }

  static final _id_setPictureInPictureParams = _class.instanceMethodId(
    r'setPictureInPictureParams',
    r'(Landroid/app/PictureInPictureParams;)V',
  );

  static final _setPictureInPictureParams = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)`
  void setPictureInPictureParams(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams =
        pictureInPictureParams?.reference ?? jni$_.jNullReference;
    _setPictureInPictureParams(
            reference.pointer,
            _id_setPictureInPictureParams as jni$_.JMethodIDPtr,
            _$pictureInPictureParams.pointer)
        .check();
  }

  static final _id_getMaxNumPictureInPictureActions = _class.instanceMethodId(
    r'getMaxNumPictureInPictureActions',
    r'()I',
  );

  static final _getMaxNumPictureInPictureActions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public int getMaxNumPictureInPictureActions()`
  int getMaxNumPictureInPictureActions() {
    return _getMaxNumPictureInPictureActions(reference.pointer,
            _id_getMaxNumPictureInPictureActions as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_onPictureInPictureRequested = _class.instanceMethodId(
    r'onPictureInPictureRequested',
    r'()Z',
  );

  static final _onPictureInPictureRequested =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean onPictureInPictureRequested()`
  bool onPictureInPictureRequested() {
    return _onPictureInPictureRequested(reference.pointer,
            _id_onPictureInPictureRequested as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_requestFullscreenMode = _class.instanceMethodId(
    r'requestFullscreenMode',
    r'(ILandroid/os/OutcomeReceiver;)V',
  );

  static final _requestFullscreenMode = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void requestFullscreenMode(int i, android.os.OutcomeReceiver outcomeReceiver)`
  void requestFullscreenMode(
    int i,
    jni$_.JObject? outcomeReceiver,
  ) {
    final _$outcomeReceiver =
        outcomeReceiver?.reference ?? jni$_.jNullReference;
    _requestFullscreenMode(
            reference.pointer,
            _id_requestFullscreenMode as jni$_.JMethodIDPtr,
            i,
            _$outcomeReceiver.pointer)
        .check();
  }

  static final _id_setShouldDockBigOverlays = _class.instanceMethodId(
    r'setShouldDockBigOverlays',
    r'(Z)V',
  );

  static final _setShouldDockBigOverlays = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShouldDockBigOverlays(boolean z)`
  void setShouldDockBigOverlays(
    bool z,
  ) {
    _setShouldDockBigOverlays(reference.pointer,
            _id_setShouldDockBigOverlays as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_shouldDockBigOverlays = _class.instanceMethodId(
    r'shouldDockBigOverlays',
    r'()Z',
  );

  static final _shouldDockBigOverlays = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean shouldDockBigOverlays()`
  bool shouldDockBigOverlays() {
    return _shouldDockBigOverlays(
            reference.pointer, _id_shouldDockBigOverlays as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r'onConfigurationChanged',
    r'(Landroid/content/res/Configuration;)V',
  );

  static final _onConfigurationChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onConfigurationChanged(android.content.res.Configuration configuration)`
  void onConfigurationChanged(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onConfigurationChanged(
            reference.pointer,
            _id_onConfigurationChanged as jni$_.JMethodIDPtr,
            _$configuration.pointer)
        .check();
  }

  static final _id_getChangingConfigurations = _class.instanceMethodId(
    r'getChangingConfigurations',
    r'()I',
  );

  static final _getChangingConfigurations = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getChangingConfigurations()`
  int getChangingConfigurations() {
    return _getChangingConfigurations(reference.pointer,
            _id_getChangingConfigurations as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLastNonConfigurationInstance = _class.instanceMethodId(
    r'getLastNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _getLastNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public java.lang.Object getLastNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLastNonConfigurationInstance() {
    return _getLastNonConfigurationInstance(reference.pointer,
            _id_getLastNonConfigurationInstance as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onRetainNonConfigurationInstance = _class.instanceMethodId(
    r'onRetainNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _onRetainNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public java.lang.Object onRetainNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onRetainNonConfigurationInstance() {
    return _onRetainNonConfigurationInstance(reference.pointer,
            _id_onRetainNonConfigurationInstance as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onTrimMemory = _class.instanceMethodId(
    r'onTrimMemory',
    r'(I)V',
  );

  static final _onTrimMemory = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTrimMemory(int i)`
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, _id_onTrimMemory as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getFragmentManager = _class.instanceMethodId(
    r'getFragmentManager',
    r'()Landroid/app/FragmentManager;',
  );

  static final _getFragmentManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.FragmentManager getFragmentManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFragmentManager() {
    return _getFragmentManager(
            reference.pointer, _id_getFragmentManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onAttachFragment = _class.instanceMethodId(
    r'onAttachFragment',
    r'(Landroid/app/Fragment;)V',
  );

  static final _onAttachFragment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onAttachFragment(android.app.Fragment fragment)`
  void onAttachFragment(
    jni$_.JObject? fragment,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    _onAttachFragment(reference.pointer,
            _id_onAttachFragment as jni$_.JMethodIDPtr, _$fragment.pointer)
        .check();
  }

  static final _id_managedQuery = _class.instanceMethodId(
    r'managedQuery',
    r'(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _managedQuery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? managedQuery(
    jni$_.JObject? uri,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JString? string,
    jni$_.JArray<jni$_.JString?>? strings1,
    jni$_.JString? string1,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$strings1 = strings1?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _managedQuery(
            reference.pointer,
            _id_managedQuery as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$strings.pointer,
            _$string.pointer,
            _$strings1.pointer,
            _$string1.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startManagingCursor = _class.instanceMethodId(
    r'startManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _startManagingCursor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startManagingCursor(android.database.Cursor cursor)`
  void startManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _startManagingCursor(reference.pointer,
            _id_startManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer)
        .check();
  }

  static final _id_stopManagingCursor = _class.instanceMethodId(
    r'stopManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _stopManagingCursor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void stopManagingCursor(android.database.Cursor cursor)`
  void stopManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _stopManagingCursor(reference.pointer,
            _id_stopManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer)
        .check();
  }

  static final _id_findViewById = _class.instanceMethodId(
    r'findViewById',
    r'(I)Landroid/view/View;',
  );

  static final _findViewById = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public T findViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? findViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _findViewById(
            reference.pointer, _id_findViewById as jni$_.JMethodIDPtr, i)
        .object<$T?>(T.nullableType);
  }

  static final _id_requireViewById = _class.instanceMethodId(
    r'requireViewById',
    r'(I)Landroid/view/View;',
  );

  static final _requireViewById = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final T requireViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? requireViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _requireViewById(
            reference.pointer, _id_requireViewById as jni$_.JMethodIDPtr, i)
        .object<$T?>(T.nullableType);
  }

  static final _id_getActionBar = _class.instanceMethodId(
    r'getActionBar',
    r'()Landroid/app/ActionBar;',
  );

  static final _getActionBar = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.ActionBar getActionBar()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getActionBar() {
    return _getActionBar(
            reference.pointer, _id_getActionBar as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setActionBar = _class.instanceMethodId(
    r'setActionBar',
    r'(Landroid/widget/Toolbar;)V',
  );

  static final _setActionBar = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setActionBar(android.widget.Toolbar toolbar)`
  void setActionBar(
    jni$_.JObject? toolbar,
  ) {
    final _$toolbar = toolbar?.reference ?? jni$_.jNullReference;
    _setActionBar(reference.pointer, _id_setActionBar as jni$_.JMethodIDPtr,
            _$toolbar.pointer)
        .check();
  }

  static final _id_setContentView = _class.instanceMethodId(
    r'setContentView',
    r'(I)V',
  );

  static final _setContentView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setContentView(int i)`
  void setContentView(
    int i,
  ) {
    _setContentView(
            reference.pointer, _id_setContentView as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setContentView$1 = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;)V',
  );

  static final _setContentView$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setContentView(android.view.View view)`
  void setContentView$1(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _setContentView$1(reference.pointer,
            _id_setContentView$1 as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_setContentView$2 = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _setContentView$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void setContentView$2(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _setContentView$2(
            reference.pointer,
            _id_setContentView$2 as jni$_.JMethodIDPtr,
            _$view.pointer,
            _$layoutParams.pointer)
        .check();
  }

  static final _id_addContentView = _class.instanceMethodId(
    r'addContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _addContentView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void addContentView(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _addContentView(reference.pointer, _id_addContentView as jni$_.JMethodIDPtr,
            _$view.pointer, _$layoutParams.pointer)
        .check();
  }

  static final _id_getContentTransitionManager = _class.instanceMethodId(
    r'getContentTransitionManager',
    r'()Landroid/transition/TransitionManager;',
  );

  static final _getContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public android.transition.TransitionManager getContentTransitionManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentTransitionManager() {
    return _getContentTransitionManager(reference.pointer,
            _id_getContentTransitionManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setContentTransitionManager = _class.instanceMethodId(
    r'setContentTransitionManager',
    r'(Landroid/transition/TransitionManager;)V',
  );

  static final _setContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setContentTransitionManager(android.transition.TransitionManager transitionManager)`
  void setContentTransitionManager(
    jni$_.JObject? transitionManager,
  ) {
    final _$transitionManager =
        transitionManager?.reference ?? jni$_.jNullReference;
    _setContentTransitionManager(
            reference.pointer,
            _id_setContentTransitionManager as jni$_.JMethodIDPtr,
            _$transitionManager.pointer)
        .check();
  }

  static final _id_getContentScene = _class.instanceMethodId(
    r'getContentScene',
    r'()Landroid/transition/Scene;',
  );

  static final _getContentScene = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.transition.Scene getContentScene()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentScene() {
    return _getContentScene(
            reference.pointer, _id_getContentScene as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setFinishOnTouchOutside = _class.instanceMethodId(
    r'setFinishOnTouchOutside',
    r'(Z)V',
  );

  static final _setFinishOnTouchOutside = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setFinishOnTouchOutside(boolean z)`
  void setFinishOnTouchOutside(
    bool z,
  ) {
    _setFinishOnTouchOutside(reference.pointer,
            _id_setFinishOnTouchOutside as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setDefaultKeyMode = _class.instanceMethodId(
    r'setDefaultKeyMode',
    r'(I)V',
  );

  static final _setDefaultKeyMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setDefaultKeyMode(int i)`
  void setDefaultKeyMode(
    int i,
  ) {
    _setDefaultKeyMode(
            reference.pointer, _id_setDefaultKeyMode as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyDown(reference.pointer, _id_onKeyDown as jni$_.JMethodIDPtr, i,
            _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r'onKeyLongPress',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyLongPress = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)`
  bool onKeyLongPress(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyLongPress(reference.pointer,
            _id_onKeyLongPress as jni$_.JMethodIDPtr, i, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyUp(reference.pointer, _id_onKeyUp as jni$_.JMethodIDPtr, i,
            _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r'onKeyMultiple',
    r'(IILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyMultiple = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)`
  bool onKeyMultiple(
    int i,
    int i1,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyMultiple(reference.pointer,
            _id_onKeyMultiple as jni$_.JMethodIDPtr, i, i1, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onBackPressed = _class.instanceMethodId(
    r'onBackPressed',
    r'()V',
  );

  static final _onBackPressed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onBackPressed()`
  void onBackPressed() {
    _onBackPressed(reference.pointer, _id_onBackPressed as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onKeyShortcut = _class.instanceMethodId(
    r'onKeyShortcut',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyShortcut = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)`
  bool onKeyShortcut(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyShortcut(reference.pointer,
            _id_onKeyShortcut as jni$_.JMethodIDPtr, i, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTouchEvent(reference.pointer,
            _id_onTouchEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTrackballEvent(reference.pointer,
            _id_onTrackballEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as jni$_.JMethodIDPtr,
            _$motionEvent.pointer)
        .boolean;
  }

  static final _id_onUserInteraction = _class.instanceMethodId(
    r'onUserInteraction',
    r'()V',
  );

  static final _onUserInteraction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onUserInteraction()`
  void onUserInteraction() {
    _onUserInteraction(
            reference.pointer, _id_onUserInteraction as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowAttributesChanged = _class.instanceMethodId(
    r'onWindowAttributesChanged',
    r'(Landroid/view/WindowManager$LayoutParams;)V',
  );

  static final _onWindowAttributesChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)`
  void onWindowAttributesChanged(
    jni$_.JObject? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _onWindowAttributesChanged(
            reference.pointer,
            _id_onWindowAttributesChanged as jni$_.JMethodIDPtr,
            _$layoutParams.pointer)
        .check();
  }

  static final _id_onContentChanged = _class.instanceMethodId(
    r'onContentChanged',
    r'()V',
  );

  static final _onContentChanged = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onContentChanged()`
  void onContentChanged() {
    _onContentChanged(
            reference.pointer, _id_onContentChanged as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r'onAttachedToWindow',
    r'()V',
  );

  static final _onAttachedToWindow = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onAttachedToWindow()`
  void onAttachedToWindow() {
    _onAttachedToWindow(
            reference.pointer, _id_onAttachedToWindow as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onDetachedFromWindow = _class.instanceMethodId(
    r'onDetachedFromWindow',
    r'()V',
  );

  static final _onDetachedFromWindow = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onDetachedFromWindow()`
  void onDetachedFromWindow() {
    _onDetachedFromWindow(
            reference.pointer, _id_onDetachedFromWindow as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_hasWindowFocus = _class.instanceMethodId(
    r'hasWindowFocus',
    r'()Z',
  );

  static final _hasWindowFocus = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean hasWindowFocus()`
  bool hasWindowFocus() {
    return _hasWindowFocus(
            reference.pointer, _id_hasWindowFocus as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r'dispatchKeyEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyEvent(reference.pointer,
            _id_dispatchKeyEvent as jni$_.JMethodIDPtr, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_dispatchKeyShortcutEvent = _class.instanceMethodId(
    r'dispatchKeyShortcutEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyShortcutEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyShortcutEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyShortcutEvent(
            reference.pointer,
            _id_dispatchKeyShortcutEvent as jni$_.JMethodIDPtr,
            _$keyEvent.pointer)
        .boolean;
  }

  static final _id_dispatchTouchEvent = _class.instanceMethodId(
    r'dispatchTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTouchEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTouchEvent(reference.pointer,
            _id_dispatchTouchEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer)
        .boolean;
  }

  static final _id_dispatchTrackballEvent = _class.instanceMethodId(
    r'dispatchTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTrackballEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTrackballEvent(
            reference.pointer,
            _id_dispatchTrackballEvent as jni$_.JMethodIDPtr,
            _$motionEvent.pointer)
        .boolean;
  }

  static final _id_dispatchGenericMotionEvent = _class.instanceMethodId(
    r'dispatchGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchGenericMotionEvent =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool dispatchGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchGenericMotionEvent(
            reference.pointer,
            _id_dispatchGenericMotionEvent as jni$_.JMethodIDPtr,
            _$motionEvent.pointer)
        .boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = _class.instanceMethodId(
    r'dispatchPopulateAccessibilityEvent',
    r'(Landroid/view/accessibility/AccessibilityEvent;)Z',
  );

  static final _dispatchPopulateAccessibilityEvent =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)`
  bool dispatchPopulateAccessibilityEvent(
    jni$_.JObject? accessibilityEvent,
  ) {
    final _$accessibilityEvent =
        accessibilityEvent?.reference ?? jni$_.jNullReference;
    return _dispatchPopulateAccessibilityEvent(
            reference.pointer,
            _id_dispatchPopulateAccessibilityEvent as jni$_.JMethodIDPtr,
            _$accessibilityEvent.pointer)
        .boolean;
  }

  static final _id_onCreatePanelView = _class.instanceMethodId(
    r'onCreatePanelView',
    r'(I)Landroid/view/View;',
  );

  static final _onCreatePanelView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.view.View onCreatePanelView(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreatePanelView(
    int i,
  ) {
    return _onCreatePanelView(
            reference.pointer, _id_onCreatePanelView as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreatePanelMenu = _class.instanceMethodId(
    r'onCreatePanelMenu',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onCreatePanelMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onCreatePanelMenu(int i, android.view.Menu menu)`
  bool onCreatePanelMenu(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreatePanelMenu(reference.pointer,
            _id_onCreatePanelMenu as jni$_.JMethodIDPtr, i, _$menu.pointer)
        .boolean;
  }

  static final _id_onPreparePanel = _class.instanceMethodId(
    r'onPreparePanel',
    r'(ILandroid/view/View;Landroid/view/Menu;)Z',
  );

  static final _onPreparePanel = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)`
  bool onPreparePanel(
    int i,
    jni$_.JObject? view,
    jni$_.JObject? menu,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPreparePanel(
            reference.pointer,
            _id_onPreparePanel as jni$_.JMethodIDPtr,
            i,
            _$view.pointer,
            _$menu.pointer)
        .boolean;
  }

  static final _id_onMenuOpened = _class.instanceMethodId(
    r'onMenuOpened',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onMenuOpened = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onMenuOpened(int i, android.view.Menu menu)`
  bool onMenuOpened(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onMenuOpened(reference.pointer,
            _id_onMenuOpened as jni$_.JMethodIDPtr, i, _$menu.pointer)
        .boolean;
  }

  static final _id_onMenuItemSelected = _class.instanceMethodId(
    r'onMenuItemSelected',
    r'(ILandroid/view/MenuItem;)Z',
  );

  static final _onMenuItemSelected = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)`
  bool onMenuItemSelected(
    int i,
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onMenuItemSelected(reference.pointer,
            _id_onMenuItemSelected as jni$_.JMethodIDPtr, i, _$menuItem.pointer)
        .boolean;
  }

  static final _id_onPanelClosed = _class.instanceMethodId(
    r'onPanelClosed',
    r'(ILandroid/view/Menu;)V',
  );

  static final _onPanelClosed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPanelClosed(int i, android.view.Menu menu)`
  void onPanelClosed(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onPanelClosed(reference.pointer, _id_onPanelClosed as jni$_.JMethodIDPtr,
            i, _$menu.pointer)
        .check();
  }

  static final _id_invalidateOptionsMenu = _class.instanceMethodId(
    r'invalidateOptionsMenu',
    r'()V',
  );

  static final _invalidateOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void invalidateOptionsMenu()`
  void invalidateOptionsMenu() {
    _invalidateOptionsMenu(
            reference.pointer, _id_invalidateOptionsMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateOptionsMenu = _class.instanceMethodId(
    r'onCreateOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onCreateOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onCreateOptionsMenu(android.view.Menu menu)`
  bool onCreateOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreateOptionsMenu(reference.pointer,
            _id_onCreateOptionsMenu as jni$_.JMethodIDPtr, _$menu.pointer)
        .boolean;
  }

  static final _id_onPrepareOptionsMenu = _class.instanceMethodId(
    r'onPrepareOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onPrepareOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onPrepareOptionsMenu(android.view.Menu menu)`
  bool onPrepareOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPrepareOptionsMenu(reference.pointer,
            _id_onPrepareOptionsMenu as jni$_.JMethodIDPtr, _$menu.pointer)
        .boolean;
  }

  static final _id_onOptionsItemSelected = _class.instanceMethodId(
    r'onOptionsItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onOptionsItemSelected = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onOptionsItemSelected(android.view.MenuItem menuItem)`
  bool onOptionsItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onOptionsItemSelected(reference.pointer,
            _id_onOptionsItemSelected as jni$_.JMethodIDPtr, _$menuItem.pointer)
        .boolean;
  }

  static final _id_onNavigateUp = _class.instanceMethodId(
    r'onNavigateUp',
    r'()Z',
  );

  static final _onNavigateUp = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean onNavigateUp()`
  bool onNavigateUp() {
    return _onNavigateUp(
            reference.pointer, _id_onNavigateUp as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onNavigateUpFromChild = _class.instanceMethodId(
    r'onNavigateUpFromChild',
    r'(Landroid/app/Activity;)Z',
  );

  static final _onNavigateUpFromChild = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onNavigateUpFromChild(android.app.Activity activity)`
  bool onNavigateUpFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    return _onNavigateUpFromChild(reference.pointer,
            _id_onNavigateUpFromChild as jni$_.JMethodIDPtr, _$activity.pointer)
        .boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = _class.instanceMethodId(
    r'onCreateNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onCreateNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onCreateNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder =
        taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onCreateNavigateUpTaskStack(
            reference.pointer,
            _id_onCreateNavigateUpTaskStack as jni$_.JMethodIDPtr,
            _$taskStackBuilder.pointer)
        .check();
  }

  static final _id_onPrepareNavigateUpTaskStack = _class.instanceMethodId(
    r'onPrepareNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onPrepareNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onPrepareNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder =
        taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onPrepareNavigateUpTaskStack(
            reference.pointer,
            _id_onPrepareNavigateUpTaskStack as jni$_.JMethodIDPtr,
            _$taskStackBuilder.pointer)
        .check();
  }

  static final _id_onOptionsMenuClosed = _class.instanceMethodId(
    r'onOptionsMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onOptionsMenuClosed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onOptionsMenuClosed(android.view.Menu menu)`
  void onOptionsMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onOptionsMenuClosed(reference.pointer,
            _id_onOptionsMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer)
        .check();
  }

  static final _id_openOptionsMenu = _class.instanceMethodId(
    r'openOptionsMenu',
    r'()V',
  );

  static final _openOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void openOptionsMenu()`
  void openOptionsMenu() {
    _openOptionsMenu(
            reference.pointer, _id_openOptionsMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_closeOptionsMenu = _class.instanceMethodId(
    r'closeOptionsMenu',
    r'()V',
  );

  static final _closeOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void closeOptionsMenu()`
  void closeOptionsMenu() {
    _closeOptionsMenu(
            reference.pointer, _id_closeOptionsMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateContextMenu = _class.instanceMethodId(
    r'onCreateContextMenu',
    r'(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V',
  );

  static final _onCreateContextMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)`
  void onCreateContextMenu(
    jni$_.JObject? contextMenu,
    jni$_.JObject? view,
    jni$_.JObject? contextMenuInfo,
  ) {
    final _$contextMenu = contextMenu?.reference ?? jni$_.jNullReference;
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$contextMenuInfo =
        contextMenuInfo?.reference ?? jni$_.jNullReference;
    _onCreateContextMenu(
            reference.pointer,
            _id_onCreateContextMenu as jni$_.JMethodIDPtr,
            _$contextMenu.pointer,
            _$view.pointer,
            _$contextMenuInfo.pointer)
        .check();
  }

  static final _id_registerForContextMenu = _class.instanceMethodId(
    r'registerForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _registerForContextMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerForContextMenu(android.view.View view)`
  void registerForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _registerForContextMenu(reference.pointer,
            _id_registerForContextMenu as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_unregisterForContextMenu = _class.instanceMethodId(
    r'unregisterForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _unregisterForContextMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterForContextMenu(android.view.View view)`
  void unregisterForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _unregisterForContextMenu(reference.pointer,
            _id_unregisterForContextMenu as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_openContextMenu = _class.instanceMethodId(
    r'openContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _openContextMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void openContextMenu(android.view.View view)`
  void openContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _openContextMenu(reference.pointer,
            _id_openContextMenu as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_closeContextMenu = _class.instanceMethodId(
    r'closeContextMenu',
    r'()V',
  );

  static final _closeContextMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void closeContextMenu()`
  void closeContextMenu() {
    _closeContextMenu(
            reference.pointer, _id_closeContextMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onContextItemSelected = _class.instanceMethodId(
    r'onContextItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onContextItemSelected = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onContextItemSelected(android.view.MenuItem menuItem)`
  bool onContextItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onContextItemSelected(reference.pointer,
            _id_onContextItemSelected as jni$_.JMethodIDPtr, _$menuItem.pointer)
        .boolean;
  }

  static final _id_onContextMenuClosed = _class.instanceMethodId(
    r'onContextMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onContextMenuClosed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onContextMenuClosed(android.view.Menu menu)`
  void onContextMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onContextMenuClosed(reference.pointer,
            _id_onContextMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer)
        .check();
  }

  static final _id_showDialog = _class.instanceMethodId(
    r'showDialog',
    r'(I)V',
  );

  static final _showDialog = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void showDialog(int i)`
  void showDialog(
    int i,
  ) {
    _showDialog(reference.pointer, _id_showDialog as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_showDialog$1 = _class.instanceMethodId(
    r'showDialog',
    r'(ILandroid/os/Bundle;)Z',
  );

  static final _showDialog$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean showDialog(int i, android.os.Bundle bundle)`
  bool showDialog$1(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showDialog$1(reference.pointer,
            _id_showDialog$1 as jni$_.JMethodIDPtr, i, _$bundle.pointer)
        .boolean;
  }

  static final _id_dismissDialog = _class.instanceMethodId(
    r'dismissDialog',
    r'(I)V',
  );

  static final _dismissDialog = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void dismissDialog(int i)`
  void dismissDialog(
    int i,
  ) {
    _dismissDialog(
            reference.pointer, _id_dismissDialog as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_removeDialog = _class.instanceMethodId(
    r'removeDialog',
    r'(I)V',
  );

  static final _removeDialog = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void removeDialog(int i)`
  void removeDialog(
    int i,
  ) {
    _removeDialog(reference.pointer, _id_removeDialog as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_onSearchRequested = _class.instanceMethodId(
    r'onSearchRequested',
    r'(Landroid/view/SearchEvent;)Z',
  );

  static final _onSearchRequested = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onSearchRequested(android.view.SearchEvent searchEvent)`
  bool onSearchRequested(
    jni$_.JObject? searchEvent,
  ) {
    final _$searchEvent = searchEvent?.reference ?? jni$_.jNullReference;
    return _onSearchRequested(reference.pointer,
            _id_onSearchRequested as jni$_.JMethodIDPtr, _$searchEvent.pointer)
        .boolean;
  }

  static final _id_onSearchRequested$1 = _class.instanceMethodId(
    r'onSearchRequested',
    r'()Z',
  );

  static final _onSearchRequested$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean onSearchRequested()`
  bool onSearchRequested$1() {
    return _onSearchRequested$1(
            reference.pointer, _id_onSearchRequested$1 as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSearchEvent = _class.instanceMethodId(
    r'getSearchEvent',
    r'()Landroid/view/SearchEvent;',
  );

  static final _getSearchEvent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.view.SearchEvent getSearchEvent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSearchEvent() {
    return _getSearchEvent(
            reference.pointer, _id_getSearchEvent as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startSearch = _class.instanceMethodId(
    r'startSearch',
    r'(Ljava/lang/String;ZLandroid/os/Bundle;Z)V',
  );

  static final _startSearch = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)`
  void startSearch(
    jni$_.JString? string,
    bool z,
    jni$_.JObject? bundle,
    bool z1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startSearch(reference.pointer, _id_startSearch as jni$_.JMethodIDPtr,
            _$string.pointer, z ? 1 : 0, _$bundle.pointer, z1 ? 1 : 0)
        .check();
  }

  static final _id_triggerSearch = _class.instanceMethodId(
    r'triggerSearch',
    r'(Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _triggerSearch = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void triggerSearch(java.lang.String string, android.os.Bundle bundle)`
  void triggerSearch(
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _triggerSearch(reference.pointer, _id_triggerSearch as jni$_.JMethodIDPtr,
            _$string.pointer, _$bundle.pointer)
        .check();
  }

  static final _id_takeKeyEvents = _class.instanceMethodId(
    r'takeKeyEvents',
    r'(Z)V',
  );

  static final _takeKeyEvents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void takeKeyEvents(boolean z)`
  void takeKeyEvents(
    bool z,
  ) {
    _takeKeyEvents(reference.pointer, _id_takeKeyEvents as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_requestWindowFeature = _class.instanceMethodId(
    r'requestWindowFeature',
    r'(I)Z',
  );

  static final _requestWindowFeature = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final boolean requestWindowFeature(int i)`
  bool requestWindowFeature(
    int i,
  ) {
    return _requestWindowFeature(reference.pointer,
            _id_requestWindowFeature as jni$_.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_setFeatureDrawableResource = _class.instanceMethodId(
    r'setFeatureDrawableResource',
    r'(II)V',
  );

  static final _setFeatureDrawableResource =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableResource(int i, int i1)`
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    _setFeatureDrawableResource(reference.pointer,
            _id_setFeatureDrawableResource as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_setFeatureDrawableUri = _class.instanceMethodId(
    r'setFeatureDrawableUri',
    r'(ILandroid/net/Uri;)V',
  );

  static final _setFeatureDrawableUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setFeatureDrawableUri(int i, android.net.Uri uri)`
  void setFeatureDrawableUri(
    int i,
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _setFeatureDrawableUri(reference.pointer,
            _id_setFeatureDrawableUri as jni$_.JMethodIDPtr, i, _$uri.pointer)
        .check();
  }

  static final _id_setFeatureDrawable = _class.instanceMethodId(
    r'setFeatureDrawable',
    r'(ILandroid/graphics/drawable/Drawable;)V',
  );

  static final _setFeatureDrawable = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)`
  void setFeatureDrawable(
    int i,
    jni$_.JObject? drawable,
  ) {
    final _$drawable = drawable?.reference ?? jni$_.jNullReference;
    _setFeatureDrawable(reference.pointer,
            _id_setFeatureDrawable as jni$_.JMethodIDPtr, i, _$drawable.pointer)
        .check();
  }

  static final _id_setFeatureDrawableAlpha = _class.instanceMethodId(
    r'setFeatureDrawableAlpha',
    r'(II)V',
  );

  static final _setFeatureDrawableAlpha = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableAlpha(int i, int i1)`
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    _setFeatureDrawableAlpha(reference.pointer,
            _id_setFeatureDrawableAlpha as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_getLayoutInflater = _class.instanceMethodId(
    r'getLayoutInflater',
    r'()Landroid/view/LayoutInflater;',
  );

  static final _getLayoutInflater = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.LayoutInflater getLayoutInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLayoutInflater() {
    return _getLayoutInflater(
            reference.pointer, _id_getLayoutInflater as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMenuInflater = _class.instanceMethodId(
    r'getMenuInflater',
    r'()Landroid/view/MenuInflater;',
  );

  static final _getMenuInflater = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.MenuInflater getMenuInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMenuInflater() {
    return _getMenuInflater(
            reference.pointer, _id_getMenuInflater as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;I)V',
  );

  static final _requestPermissions = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final void requestPermissions(java.lang.String[] strings, int i)`
  void requestPermissions(
    jni$_.JArray<jni$_.JString?>? strings,
    int i,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _requestPermissions(reference.pointer,
            _id_requestPermissions as jni$_.JMethodIDPtr, _$strings.pointer, i)
        .check();
  }

  static final _id_requestPermissions$1 = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;II)V',
  );

  static final _requestPermissions$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public final void requestPermissions(java.lang.String[] strings, int i, int i1)`
  void requestPermissions$1(
    jni$_.JArray<jni$_.JString?>? strings,
    int i,
    int i1,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _requestPermissions$1(
            reference.pointer,
            _id_requestPermissions$1 as jni$_.JMethodIDPtr,
            _$strings.pointer,
            i,
            i1)
        .check();
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)V',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
            i,
            _$strings.pointer,
            _$is$.pointer)
        .check();
  }

  static final _id_onRequestPermissionsResult$1 = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[II)V',
  );

  static final _onRequestPermissionsResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int)>();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is, int i1)`
  void onRequestPermissionsResult$1(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
    int i1,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult$1(
            reference.pointer,
            _id_onRequestPermissionsResult$1 as jni$_.JMethodIDPtr,
            i,
            _$strings.pointer,
            _$is$.pointer,
            i1)
        .check();
  }

  static final _id_shouldShowRequestPermissionRationale =
      _class.instanceMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Ljava/lang/String;)Z',
  );

  static final _shouldShowRequestPermissionRationale =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean shouldShowRequestPermissionRationale(java.lang.String string)`
  bool shouldShowRequestPermissionRationale(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _shouldShowRequestPermissionRationale(
            reference.pointer,
            _id_shouldShowRequestPermissionRationale as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_shouldShowRequestPermissionRationale$1 =
      _class.instanceMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Ljava/lang/String;I)Z',
  );

  static final _shouldShowRequestPermissionRationale$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public boolean shouldShowRequestPermissionRationale(java.lang.String string, int i)`
  bool shouldShowRequestPermissionRationale$1(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _shouldShowRequestPermissionRationale$1(
            reference.pointer,
            _id_shouldShowRequestPermissionRationale$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            i)
        .boolean;
  }

  static final _id_startActivityForResult = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;I)V',
  );

  static final _startActivityForResult = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i)`
  void startActivityForResult(
    jni$_.JObject? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityForResult(
            reference.pointer,
            _id_startActivityForResult as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i)
        .check();
  }

  static final _id_startActivityForResult$1 = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityForResult$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityForResult$1(
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityForResult$1(
            reference.pointer,
            _id_startActivityForResult$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .check();
  }

  static final _id_isActivityTransitionRunning = _class.instanceMethodId(
    r'isActivityTransitionRunning',
    r'()Z',
  );

  static final _isActivityTransitionRunning =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isActivityTransitionRunning()`
  bool isActivityTransitionRunning() {
    return _isActivityTransitionRunning(reference.pointer,
            _id_isActivityTransitionRunning as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_startIntentSenderForResult = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderForResult =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int)>();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderForResult(
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult(
            reference.pointer,
            _id_startIntentSenderForResult as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderForResult$1 = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderForResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderForResult$1(
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult$1(
            reference.pointer,
            _id_startIntentSenderForResult$1 as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivity(android.content.Intent intent)`
  void startActivity(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
            reference.pointer,
            _id_startActivity$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<jni$_.JObject?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer,
            _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer)
        .check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<jni$_.JObject?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
            reference.pointer,
            _id_startActivities$1 as jni$_.JMethodIDPtr,
            _$intents.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
            reference.pointer,
            _id_startIntentSender$1 as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivityIfNeeded = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;I)Z',
  );

  static final _startActivityIfNeeded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i)`
  bool startActivityIfNeeded(
    jni$_.JObject? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded(
            reference.pointer,
            _id_startActivityIfNeeded as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i)
        .boolean;
  }

  static final _id_startActivityIfNeeded$1 = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)Z',
  );

  static final _startActivityIfNeeded$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)`
  bool startActivityIfNeeded$1(
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded$1(
            reference.pointer,
            _id_startActivityIfNeeded$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;)Z',
  );

  static final _startNextMatchingActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent)`
  bool startNextMatchingActivity(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity(
            reference.pointer,
            _id_startNextMatchingActivity as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity$1 = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)Z',
  );

  static final _startNextMatchingActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)`
  bool startNextMatchingActivity$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity$1(
            reference.pointer,
            _id_startNextMatchingActivity$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_startActivityFromChild = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromChild = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)`
  void startActivityFromChild(
    Activity? activity,
    jni$_.JObject? intent,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromChild(
            reference.pointer,
            _id_startActivityFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intent.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromChild$1 = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromChild$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromChild$1(
    Activity? activity,
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromChild$1(
            reference.pointer,
            _id_startActivityFromChild$1 as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivityFromFragment = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromFragment = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)`
  void startActivityFromFragment(
    jni$_.JObject? fragment,
    jni$_.JObject? intent,
    int i,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment(
            reference.pointer,
            _id_startActivityFromFragment as jni$_.JMethodIDPtr,
            _$fragment.pointer,
            _$intent.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromFragment$1 = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromFragment$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromFragment$1(
    jni$_.JObject? fragment,
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment$1(
            reference.pointer,
            _id_startActivityFromFragment$1 as jni$_.JMethodIDPtr,
            _$fragment.pointer,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .check();
  }

  static final _id_startIntentSenderFromChild = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderFromChild =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int)>();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderFromChild(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild(
            reference.pointer,
            _id_startIntentSenderFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderFromChild$1 = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderFromChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderFromChild$1(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild$1(
            reference.pointer,
            _id_startIntentSenderFromChild$1 as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3,
            _$bundle.pointer)
        .check();
  }

  static final _id_overrideActivityTransition = _class.instanceMethodId(
    r'overrideActivityTransition',
    r'(III)V',
  );

  static final _overrideActivityTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void overrideActivityTransition(int i, int i1, int i2)`
  void overrideActivityTransition(
    int i,
    int i1,
    int i2,
  ) {
    _overrideActivityTransition(reference.pointer,
            _id_overrideActivityTransition as jni$_.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_overrideActivityTransition$1 = _class.instanceMethodId(
    r'overrideActivityTransition',
    r'(IIII)V',
  );

  static final _overrideActivityTransition$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void overrideActivityTransition(int i, int i1, int i2, int i3)`
  void overrideActivityTransition$1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _overrideActivityTransition$1(
            reference.pointer,
            _id_overrideActivityTransition$1 as jni$_.JMethodIDPtr,
            i,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_clearOverrideActivityTransition = _class.instanceMethodId(
    r'clearOverrideActivityTransition',
    r'(I)V',
  );

  static final _clearOverrideActivityTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void clearOverrideActivityTransition(int i)`
  void clearOverrideActivityTransition(
    int i,
  ) {
    _clearOverrideActivityTransition(reference.pointer,
            _id_clearOverrideActivityTransition as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_overridePendingTransition = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(II)V',
  );

  static final _overridePendingTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1)`
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    _overridePendingTransition(reference.pointer,
            _id_overridePendingTransition as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_overridePendingTransition$1 = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(III)V',
  );

  static final _overridePendingTransition$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1, int i2)`
  void overridePendingTransition$1(
    int i,
    int i1,
    int i2,
  ) {
    _overridePendingTransition$1(reference.pointer,
            _id_overridePendingTransition$1 as jni$_.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(I)V',
  );

  static final _setResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setResult(int i)`
  void setResult(
    int i,
  ) {
    _setResult(reference.pointer, _id_setResult as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setResult$1 = _class.instanceMethodId(
    r'setResult',
    r'(ILandroid/content/Intent;)V',
  );

  static final _setResult$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResult(int i, android.content.Intent intent)`
  void setResult$1(
    int i,
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setResult$1(reference.pointer, _id_setResult$1 as jni$_.JMethodIDPtr, i,
            _$intent.pointer)
        .check();
  }

  static final _id_getReferrer = _class.instanceMethodId(
    r'getReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _getReferrer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri getReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getReferrer() {
    return _getReferrer(
            reference.pointer, _id_getReferrer as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onProvideReferrer = _class.instanceMethodId(
    r'onProvideReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _onProvideReferrer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri onProvideReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onProvideReferrer() {
    return _onProvideReferrer(
            reference.pointer, _id_onProvideReferrer as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCallingPackage = _class.instanceMethodId(
    r'getCallingPackage',
    r'()Ljava/lang/String;',
  );

  static final _getCallingPackage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getCallingPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getCallingPackage() {
    return _getCallingPackage(
            reference.pointer, _id_getCallingPackage as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCallingActivity = _class.instanceMethodId(
    r'getCallingActivity',
    r'()Landroid/content/ComponentName;',
  );

  static final _getCallingActivity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ComponentName getCallingActivity()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCallingActivity() {
    return _getCallingActivity(
            reference.pointer, _id_getCallingActivity as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLaunchedFromUid = _class.instanceMethodId(
    r'getLaunchedFromUid',
    r'()I',
  );

  static final _getLaunchedFromUid = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLaunchedFromUid()`
  int getLaunchedFromUid() {
    return _getLaunchedFromUid(
            reference.pointer, _id_getLaunchedFromUid as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLaunchedFromPackage = _class.instanceMethodId(
    r'getLaunchedFromPackage',
    r'()Ljava/lang/String;',
  );

  static final _getLaunchedFromPackage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getLaunchedFromPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLaunchedFromPackage() {
    return _getLaunchedFromPackage(
            reference.pointer, _id_getLaunchedFromPackage as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getInitialCaller = _class.instanceMethodId(
    r'getInitialCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getInitialCaller = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.ComponentCaller getInitialCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getInitialCaller() {
    return _getInitialCaller(
            reference.pointer, _id_getInitialCaller as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCurrentCaller = _class.instanceMethodId(
    r'getCurrentCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getCurrentCaller = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.ComponentCaller getCurrentCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCurrentCaller() {
    return _getCurrentCaller(
            reference.pointer, _id_getCurrentCaller as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setVisible = _class.instanceMethodId(
    r'setVisible',
    r'(Z)V',
  );

  static final _setVisible = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setVisible(boolean z)`
  void setVisible(
    bool z,
  ) {
    _setVisible(
            reference.pointer, _id_setVisible as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isFinishing = _class.instanceMethodId(
    r'isFinishing',
    r'()Z',
  );

  static final _isFinishing = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isFinishing()`
  bool isFinishing() {
    return _isFinishing(
            reference.pointer, _id_isFinishing as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r'isDestroyed',
    r'()Z',
  );

  static final _isDestroyed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isDestroyed()`
  bool isDestroyed() {
    return _isDestroyed(
            reference.pointer, _id_isDestroyed as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isChangingConfigurations = _class.instanceMethodId(
    r'isChangingConfigurations',
    r'()Z',
  );

  static final _isChangingConfigurations = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isChangingConfigurations()`
  bool isChangingConfigurations() {
    return _isChangingConfigurations(reference.pointer,
            _id_isChangingConfigurations as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_recreate = _class.instanceMethodId(
    r'recreate',
    r'()V',
  );

  static final _recreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void recreate()`
  void recreate() {
    _recreate(reference.pointer, _id_recreate as jni$_.JMethodIDPtr).check();
  }

  static final _id_finish = _class.instanceMethodId(
    r'finish',
    r'()V',
  );

  static final _finish = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finish()`
  void finish() {
    _finish(reference.pointer, _id_finish as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishAffinity = _class.instanceMethodId(
    r'finishAffinity',
    r'()V',
  );

  static final _finishAffinity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finishAffinity()`
  void finishAffinity() {
    _finishAffinity(reference.pointer, _id_finishAffinity as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_finishFromChild = _class.instanceMethodId(
    r'finishFromChild',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishFromChild = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void finishFromChild(android.app.Activity activity)`
  void finishFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishFromChild(reference.pointer,
            _id_finishFromChild as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_finishAfterTransition = _class.instanceMethodId(
    r'finishAfterTransition',
    r'()V',
  );

  static final _finishAfterTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finishAfterTransition()`
  void finishAfterTransition() {
    _finishAfterTransition(
            reference.pointer, _id_finishAfterTransition as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_finishActivity = _class.instanceMethodId(
    r'finishActivity',
    r'(I)V',
  );

  static final _finishActivity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void finishActivity(int i)`
  void finishActivity(
    int i,
  ) {
    _finishActivity(
            reference.pointer, _id_finishActivity as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_finishActivityFromChild = _class.instanceMethodId(
    r'finishActivityFromChild',
    r'(Landroid/app/Activity;I)V',
  );

  static final _finishActivityFromChild = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void finishActivityFromChild(android.app.Activity activity, int i)`
  void finishActivityFromChild(
    Activity? activity,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishActivityFromChild(
            reference.pointer,
            _id_finishActivityFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            i)
        .check();
  }

  static final _id_finishAndRemoveTask = _class.instanceMethodId(
    r'finishAndRemoveTask',
    r'()V',
  );

  static final _finishAndRemoveTask = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finishAndRemoveTask()`
  void finishAndRemoveTask() {
    _finishAndRemoveTask(
            reference.pointer, _id_finishAndRemoveTask as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_releaseInstance = _class.instanceMethodId(
    r'releaseInstance',
    r'()Z',
  );

  static final _releaseInstance = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean releaseInstance()`
  bool releaseInstance() {
    return _releaseInstance(
            reference.pointer, _id_releaseInstance as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(IILandroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _onActivityResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityResult(int i, int i1, android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void onActivityResult(
    int i,
    int i1,
    jni$_.JObject? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller =
        componentCaller?.reference ?? jni$_.jNullReference;
    _onActivityResult(
            reference.pointer,
            _id_onActivityResult as jni$_.JMethodIDPtr,
            i,
            i1,
            _$intent.pointer,
            _$componentCaller.pointer)
        .check();
  }

  static final _id_onActivityReenter = _class.instanceMethodId(
    r'onActivityReenter',
    r'(ILandroid/content/Intent;)V',
  );

  static final _onActivityReenter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityReenter(int i, android.content.Intent intent)`
  void onActivityReenter(
    int i,
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _onActivityReenter(reference.pointer,
            _id_onActivityReenter as jni$_.JMethodIDPtr, i, _$intent.pointer)
        .check();
  }

  static final _id_createPendingResult = _class.instanceMethodId(
    r'createPendingResult',
    r'(ILandroid/content/Intent;I)Landroid/app/PendingIntent;',
  );

  static final _createPendingResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createPendingResult(
    int i,
    jni$_.JObject? intent,
    int i1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _createPendingResult(
            reference.pointer,
            _id_createPendingResult as jni$_.JMethodIDPtr,
            i,
            _$intent.pointer,
            i1)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setRequestedOrientation = _class.instanceMethodId(
    r'setRequestedOrientation',
    r'(I)V',
  );

  static final _setRequestedOrientation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRequestedOrientation(int i)`
  void setRequestedOrientation(
    int i,
  ) {
    _setRequestedOrientation(reference.pointer,
            _id_setRequestedOrientation as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getRequestedOrientation = _class.instanceMethodId(
    r'getRequestedOrientation',
    r'()I',
  );

  static final _getRequestedOrientation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getRequestedOrientation()`
  int getRequestedOrientation() {
    return _getRequestedOrientation(reference.pointer,
            _id_getRequestedOrientation as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getTaskId = _class.instanceMethodId(
    r'getTaskId',
    r'()I',
  );

  static final _getTaskId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getTaskId()`
  int getTaskId() {
    return _getTaskId(reference.pointer, _id_getTaskId as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_isTaskRoot = _class.instanceMethodId(
    r'isTaskRoot',
    r'()Z',
  );

  static final _isTaskRoot = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isTaskRoot()`
  bool isTaskRoot() {
    return _isTaskRoot(reference.pointer, _id_isTaskRoot as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveTaskToBack = _class.instanceMethodId(
    r'moveTaskToBack',
    r'(Z)Z',
  );

  static final _moveTaskToBack = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean moveTaskToBack(boolean z)`
  bool moveTaskToBack(
    bool z,
  ) {
    return _moveTaskToBack(reference.pointer,
            _id_moveTaskToBack as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_getLocalClassName = _class.instanceMethodId(
    r'getLocalClassName',
    r'()Ljava/lang/String;',
  );

  static final _getLocalClassName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getLocalClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLocalClassName() {
    return _getLocalClassName(
            reference.pointer, _id_getLocalClassName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r'getComponentName',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponentName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ComponentName getComponentName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getComponentName() {
    return _getComponentName(
            reference.pointer, _id_getComponentName as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPreferences = _class.instanceMethodId(
    r'getPreferences',
    r'(I)Landroid/content/SharedPreferences;',
  );

  static final _getPreferences = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.SharedPreferences getPreferences(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPreferences(
    int i,
  ) {
    return _getPreferences(
            reference.pointer, _id_getPreferences as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isLaunchedFromBubble = _class.instanceMethodId(
    r'isLaunchedFromBubble',
    r'()Z',
  );

  static final _isLaunchedFromBubble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isLaunchedFromBubble()`
  bool isLaunchedFromBubble() {
    return _isLaunchedFromBubble(
            reference.pointer, _id_isLaunchedFromBubble as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTitle = _class.instanceMethodId(
    r'setTitle',
    r'(Ljava/lang/CharSequence;)V',
  );

  static final _setTitle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setTitle(java.lang.CharSequence charSequence)`
  void setTitle(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    _setTitle(reference.pointer, _id_setTitle as jni$_.JMethodIDPtr,
            _$charSequence.pointer)
        .check();
  }

  static final _id_setTitle$1 = _class.instanceMethodId(
    r'setTitle',
    r'(I)V',
  );

  static final _setTitle$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitle(int i)`
  void setTitle$1(
    int i,
  ) {
    _setTitle$1(reference.pointer, _id_setTitle$1 as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setTitleColor = _class.instanceMethodId(
    r'setTitleColor',
    r'(I)V',
  );

  static final _setTitleColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitleColor(int i)`
  void setTitleColor(
    int i,
  ) {
    _setTitleColor(
            reference.pointer, _id_setTitleColor as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getTitle = _class.instanceMethodId(
    r'getTitle',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getTitle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.CharSequence getTitle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTitle() {
    return _getTitle(reference.pointer, _id_getTitle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getTitleColor = _class.instanceMethodId(
    r'getTitleColor',
    r'()I',
  );

  static final _getTitleColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getTitleColor()`
  int getTitleColor() {
    return _getTitleColor(
            reference.pointer, _id_getTitleColor as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setTaskDescription = _class.instanceMethodId(
    r'setTaskDescription',
    r'(Landroid/app/ActivityManager$TaskDescription;)V',
  );

  static final _setTaskDescription = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)`
  void setTaskDescription(
    jni$_.JObject? taskDescription,
  ) {
    final _$taskDescription =
        taskDescription?.reference ?? jni$_.jNullReference;
    _setTaskDescription(
            reference.pointer,
            _id_setTaskDescription as jni$_.JMethodIDPtr,
            _$taskDescription.pointer)
        .check();
  }

  static final _id_setProgressBarVisibility = _class.instanceMethodId(
    r'setProgressBarVisibility',
    r'(Z)V',
  );

  static final _setProgressBarVisibility = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarVisibility(boolean z)`
  void setProgressBarVisibility(
    bool z,
  ) {
    _setProgressBarVisibility(reference.pointer,
            _id_setProgressBarVisibility as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminateVisibility =
      _class.instanceMethodId(
    r'setProgressBarIndeterminateVisibility',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminateVisibility =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminateVisibility(boolean z)`
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    _setProgressBarIndeterminateVisibility(
            reference.pointer,
            _id_setProgressBarIndeterminateVisibility as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminate = _class.instanceMethodId(
    r'setProgressBarIndeterminate',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminate =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminate(boolean z)`
  void setProgressBarIndeterminate(
    bool z,
  ) {
    _setProgressBarIndeterminate(reference.pointer,
            _id_setProgressBarIndeterminate as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgress = _class.instanceMethodId(
    r'setProgress',
    r'(I)V',
  );

  static final _setProgress = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgress(int i)`
  void setProgress(
    int i,
  ) {
    _setProgress(reference.pointer, _id_setProgress as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setSecondaryProgress = _class.instanceMethodId(
    r'setSecondaryProgress',
    r'(I)V',
  );

  static final _setSecondaryProgress = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setSecondaryProgress(int i)`
  void setSecondaryProgress(
    int i,
  ) {
    _setSecondaryProgress(reference.pointer,
            _id_setSecondaryProgress as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setVolumeControlStream = _class.instanceMethodId(
    r'setVolumeControlStream',
    r'(I)V',
  );

  static final _setVolumeControlStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setVolumeControlStream(int i)`
  void setVolumeControlStream(
    int i,
  ) {
    _setVolumeControlStream(reference.pointer,
            _id_setVolumeControlStream as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getVolumeControlStream = _class.instanceMethodId(
    r'getVolumeControlStream',
    r'()I',
  );

  static final _getVolumeControlStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getVolumeControlStream()`
  int getVolumeControlStream() {
    return _getVolumeControlStream(
            reference.pointer, _id_getVolumeControlStream as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setMediaController = _class.instanceMethodId(
    r'setMediaController',
    r'(Landroid/media/session/MediaController;)V',
  );

  static final _setMediaController = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setMediaController(android.media.session.MediaController mediaController)`
  void setMediaController(
    jni$_.JObject? mediaController,
  ) {
    final _$mediaController =
        mediaController?.reference ?? jni$_.jNullReference;
    _setMediaController(
            reference.pointer,
            _id_setMediaController as jni$_.JMethodIDPtr,
            _$mediaController.pointer)
        .check();
  }

  static final _id_getMediaController = _class.instanceMethodId(
    r'getMediaController',
    r'()Landroid/media/session/MediaController;',
  );

  static final _getMediaController = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.media.session.MediaController getMediaController()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMediaController() {
    return _getMediaController(
            reference.pointer, _id_getMediaController as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_runOnUiThread = _class.instanceMethodId(
    r'runOnUiThread',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _runOnUiThread = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void runOnUiThread(java.lang.Runnable runnable)`
  void runOnUiThread(
    jni$_.JObject? runnable,
  ) {
    final _$runnable = runnable?.reference ?? jni$_.jNullReference;
    _runOnUiThread(reference.pointer, _id_runOnUiThread as jni$_.JMethodIDPtr,
            _$runnable.pointer)
        .check();
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r'onCreateView',
    r'(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView(
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView(
            reference.pointer,
            _id_onCreateView as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$context.pointer,
            _$attributeSet.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreateView$1 = _class.instanceMethodId(
    r'onCreateView',
    r'(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView$1(
    jni$_.JObject? view,
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView$1(
            reference.pointer,
            _id_onCreateView$1 as jni$_.JMethodIDPtr,
            _$view.pointer,
            _$string.pointer,
            _$context.pointer,
            _$attributeSet.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V',
  );

  static final _dump = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)`
  void dump(
    jni$_.JString? string,
    jni$_.JObject? fileDescriptor,
    jni$_.JObject? printWriter,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$fileDescriptor = fileDescriptor?.reference ?? jni$_.jNullReference;
    final _$printWriter = printWriter?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _dump(reference.pointer, _id_dump as jni$_.JMethodIDPtr, _$string.pointer,
            _$fileDescriptor.pointer, _$printWriter.pointer, _$strings.pointer)
        .check();
  }

  static final _id_isImmersive = _class.instanceMethodId(
    r'isImmersive',
    r'()Z',
  );

  static final _isImmersive = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isImmersive()`
  bool isImmersive() {
    return _isImmersive(
            reference.pointer, _id_isImmersive as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTranslucent = _class.instanceMethodId(
    r'setTranslucent',
    r'(Z)Z',
  );

  static final _setTranslucent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean setTranslucent(boolean z)`
  bool setTranslucent(
    bool z,
  ) {
    return _setTranslucent(reference.pointer,
            _id_setTranslucent as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_requestVisibleBehind = _class.instanceMethodId(
    r'requestVisibleBehind',
    r'(Z)Z',
  );

  static final _requestVisibleBehind = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean requestVisibleBehind(boolean z)`
  bool requestVisibleBehind(
    bool z,
  ) {
    return _requestVisibleBehind(reference.pointer,
            _id_requestVisibleBehind as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_onVisibleBehindCanceled = _class.instanceMethodId(
    r'onVisibleBehindCanceled',
    r'()V',
  );

  static final _onVisibleBehindCanceled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onVisibleBehindCanceled()`
  void onVisibleBehindCanceled() {
    _onVisibleBehindCanceled(reference.pointer,
            _id_onVisibleBehindCanceled as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onEnterAnimationComplete = _class.instanceMethodId(
    r'onEnterAnimationComplete',
    r'()V',
  );

  static final _onEnterAnimationComplete = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onEnterAnimationComplete()`
  void onEnterAnimationComplete() {
    _onEnterAnimationComplete(reference.pointer,
            _id_onEnterAnimationComplete as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_setImmersive = _class.instanceMethodId(
    r'setImmersive',
    r'(Z)V',
  );

  static final _setImmersive = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setImmersive(boolean z)`
  void setImmersive(
    bool z,
  ) {
    _setImmersive(reference.pointer, _id_setImmersive as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setVrModeEnabled = _class.instanceMethodId(
    r'setVrModeEnabled',
    r'(ZLandroid/content/ComponentName;)V',
  );

  static final _setVrModeEnabled = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)`
  void setVrModeEnabled(
    bool z,
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    _setVrModeEnabled(
            reference.pointer,
            _id_setVrModeEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$componentName.pointer)
        .check();
  }

  static final _id_startActionMode = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _startActionMode = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode(reference.pointer,
            _id_startActionMode as jni$_.JMethodIDPtr, _$callback.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startActionMode$1 = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _startActionMode$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode$1(reference.pointer,
            _id_startActionMode$1 as jni$_.JMethodIDPtr, _$callback.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onWindowStartingActionMode = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode(
            reference.pointer,
            _id_onWindowStartingActionMode as jni$_.JMethodIDPtr,
            _$callback.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onWindowStartingActionMode$1 = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode$1(
            reference.pointer,
            _id_onWindowStartingActionMode$1 as jni$_.JMethodIDPtr,
            _$callback.pointer,
            i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onActionModeStarted = _class.instanceMethodId(
    r'onActionModeStarted',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeStarted = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActionModeStarted(android.view.ActionMode actionMode)`
  void onActionModeStarted(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeStarted(reference.pointer,
            _id_onActionModeStarted as jni$_.JMethodIDPtr, _$actionMode.pointer)
        .check();
  }

  static final _id_onActionModeFinished = _class.instanceMethodId(
    r'onActionModeFinished',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeFinished = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActionModeFinished(android.view.ActionMode actionMode)`
  void onActionModeFinished(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeFinished(
            reference.pointer,
            _id_onActionModeFinished as jni$_.JMethodIDPtr,
            _$actionMode.pointer)
        .check();
  }

  static final _id_shouldUpRecreateTask = _class.instanceMethodId(
    r'shouldUpRecreateTask',
    r'(Landroid/content/Intent;)Z',
  );

  static final _shouldUpRecreateTask = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean shouldUpRecreateTask(android.content.Intent intent)`
  bool shouldUpRecreateTask(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _shouldUpRecreateTask(reference.pointer,
            _id_shouldUpRecreateTask as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_navigateUpTo = _class.instanceMethodId(
    r'navigateUpTo',
    r'(Landroid/content/Intent;)Z',
  );

  static final _navigateUpTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean navigateUpTo(android.content.Intent intent)`
  bool navigateUpTo(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpTo(reference.pointer,
            _id_navigateUpTo as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_navigateUpToFromChild = _class.instanceMethodId(
    r'navigateUpToFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;)Z',
  );

  static final _navigateUpToFromChild = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)`
  bool navigateUpToFromChild(
    Activity? activity,
    jni$_.JObject? intent,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpToFromChild(
            reference.pointer,
            _id_navigateUpToFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intent.pointer)
        .boolean;
  }

  static final _id_getParentActivityIntent = _class.instanceMethodId(
    r'getParentActivityIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getParentActivityIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getParentActivityIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParentActivityIntent() {
    return _getParentActivityIntent(reference.pointer,
            _id_getParentActivityIntent as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setEnterSharedElementCallback = _class.instanceMethodId(
    r'setEnterSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setEnterSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setEnterSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback =
        sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setEnterSharedElementCallback(
            reference.pointer,
            _id_setEnterSharedElementCallback as jni$_.JMethodIDPtr,
            _$sharedElementCallback.pointer)
        .check();
  }

  static final _id_setExitSharedElementCallback = _class.instanceMethodId(
    r'setExitSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setExitSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setExitSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback =
        sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setExitSharedElementCallback(
            reference.pointer,
            _id_setExitSharedElementCallback as jni$_.JMethodIDPtr,
            _$sharedElementCallback.pointer)
        .check();
  }

  static final _id_postponeEnterTransition = _class.instanceMethodId(
    r'postponeEnterTransition',
    r'()V',
  );

  static final _postponeEnterTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void postponeEnterTransition()`
  void postponeEnterTransition() {
    _postponeEnterTransition(reference.pointer,
            _id_postponeEnterTransition as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_startPostponedEnterTransition = _class.instanceMethodId(
    r'startPostponedEnterTransition',
    r'()V',
  );

  static final _startPostponedEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public void startPostponedEnterTransition()`
  void startPostponedEnterTransition() {
    _startPostponedEnterTransition(reference.pointer,
            _id_startPostponedEnterTransition as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_requestDragAndDropPermissions = _class.instanceMethodId(
    r'requestDragAndDropPermissions',
    r'(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;',
  );

  static final _requestDragAndDropPermissions =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? requestDragAndDropPermissions(
    jni$_.JObject? dragEvent,
  ) {
    final _$dragEvent = dragEvent?.reference ?? jni$_.jNullReference;
    return _requestDragAndDropPermissions(
            reference.pointer,
            _id_requestDragAndDropPermissions as jni$_.JMethodIDPtr,
            _$dragEvent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startLockTask = _class.instanceMethodId(
    r'startLockTask',
    r'()V',
  );

  static final _startLockTask = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void startLockTask()`
  void startLockTask() {
    _startLockTask(reference.pointer, _id_startLockTask as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_stopLockTask = _class.instanceMethodId(
    r'stopLockTask',
    r'()V',
  );

  static final _stopLockTask = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void stopLockTask()`
  void stopLockTask() {
    _stopLockTask(reference.pointer, _id_stopLockTask as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_showLockTaskEscapeMessage = _class.instanceMethodId(
    r'showLockTaskEscapeMessage',
    r'()V',
  );

  static final _showLockTaskEscapeMessage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void showLockTaskEscapeMessage()`
  void showLockTaskEscapeMessage() {
    _showLockTaskEscapeMessage(reference.pointer,
            _id_showLockTaskEscapeMessage as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_setRecentsScreenshotEnabled = _class.instanceMethodId(
    r'setRecentsScreenshotEnabled',
    r'(Z)V',
  );

  static final _setRecentsScreenshotEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRecentsScreenshotEnabled(boolean z)`
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    _setRecentsScreenshotEnabled(reference.pointer,
            _id_setRecentsScreenshotEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setShowWhenLocked = _class.instanceMethodId(
    r'setShowWhenLocked',
    r'(Z)V',
  );

  static final _setShowWhenLocked = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShowWhenLocked(boolean z)`
  void setShowWhenLocked(
    bool z,
  ) {
    _setShowWhenLocked(reference.pointer,
            _id_setShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setInheritShowWhenLocked = _class.instanceMethodId(
    r'setInheritShowWhenLocked',
    r'(Z)V',
  );

  static final _setInheritShowWhenLocked = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setInheritShowWhenLocked(boolean z)`
  void setInheritShowWhenLocked(
    bool z,
  ) {
    _setInheritShowWhenLocked(reference.pointer,
            _id_setInheritShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setTurnScreenOn = _class.instanceMethodId(
    r'setTurnScreenOn',
    r'(Z)V',
  );

  static final _setTurnScreenOn = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTurnScreenOn(boolean z)`
  void setTurnScreenOn(
    bool z,
  ) {
    _setTurnScreenOn(reference.pointer,
            _id_setTurnScreenOn as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setAllowCrossUidActivitySwitchFromBelow =
      _class.instanceMethodId(
    r'setAllowCrossUidActivitySwitchFromBelow',
    r'(Z)V',
  );

  static final _setAllowCrossUidActivitySwitchFromBelow =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAllowCrossUidActivitySwitchFromBelow(boolean z)`
  void setAllowCrossUidActivitySwitchFromBelow(
    bool z,
  ) {
    _setAllowCrossUidActivitySwitchFromBelow(
            reference.pointer,
            _id_setAllowCrossUidActivitySwitchFromBelow as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_getOnBackInvokedDispatcher = _class.instanceMethodId(
    r'getOnBackInvokedDispatcher',
    r'()Landroid/window/OnBackInvokedDispatcher;',
  );

  static final _getOnBackInvokedDispatcher =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getOnBackInvokedDispatcher() {
    return _getOnBackInvokedDispatcher(reference.pointer,
            _id_getOnBackInvokedDispatcher as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerScreenCaptureCallback = _class.instanceMethodId(
    r'registerScreenCaptureCallback',
    r'(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V',
  );

  static final _registerScreenCaptureCallback =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerScreenCaptureCallback(java.util.concurrent.Executor executor, android.app.Activity$ScreenCaptureCallback screenCaptureCallback)`
  void registerScreenCaptureCallback(
    jni$_.JObject? executor,
    Activity$ScreenCaptureCallback? screenCaptureCallback,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$screenCaptureCallback =
        screenCaptureCallback?.reference ?? jni$_.jNullReference;
    _registerScreenCaptureCallback(
            reference.pointer,
            _id_registerScreenCaptureCallback as jni$_.JMethodIDPtr,
            _$executor.pointer,
            _$screenCaptureCallback.pointer)
        .check();
  }

  static final _id_unregisterScreenCaptureCallback = _class.instanceMethodId(
    r'unregisterScreenCaptureCallback',
    r'(Landroid/app/Activity$ScreenCaptureCallback;)V',
  );

  static final _unregisterScreenCaptureCallback =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterScreenCaptureCallback(android.app.Activity$ScreenCaptureCallback screenCaptureCallback)`
  void unregisterScreenCaptureCallback(
    Activity$ScreenCaptureCallback? screenCaptureCallback,
  ) {
    final _$screenCaptureCallback =
        screenCaptureCallback?.reference ?? jni$_.jNullReference;
    _unregisterScreenCaptureCallback(
            reference.pointer,
            _id_unregisterScreenCaptureCallback as jni$_.JMethodIDPtr,
            _$screenCaptureCallback.pointer)
        .check();
  }
}

final class $Activity$NullableType extends jni$_.JObjType<Activity?> {
  @jni$_.internal
  const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Activity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$NullableType) &&
        other is $Activity$NullableType;
  }
}

final class $Activity$Type extends jni$_.JObjType<Activity> {
  @jni$_.internal
  const $Activity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity fromReference(jni$_.JReference reference) => Activity.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$Type) && other is $Activity$Type;
  }
}

/// from: `android.content.Context$BindServiceFlags`
class Context$BindServiceFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context$BindServiceFlags> $type;

  @jni$_.internal
  Context$BindServiceFlags.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/Context$BindServiceFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$BindServiceFlags$NullableType();
  static const type = $Context$BindServiceFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/Context$BindServiceFlags;',
  );

  static final _of = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public android.content.Context$BindServiceFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Context$BindServiceFlags? of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni$_.JMethodIDPtr, j)
        .object<Context$BindServiceFlags?>(
            const $Context$BindServiceFlags$NullableType());
  }
}

final class $Context$BindServiceFlags$NullableType
    extends jni$_.JObjType<Context$BindServiceFlags?> {
  @jni$_.internal
  const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Context$BindServiceFlags.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$NullableType) &&
        other is $Context$BindServiceFlags$NullableType;
  }
}

final class $Context$BindServiceFlags$Type
    extends jni$_.JObjType<Context$BindServiceFlags> {
  @jni$_.internal
  const $Context$BindServiceFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags fromReference(jni$_.JReference reference) =>
      Context$BindServiceFlags.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType =>
      const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$Type) &&
        other is $Context$BindServiceFlags$Type;
  }
}

/// from: `android.content.Context`
class Context extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context> $type;

  @jni$_.internal
  Context.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$NullableType();
  static const type = $Context$Type();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESSIBILITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ALARM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPWIDGET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_OPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BATTERY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int BIND_ABOVE_CLIENT`
  static const BIND_ABOVE_CLIENT = 8;

  /// from: `static public final int BIND_ADJUST_WITH_ACTIVITY`
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: `static public final int BIND_ALLOW_ACTIVITY_STARTS`
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: `static public final int BIND_ALLOW_OOM_MANAGEMENT`
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: `static public final int BIND_AUTO_CREATE`
  static const BIND_AUTO_CREATE = 1;

  /// from: `static public final int BIND_DEBUG_UNBIND`
  static const BIND_DEBUG_UNBIND = 2;

  /// from: `static public final int BIND_EXTERNAL_SERVICE`
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: `static public final long BIND_EXTERNAL_SERVICE_LONG`
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: `static public final int BIND_IMPORTANT`
  static const BIND_IMPORTANT = 64;

  /// from: `static public final int BIND_INCLUDE_CAPABILITIES`
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: `static public final int BIND_NOT_FOREGROUND`
  static const BIND_NOT_FOREGROUND = 4;

  /// from: `static public final int BIND_NOT_PERCEPTIBLE`
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: `static public final int BIND_PACKAGE_ISOLATED_PROCESS`
  static const BIND_PACKAGE_ISOLATED_PROCESS = 16384;

  /// from: `static public final int BIND_SHARED_ISOLATED_PROCESS`
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: `static public final int BIND_WAIVE_PRIORITY`
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIOMETRIC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLOB_STORE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BUGREPORT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAPTIONING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CARRIER_CONFIG_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CLIPBOARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANION_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONSUMER_IR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTACT_KEYS_SERVICE = _class.staticFieldId(
    r'CONTACT_KEYS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTACT_KEYS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTACT_KEYS_SERVICE =>
      _id_CONTACT_KEYS_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CONTEXT_IGNORE_SECURITY`
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: `static public final int CONTEXT_INCLUDE_CODE`
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: `static public final int CONTEXT_RESTRICTED`
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r'CREDENTIAL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CREDENTIAL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_SERVICE =>
      _id_CREDENTIAL_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CROSS_PROFILE_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  /// from: `static public final int DEVICE_ID_DEFAULT`
  static const DEVICE_ID_DEFAULT = 0;

  /// from: `static public final int DEVICE_ID_INVALID`
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r'DEVICE_LOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_LOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_POLICY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_HASH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOMAIN_VERIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOWNLOAD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DROPBOX_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EUICC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FILE_INTEGRITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FINGERPRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GAME_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r'GRAMMATICAL_INFLECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HARDWARE_PROPERTIES_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r'HEALTHCONNECT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTHCONNECT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_METHOD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IPSEC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_SCHEDULER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KEYGUARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAUNCHER_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAYOUT_INFLATER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCALE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_COMMUNICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_METRICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_PROJECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_ROUTER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_SESSION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MIDI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int MODE_APPEND`
  static const MODE_APPEND = 32768;

  /// from: `static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING`
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: `static public final int MODE_MULTI_PROCESS`
  static const MODE_MULTI_PROCESS = 4;

  /// from: `static public final int MODE_NO_LOCALIZED_COLLATORS`
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: `static public final int MODE_PRIVATE`
  static const MODE_PRIVATE = 0;

  /// from: `static public final int MODE_WORLD_READABLE`
  static const MODE_WORLD_READABLE = 1;

  /// from: `static public final int MODE_WORLD_WRITEABLE`
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NSD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r'OVERLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String OVERLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get OVERLAY_SERVICE =>
      _id_OVERLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PEOPLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERFORMANCE_HINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_PERSISTENT_DATA_BLOCK_SERVICE = _class.staticFieldId(
    r'PERSISTENT_DATA_BLOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERSISTENT_DATA_BLOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERSISTENT_DATA_BLOCK_SERVICE =>
      _id_PERSISTENT_DATA_BLOCK_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POWER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PROFILING_SERVICE = _class.staticFieldId(
    r'PROFILING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROFILING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROFILING_SERVICE =>
      _id_PROFILING_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int RECEIVER_EXPORTED`
  static const RECEIVER_EXPORTED = 2;

  /// from: `static public final int RECEIVER_NOT_EXPORTED`
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: `static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RESTRICTIONS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ROLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECURITY_STATE_SERVICE = _class.staticFieldId(
    r'SECURITY_STATE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECURITY_STATE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECURITY_STATE_SERVICE =>
      _id_SECURITY_STATE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SENSOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHORTCUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS_BAR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYSTEM_HEALTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELECOM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_IMS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_CLASSIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INTERACTIVE_APP_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UI_MODE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USB_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r'VIRTUAL_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIRTUAL_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VPN_MANAGEMENT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WALLPAPER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_AWARE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_P2P_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_RTT_RANGING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WINDOW_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.AssetManager getAssets()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAssets() {
    return _getAssets(reference.pointer, _id_getAssets as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.Resources getResources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResources() {
    return _getResources(
            reference.pointer, _id_getResources as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.pm.PackageManager getPackageManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPackageManager() {
    return _getPackageManager(
            reference.pointer, _id_getPackageManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.ContentResolver getContentResolver()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.os.Looper getMainLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainLooper() {
    return _getMainLooper(
            reference.pointer, _id_getMainLooper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.concurrent.Executor getMainExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainExecutor() {
    return _getMainExecutor(
            reference.pointer, _id_getMainExecutor as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.Context getApplicationContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? getApplicationContext() {
    return _getApplicationContext(
            reference.pointer, _id_getApplicationContext as jni$_.JMethodIDPtr)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.CharSequence getText(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getText(
    int i,
  ) {
    return _getText(reference.pointer, _id_getText as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getString$1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String getString(int i, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString$1(
    int i,
    jni$_.JArray<jni$_.JObject?>? objects,
  ) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _getString$1(reference.pointer,
            _id_getString$1 as jni$_.JMethodIDPtr, i, _$objects.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'(I)I',
  );

  static final _getColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final int getColor(int i)`
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni$_.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.graphics.drawable.Drawable getDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDrawable(
    int i,
  ) {
    return _getDrawable(
            reference.pointer, _id_getDrawable as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.content.res.ColorStateList getColorStateList(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getColorStateList(
    int i,
  ) {
    return _getColorStateList(
            reference.pointer, _id_getColorStateList as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.Resources$Theme getTheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTheme() {
    return _getTheme(reference.pointer, _id_getTheme as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes(
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes(reference.pointer,
            _id_obtainStyledAttributes as jni$_.JMethodIDPtr, _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$1(
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$1(
            reference.pointer,
            _id_obtainStyledAttributes$1 as jni$_.JMethodIDPtr,
            i,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$2(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$2(
            reference.pointer,
            _id_obtainStyledAttributes$2 as jni$_.JMethodIDPtr,
            _$attributeSet.pointer,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$3(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
    int i,
    int i1,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$3(
            reference.pointer,
            _id_obtainStyledAttributes$3 as jni$_.JMethodIDPtr,
            _$attributeSet.pointer,
            _$is$.pointer,
            i,
            i1)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.ClassLoader getClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClassLoader() {
    return _getClassLoader(
            reference.pointer, _id_getClassLoader as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getOpPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getOpPackageName() {
    return _getOpPackageName(
            reference.pointer, _id_getOpPackageName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAttributionTag()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAttributionTag() {
    return _getAttributionTag(
            reference.pointer, _id_getAttributionTag as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.AttributionSource getAttributionSource()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAttributionSource() {
    return _getAttributionSource(
            reference.pointer, _id_getAttributionSource as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ContextParams getParams()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParams() {
    return _getParams(reference.pointer, _id_getParams as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.pm.ApplicationInfo getApplicationInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplicationInfo() {
    return _getApplicationInfo(
            reference.pointer, _id_getApplicationInfo as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageResourcePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageResourcePath() {
    return _getPackageResourcePath(
            reference.pointer, _id_getPackageResourcePath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageCodePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageCodePath() {
    return _getPackageCodePath(
            reference.pointer, _id_getPackageCodePath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSharedPreferences(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSharedPreferences(reference.pointer,
            _id_getSharedPreferences as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)`
  bool moveSharedPreferencesFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveSharedPreferencesFrom(
            reference.pointer,
            _id_moveSharedPreferencesFrom as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteSharedPreferences(java.lang.String string)`
  bool deleteSharedPreferences(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteSharedPreferences(reference.pointer,
            _id_deleteSharedPreferences as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.FileInputStream openFileInput(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileInput(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileInput(reference.pointer,
            _id_openFileInput as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileOutput(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileOutput(reference.pointer,
            _id_openFileOutput as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteFile(java.lang.String string)`
  bool deleteFile(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteFile(reference.pointer, _id_deleteFile as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getFileStreamPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFileStreamPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFileStreamPath(reference.pointer,
            _id_getFileStreamPath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getDataDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataDir() {
    return _getDataDir(reference.pointer, _id_getDataDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilesDir() {
    return _getFilesDir(
            reference.pointer, _id_getFilesDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getNoBackupFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
            reference.pointer, _id_getNoBackupFilesDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getExternalFilesDir(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalFilesDir(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDir(reference.pointer,
            _id_getExternalFilesDir as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalFilesDirs(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDirs(reference.pointer,
            _id_getExternalFilesDirs as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getObbDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getObbDir() {
    return _getObbDir(reference.pointer, _id_getObbDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getObbDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCacheDir() {
    return _getCacheDir(
            reference.pointer, _id_getCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getCodeCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCodeCacheDir() {
    return _getCodeCacheDir(
            reference.pointer, _id_getCodeCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getExternalCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalCacheDir() {
    return _getExternalCacheDir(
            reference.pointer, _id_getExternalCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getExternalCacheDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalCacheDirs() {
    return _getExternalCacheDirs(
            reference.pointer, _id_getExternalCacheDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getExternalMediaDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalMediaDirs() {
    return _getExternalMediaDirs(
            reference.pointer, _id_getExternalMediaDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String[] fileList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? fileList() {
    return _fileList(reference.pointer, _id_fileList as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract java.io.File getDir(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDir(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDir(reference.pointer, _id_getDir as jni$_.JMethodIDPtr,
            _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase(
            reference.pointer,
            _id_openOrCreateDatabase as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            _$cursorFactory.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase$1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase$1(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
    jni$_.JObject? databaseErrorHandler,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    final _$databaseErrorHandler =
        databaseErrorHandler?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase$1(
            reference.pointer,
            _id_openOrCreateDatabase$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            _$cursorFactory.pointer,
            _$databaseErrorHandler.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)`
  bool moveDatabaseFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveDatabaseFrom(
            reference.pointer,
            _id_moveDatabaseFrom as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteDatabase(java.lang.String string)`
  bool deleteDatabase(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteDatabase(reference.pointer,
            _id_deleteDatabase as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getDatabasePath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDatabasePath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDatabasePath(reference.pointer,
            _id_getDatabasePath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String[] databaseList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? databaseList() {
    return _databaseList(
            reference.pointer, _id_databaseList as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.graphics.drawable.Drawable getWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWallpaper() {
    return _getWallpaper(
            reference.pointer, _id_getWallpaper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.graphics.drawable.Drawable peekWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? peekWallpaper() {
    return _peekWallpaper(
            reference.pointer, _id_peekWallpaper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract int getWallpaperDesiredMinimumWidth()`
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer,
            _id_getWallpaperDesiredMinimumWidth as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract int getWallpaperDesiredMinimumHeight()`
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer,
            _id_getWallpaperDesiredMinimumHeight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setWallpaper(android.graphics.Bitmap bitmap)`
  void setWallpaper(
    jni$_.JObject? bitmap,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    _setWallpaper(reference.pointer, _id_setWallpaper as jni$_.JMethodIDPtr,
            _$bitmap.pointer)
        .check();
  }

  static final _id_setWallpaper$1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setWallpaper(java.io.InputStream inputStream)`
  void setWallpaper$1(
    jni$_.JObject? inputStream,
  ) {
    final _$inputStream = inputStream?.reference ?? jni$_.jNullReference;
    _setWallpaper$1(reference.pointer, _id_setWallpaper$1 as jni$_.JMethodIDPtr,
            _$inputStream.pointer)
        .check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void clearWallpaper()`
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivity(android.content.Intent intent)`
  void startActivity(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
            reference.pointer,
            _id_startActivity$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<jni$_.JObject?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer,
            _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer)
        .check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<jni$_.JObject?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
            reference.pointer,
            _id_startActivities$1 as jni$_.JMethodIDPtr,
            _$intents.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
            reference.pointer,
            _id_startIntentSender$1 as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent)`
  void sendBroadcast(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_sendBroadcast$1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendBroadcast$1(
    jni$_.JObject? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcast$1(
            reference.pointer,
            _id_sendBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendBroadcastWithMultiplePermissions =
      _class.instanceMethodId(
    r'sendBroadcastWithMultiplePermissions',
    r'(Landroid/content/Intent;[Ljava/lang/String;)V',
  );

  static final _sendBroadcastWithMultiplePermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)`
  void sendBroadcastWithMultiplePermissions(
    jni$_.JObject? intent,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _sendBroadcastWithMultiplePermissions(
            reference.pointer,
            _id_sendBroadcastWithMultiplePermissions as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$strings.pointer)
        .check();
  }

  static final _id_sendBroadcast$2 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendBroadcast$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendBroadcast$2(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendBroadcast$2(
            reference.pointer,
            _id_sendBroadcast$2 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendOrderedBroadcast(
    jni$_.JObject? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast(
            reference.pointer,
            _id_sendOrderedBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendOrderedBroadcast$1(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$1(
            reference.pointer,
            _id_sendOrderedBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcast$2(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$2(
            reference.pointer,
            _id_sendOrderedBroadcast$2 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$3 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)`
  void sendOrderedBroadcast$3(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle1 = bundle1?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$3(
            reference.pointer,
            _id_sendOrderedBroadcast$3 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$bundle.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle1.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser(
            reference.pointer,
            _id_sendBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser$1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)`
  void sendBroadcastAsUser$1(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser$1(
            reference.pointer,
            _id_sendBroadcastAsUser$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$string.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$4 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$4 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)`
  void sendOrderedBroadcast$4(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string2,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$4(
            reference.pointer,
            _id_sendOrderedBroadcast$4 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$string1.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string2.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyBroadcast(android.content.Intent intent)`
  void sendStickyBroadcast(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast(reference.pointer,
            _id_sendStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast$1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)`
  void sendStickyBroadcast$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast$1(
            reference.pointer,
            _id_sendStickyBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcast(
    jni$_.JObject? intent,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcast(
            reference.pointer,
            _id_sendStickyOrderedBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void removeStickyBroadcast(android.content.Intent intent)`
  void removeStickyBroadcast(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcast(reference.pointer,
            _id_removeStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer)
        .check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendStickyBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcastAsUser(
            reference.pointer,
            _id_sendStickyBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendStickyOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void removeStickyBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcastAsUser(
            reference.pointer,
            _id_removeStickyBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver(
            reference.pointer,
            _id_registerReceiver as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$1(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver$1(
            reference.pointer,
            _id_registerReceiver$1 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$2(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$2(
            reference.pointer,
            _id_registerReceiver$2 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            _$string.pointer,
            _$handler.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$3(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$3(
            reference.pointer,
            _id_registerReceiver$3 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            _$string.pointer,
            _$handler.pointer,
            i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)`
  void unregisterReceiver(
    jni$_.JObject? broadcastReceiver,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    _unregisterReceiver(
            reference.pointer,
            _id_unregisterReceiver as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer)
        .check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.ComponentName startService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startService(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startService(reference.pointer,
            _id_startService as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startForegroundService(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startForegroundService(reference.pointer,
            _id_startForegroundService as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean stopService(android.content.Intent intent)`
  bool stopService(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _stopService(reference.pointer,
            _id_stopService as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)`
  bool bindService(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService(
            reference.pointer,
            _id_bindService as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            i)
        .boolean;
  }

  static final _id_bindService$1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z',
  );

  static final _bindService$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)`
  bool bindService$1(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    return _bindService$1(
            reference.pointer,
            _id_bindService$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            _$bindServiceFlags.pointer)
        .boolean;
  }

  static final _id_bindService$2 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$2(
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$2(
            reference.pointer,
            _id_bindService$2 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindService$3 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$3(
    jni$_.JObject? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$3(
            reference.pointer,
            _id_bindService$3 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bindServiceFlags.pointer,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService(
    jni$_.JObject? intent,
    int i,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService(
            reference.pointer,
            _id_bindIsolatedService as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$string.pointer,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService$1 = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService$1(
    jni$_.JObject? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService$1(
            reference.pointer,
            _id_bindIsolatedService$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bindServiceFlags.pointer,
            _$string.pointer,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)`
  bool bindServiceAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    int i,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser(
            reference.pointer,
            _id_bindServiceAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            i,
            _$userHandle.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser$1 = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)`
  bool bindServiceAsUser$1(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser$1(
            reference.pointer,
            _id_bindServiceAsUser$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            _$bindServiceFlags.pointer,
            _$userHandle.pointer)
        .boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)`
  void updateServiceGroup(
    jni$_.JObject? serviceConnection,
    int i,
    int i1,
  ) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _updateServiceGroup(
            reference.pointer,
            _id_updateServiceGroup as jni$_.JMethodIDPtr,
            _$serviceConnection.pointer,
            i,
            i1)
        .check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unbindService(android.content.ServiceConnection serviceConnection)`
  void unbindService(
    jni$_.JObject? serviceConnection,
  ) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _unbindService(reference.pointer, _id_unbindService as jni$_.JMethodIDPtr,
            _$serviceConnection.pointer)
        .check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)`
  bool startInstrumentation(
    jni$_.JObject? componentName,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startInstrumentation(
            reference.pointer,
            _id_startInstrumentation as jni$_.JMethodIDPtr,
            _$componentName.pointer,
            _$string.pointer,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSystemService$1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final T getSystemService(java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSystemService$1<$T extends jni$_.JObject?>(
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemService$1(reference.pointer,
            _id_getSystemService$1 as jni$_.JMethodIDPtr, _$class$.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String getSystemServiceName(java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSystemServiceName(
    jni$_.JObject? class$,
  ) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemServiceName(reference.pointer,
            _id_getSystemServiceName as jni$_.JMethodIDPtr, _$class$.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public abstract int checkPermission(java.lang.String string, int i, int i1)`
  int checkPermission(
    jni$_.JString? string,
    int i,
    int i1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkPermission(reference.pointer,
            _id_checkPermission as jni$_.JMethodIDPtr, _$string.pointer, i, i1)
        .integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkCallingPermission(java.lang.String string)`
  int checkCallingPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingPermission(reference.pointer,
            _id_checkCallingPermission as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkCallingOrSelfPermission(java.lang.String string)`
  int checkCallingOrSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfPermission(
            reference.pointer,
            _id_checkCallingOrSelfPermission as jni$_.JMethodIDPtr,
            _$string.pointer)
        .integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkSelfPermission(java.lang.String string)`
  int checkSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkSelfPermission(reference.pointer,
            _id_checkSelfPermission as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)`
  void enforcePermission(
    jni$_.JString? string,
    int i,
    int i1,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforcePermission(
            reference.pointer,
            _id_enforcePermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            i1,
            _$string1.pointer)
        .check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingPermission(
            reference.pointer,
            _id_enforceCallingPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingOrSelfPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfPermission(
            reference.pointer,
            _id_enforceCallingOrSelfPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void grantUriPermission(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _grantUriPermission(
            reference.pointer,
            _id_grantUriPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract void revokeUriPermission(android.net.Uri uri, int i)`
  void revokeUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission(reference.pointer,
            _id_revokeUriPermission as jni$_.JMethodIDPtr, _$uri.pointer, i)
        .check();
  }

  static final _id_revokeUriPermission$1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void revokeUriPermission$1(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission$1(
            reference.pointer,
            _id_revokeUriPermission$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            i)
        .check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int, int)>();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)`
  int checkUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkUriPermission(
            reference.pointer,
            _id_checkUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkContentUriPermissionFull = _class.instanceMethodId(
    r'checkContentUriPermissionFull',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkContentUriPermissionFull =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int)>();

  /// from: `public int checkContentUriPermissionFull(android.net.Uri uri, int i, int i1, int i2)`
  int checkContentUriPermissionFull(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkContentUriPermissionFull(
            reference.pointer,
            _id_checkContentUriPermissionFull as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int, int)>();

  /// from: `public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
    int i1,
    int i2,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkUriPermissions(
            reference.pointer,
            _id_checkUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i,
            i1,
            i2)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract int checkCallingUriPermission(android.net.Uri uri, int i)`
  int checkCallingUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermission(
            reference.pointer,
            _id_checkCallingUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermissions(
            reference.pointer,
            _id_checkCallingUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)`
  int checkCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermission(
            reference.pointer,
            _id_checkCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingOrSelfUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermissions(
            reference.pointer,
            _id_checkCallingOrSelfUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkUriPermission$1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)`
  int checkUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _checkUriPermission$1(
            reference.pointer,
            _id_checkUriPermission$1 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)`
  void enforceUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceUriPermission(
            reference.pointer,
            _id_enforceUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2,
            _$string.pointer)
        .check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingUriPermission(
            reference.pointer,
            _id_enforceCallingUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            _$string.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfUriPermission(
            reference.pointer,
            _id_enforceCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            _$string.pointer)
        .check();
  }

  static final _id_enforceUriPermission$1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)`
  void enforceUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    _enforceUriPermission$1(
            reference.pointer,
            _id_enforceUriPermission$1 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i,
            i1,
            i2,
            _$string2.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void revokeSelfPermissionOnKill(java.lang.String string)`
  void revokeSelfPermissionOnKill(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionOnKill(
            reference.pointer,
            _id_revokeSelfPermissionOnKill as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void revokeSelfPermissionsOnKill(java.util.Collection collection)`
  void revokeSelfPermissionsOnKill(
    jni$_.JObject? collection,
  ) {
    final _$collection = collection?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionsOnKill(
            reference.pointer,
            _id_revokeSelfPermissionsOnKill as jni$_.JMethodIDPtr,
            _$collection.pointer)
        .check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract android.content.Context createPackageContext(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createPackageContext(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createPackageContext(reference.pointer,
            _id_createPackageContext as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createContextForSplit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContextForSplit(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createContextForSplit(reference.pointer,
            _id_createContextForSplit as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createConfigurationContext(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    return _createConfigurationContext(
            reference.pointer,
            _id_createConfigurationContext as jni$_.JMethodIDPtr,
            _$configuration.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createDisplayContext(android.view.Display display)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDisplayContext(
    jni$_.JObject? display,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    return _createDisplayContext(reference.pointer,
            _id_createDisplayContext as jni$_.JMethodIDPtr, _$display.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r'createDeviceContext',
    r'(I)Landroid/content/Context;',
  );

  static final _createDeviceContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Context createDeviceContext(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceContext(
    int i,
  ) {
    return _createDeviceContext(
            reference.pointer, _id_createDeviceContext as jni$_.JMethodIDPtr, i)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createWindowContext(int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext(reference.pointer,
            _id_createWindowContext as jni$_.JMethodIDPtr, i, _$bundle.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext$1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext$1(
    jni$_.JObject? display,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext$1(
            reference.pointer,
            _id_createWindowContext$1 as jni$_.JMethodIDPtr,
            _$display.pointer,
            i,
            _$bundle.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createContext(android.content.ContextParams contextParams)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContext(
    jni$_.JObject? contextParams,
  ) {
    final _$contextParams = contextParams?.reference ?? jni$_.jNullReference;
    return _createContext(reference.pointer,
            _id_createContext as jni$_.JMethodIDPtr, _$contextParams.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createAttributionContext(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createAttributionContext(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createAttributionContext(
            reference.pointer,
            _id_createAttributionContext as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceProtectedStorageContext =
      _class.instanceMethodId(
    r'createDeviceProtectedStorageContext',
    r'()Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract android.content.Context createDeviceProtectedStorageContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer,
            _id_createDeviceProtectedStorageContext as jni$_.JMethodIDPtr)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.Display getDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDisplay() {
    return _getDisplay(reference.pointer, _id_getDisplay as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r'getDeviceId',
    r'()I',
  );

  static final _getDeviceId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getDeviceId()`
  int getDeviceId() {
    return _getDeviceId(
            reference.pointer, _id_getDeviceId as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r'registerDeviceIdChangeListener',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V',
  );

  static final _registerDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)`
  void registerDeviceIdChangeListener(
    jni$_.JObject? executor,
    jni$_.JObject? intConsumer,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _registerDeviceIdChangeListener(
            reference.pointer,
            _id_registerDeviceIdChangeListener as jni$_.JMethodIDPtr,
            _$executor.pointer,
            _$intConsumer.pointer)
        .check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r'unregisterDeviceIdChangeListener',
    r'(Ljava/util/function/IntConsumer;)V',
  );

  static final _unregisterDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)`
  void unregisterDeviceIdChangeListener(
    jni$_.JObject? intConsumer,
  ) {
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _unregisterDeviceIdChangeListener(
            reference.pointer,
            _id_unregisterDeviceIdChangeListener as jni$_.JMethodIDPtr,
            _$intConsumer.pointer)
        .check();
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isRestricted()`
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isDeviceProtectedStorage()`
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(reference.pointer,
            _id_isDeviceProtectedStorage as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isUiContext()`
  bool isUiContext() {
    return _isUiContext(
            reference.pointer, _id_isUiContext as jni$_.JMethodIDPtr)
        .boolean;
  }
}

final class $Context$NullableType extends jni$_.JObjType<Context?> {
  @jni$_.internal
  const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Context.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$NullableType) &&
        other is $Context$NullableType;
  }
}

final class $Context$Type extends jni$_.JObjType<Context> {
  @jni$_.internal
  const $Context$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context fromReference(jni$_.JReference reference) => Context.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$Type) && other is $Context$Type;
  }
}
