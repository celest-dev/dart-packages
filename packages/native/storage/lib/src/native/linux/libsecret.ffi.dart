// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type
// ignore_for_file: unnecessary_non_null_assertion

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:native_storage/src/native/linux/glib.ffi.dart' as glib;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for Libsecret on Linux.
///
/// Regenerate bindings with `dart run ffigen --config=ffigen.libsecret.yaml`.
///
class Libsecret {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libsecret(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libsecret.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// enumerations from "secret-item.h"
  int secret_item_flags_get_type() {
    return _secret_item_flags_get_type();
  }

  late final _secret_item_flags_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'secret_item_flags_get_type');
  late final _secret_item_flags_get_type =
      _secret_item_flags_get_typePtr.asFunction<int Function()>();

  int secret_item_create_flags_get_type() {
    return _secret_item_create_flags_get_type();
  }

  late final _secret_item_create_flags_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'secret_item_create_flags_get_type');
  late final _secret_item_create_flags_get_type =
      _secret_item_create_flags_get_typePtr.asFunction<int Function()>();

  int secret_item_get_type() {
    return _secret_item_get_type();
  }

  late final _secret_item_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'secret_item_get_type');
  late final _secret_item_get_type =
      _secret_item_get_typePtr.asFunction<int Function()>();

  void secret_item_refresh(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_refresh(
      self,
    );
  }

  late final _secret_item_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SecretItem>)>>(
          'secret_item_refresh');
  late final _secret_item_refresh = _secret_item_refreshPtr
      .asFunction<void Function(ffi.Pointer<SecretItem>)>();

  void secret_item_create(
    ffi.Pointer<_SecretCollection> collection,
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    ffi.Pointer<pkg_ffi.Utf8> label,
    ffi.Pointer<_SecretValue> value,
    SecretItemCreateFlags flags,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_GObject> source_object,
                    ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>
        callback,
    glib.gpointer user_data,
  ) {
    return _secret_item_create(
      collection,
      schema,
      attributes,
      label,
      value,
      flags.value,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _secret_item_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<_SecretCollection>,
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<_SecretValue>,
              ffi.UnsignedInt,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>>('secret_item_create');
  late final _secret_item_create = _secret_item_createPtr.asFunction<
      void Function(
          ffi.Pointer<_SecretCollection>,
          ffi.Pointer<SecretSchema>,
          ffi.Pointer<glib.GHashTable>,
          ffi.Pointer<pkg_ffi.Utf8>,
          ffi.Pointer<_SecretValue>,
          int,
          ffi.Pointer<glib.GCancellable>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<_GObject> source_object,
                      ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
          glib.gpointer)>();

  ffi.Pointer<SecretItem> secret_item_create_finish(
    ffi.Pointer<_GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_create_finish(
      result,
      error,
    );
  }

  late final _secret_item_create_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<SecretItem> Function(ffi.Pointer<_GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_create_finish');
  late final _secret_item_create_finish =
      _secret_item_create_finishPtr.asFunction<
          ffi.Pointer<SecretItem> Function(ffi.Pointer<_GAsyncResult>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  ffi.Pointer<SecretItem> secret_item_create_sync(
    ffi.Pointer<_SecretCollection> collection,
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    ffi.Pointer<pkg_ffi.Utf8> label,
    ffi.Pointer<_SecretValue> value,
    SecretItemCreateFlags flags,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_create_sync(
      collection,
      schema,
      attributes,
      label,
      value,
      flags.value,
      cancellable,
      error,
    );
  }

  late final _secret_item_create_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<SecretItem> Function(
                  ffi.Pointer<_SecretCollection>,
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<glib.GHashTable>,
                  ffi.Pointer<pkg_ffi.Utf8>,
                  ffi.Pointer<_SecretValue>,
                  ffi.UnsignedInt,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_create_sync');
  late final _secret_item_create_sync = _secret_item_create_syncPtr.asFunction<
      ffi.Pointer<SecretItem> Function(
          ffi.Pointer<_SecretCollection>,
          ffi.Pointer<SecretSchema>,
          ffi.Pointer<glib.GHashTable>,
          ffi.Pointer<pkg_ffi.Utf8>,
          ffi.Pointer<_SecretValue>,
          int,
          ffi.Pointer<glib.GCancellable>,
          ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  void secret_item_delete(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_GObject> source_object,
                    ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>
        callback,
    glib.gpointer user_data,
  ) {
    return _secret_item_delete(
      self,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _secret_item_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>>('secret_item_delete');
  late final _secret_item_delete = _secret_item_deletePtr.asFunction<
      void Function(
          ffi.Pointer<SecretItem>,
          ffi.Pointer<glib.GCancellable>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<_GObject> source_object,
                      ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
          glib.gpointer)>();

  int secret_item_delete_finish(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<_GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_delete_finish(
      self,
      result,
      error,
    );
  }

  late final _secret_item_delete_finishPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<_GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_delete_finish');
  late final _secret_item_delete_finish =
      _secret_item_delete_finishPtr.asFunction<
          int Function(ffi.Pointer<SecretItem>, ffi.Pointer<_GAsyncResult>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_item_delete_sync(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_delete_sync(
      self,
      cancellable,
      error,
    );
  }

  late final _secret_item_delete_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_delete_sync');
  late final _secret_item_delete_sync = _secret_item_delete_syncPtr.asFunction<
      int Function(ffi.Pointer<SecretItem>, ffi.Pointer<glib.GCancellable>,
          ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  SecretItemFlags secret_item_get_flags(
    ffi.Pointer<SecretItem> self,
  ) {
    return SecretItemFlags.fromValue(_secret_item_get_flags(
      self,
    ));
  }

  late final _secret_item_get_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<SecretItem>)>>(
      'secret_item_get_flags');
  late final _secret_item_get_flags = _secret_item_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<SecretItem>)>();

  ffi.Pointer<_SecretService> secret_item_get_service(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_service(
      self,
    );
  }

  late final _secret_item_get_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_SecretService> Function(
              ffi.Pointer<SecretItem>)>>('secret_item_get_service');
  late final _secret_item_get_service = _secret_item_get_servicePtr.asFunction<
      ffi.Pointer<_SecretService> Function(ffi.Pointer<SecretItem>)>();

  ffi.Pointer<_SecretValue> secret_item_get_secret(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_secret(
      self,
    );
  }

  late final _secret_item_get_secretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_SecretValue> Function(
              ffi.Pointer<SecretItem>)>>('secret_item_get_secret');
  late final _secret_item_get_secret = _secret_item_get_secretPtr.asFunction<
      ffi.Pointer<_SecretValue> Function(ffi.Pointer<SecretItem>)>();

  void secret_item_load_secret(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_GObject> source_object,
                    ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>
        callback,
    glib.gpointer user_data,
  ) {
    return _secret_item_load_secret(
      self,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _secret_item_load_secretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>>('secret_item_load_secret');
  late final _secret_item_load_secret = _secret_item_load_secretPtr.asFunction<
      void Function(
          ffi.Pointer<SecretItem>,
          ffi.Pointer<glib.GCancellable>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<_GObject> source_object,
                      ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
          glib.gpointer)>();

  int secret_item_load_secret_finish(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<_GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_load_secret_finish(
      self,
      result,
      error,
    );
  }

  late final _secret_item_load_secret_finishPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<_GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_load_secret_finish');
  late final _secret_item_load_secret_finish =
      _secret_item_load_secret_finishPtr.asFunction<
          int Function(ffi.Pointer<SecretItem>, ffi.Pointer<_GAsyncResult>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_item_load_secret_sync(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_load_secret_sync(
      self,
      cancellable,
      error,
    );
  }

  late final _secret_item_load_secret_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_load_secret_sync');
  late final _secret_item_load_secret_sync =
      _secret_item_load_secret_syncPtr.asFunction<
          int Function(ffi.Pointer<SecretItem>, ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  void secret_item_load_secrets(
    ffi.Pointer<glib.GList> items,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_GObject> source_object,
                    ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>
        callback,
    glib.gpointer user_data,
  ) {
    return _secret_item_load_secrets(
      items,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _secret_item_load_secretsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<glib.GList>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>>('secret_item_load_secrets');
  late final _secret_item_load_secrets =
      _secret_item_load_secretsPtr.asFunction<
          void Function(
              ffi.Pointer<glib.GList>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>();

  int secret_item_load_secrets_finish(
    ffi.Pointer<_GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_load_secrets_finish(
      result,
      error,
    );
  }

  late final _secret_item_load_secrets_finishPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(ffi.Pointer<_GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_load_secrets_finish');
  late final _secret_item_load_secrets_finish =
      _secret_item_load_secrets_finishPtr.asFunction<
          int Function(ffi.Pointer<_GAsyncResult>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_item_load_secrets_sync(
    ffi.Pointer<glib.GList> items,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_load_secrets_sync(
      items,
      cancellable,
      error,
    );
  }

  late final _secret_item_load_secrets_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<glib.GList>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_load_secrets_sync');
  late final _secret_item_load_secrets_sync =
      _secret_item_load_secrets_syncPtr.asFunction<
          int Function(ffi.Pointer<glib.GList>, ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  void secret_item_set_secret(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<_SecretValue> value,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_GObject> source_object,
                    ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>
        callback,
    glib.gpointer user_data,
  ) {
    return _secret_item_set_secret(
      self,
      value,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _secret_item_set_secretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<_SecretValue>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>>('secret_item_set_secret');
  late final _secret_item_set_secret = _secret_item_set_secretPtr.asFunction<
      void Function(
          ffi.Pointer<SecretItem>,
          ffi.Pointer<_SecretValue>,
          ffi.Pointer<glib.GCancellable>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<_GObject> source_object,
                      ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
          glib.gpointer)>();

  int secret_item_set_secret_finish(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<_GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_set_secret_finish(
      self,
      result,
      error,
    );
  }

  late final _secret_item_set_secret_finishPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<_GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_set_secret_finish');
  late final _secret_item_set_secret_finish =
      _secret_item_set_secret_finishPtr.asFunction<
          int Function(ffi.Pointer<SecretItem>, ffi.Pointer<_GAsyncResult>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_item_set_secret_sync(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<_SecretValue> value,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_set_secret_sync(
      self,
      value,
      cancellable,
      error,
    );
  }

  late final _secret_item_set_secret_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<_SecretValue>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_set_secret_sync');
  late final _secret_item_set_secret_sync =
      _secret_item_set_secret_syncPtr.asFunction<
          int Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<_SecretValue>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  ffi.Pointer<pkg_ffi.Utf8> secret_item_get_schema_name(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_schema_name(
      self,
    );
  }

  late final _secret_item_get_schema_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Utf8> Function(
              ffi.Pointer<SecretItem>)>>('secret_item_get_schema_name');
  late final _secret_item_get_schema_name =
      _secret_item_get_schema_namePtr.asFunction<
          ffi.Pointer<pkg_ffi.Utf8> Function(ffi.Pointer<SecretItem>)>();

  ffi.Pointer<glib.GHashTable> secret_item_get_attributes(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_attributes(
      self,
    );
  }

  late final _secret_item_get_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<glib.GHashTable> Function(
              ffi.Pointer<SecretItem>)>>('secret_item_get_attributes');
  late final _secret_item_get_attributes =
      _secret_item_get_attributesPtr.asFunction<
          ffi.Pointer<glib.GHashTable> Function(ffi.Pointer<SecretItem>)>();

  void secret_item_set_attributes(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_GObject> source_object,
                    ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>
        callback,
    glib.gpointer user_data,
  ) {
    return _secret_item_set_attributes(
      self,
      schema,
      attributes,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _secret_item_set_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>>('secret_item_set_attributes');
  late final _secret_item_set_attributes =
      _secret_item_set_attributesPtr.asFunction<
          void Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>();

  int secret_item_set_attributes_finish(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<_GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_set_attributes_finish(
      self,
      result,
      error,
    );
  }

  late final _secret_item_set_attributes_finishPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<_GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_set_attributes_finish');
  late final _secret_item_set_attributes_finish =
      _secret_item_set_attributes_finishPtr.asFunction<
          int Function(ffi.Pointer<SecretItem>, ffi.Pointer<_GAsyncResult>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_item_set_attributes_sync(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_set_attributes_sync(
      self,
      schema,
      attributes,
      cancellable,
      error,
    );
  }

  late final _secret_item_set_attributes_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<glib.GHashTable>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_set_attributes_sync');
  late final _secret_item_set_attributes_sync =
      _secret_item_set_attributes_syncPtr.asFunction<
          int Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  ffi.Pointer<pkg_ffi.Utf8> secret_item_get_label(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_label(
      self,
    );
  }

  late final _secret_item_get_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Utf8> Function(
              ffi.Pointer<SecretItem>)>>('secret_item_get_label');
  late final _secret_item_get_label = _secret_item_get_labelPtr.asFunction<
      ffi.Pointer<pkg_ffi.Utf8> Function(ffi.Pointer<SecretItem>)>();

  void secret_item_set_label(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<pkg_ffi.Utf8> label,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_GObject> source_object,
                    ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>
        callback,
    glib.gpointer user_data,
  ) {
    return _secret_item_set_label(
      self,
      label,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _secret_item_set_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<_GObject> source_object,
                          ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
              glib.gpointer)>>('secret_item_set_label');
  late final _secret_item_set_label = _secret_item_set_labelPtr.asFunction<
      void Function(
          ffi.Pointer<SecretItem>,
          ffi.Pointer<pkg_ffi.Utf8>,
          ffi.Pointer<glib.GCancellable>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<_GObject> source_object,
                      ffi.Pointer<_GAsyncResult> res, glib.gpointer data)>>,
          glib.gpointer)>();

  int secret_item_set_label_finish(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<_GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_set_label_finish(
      self,
      result,
      error,
    );
  }

  late final _secret_item_set_label_finishPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<_GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_set_label_finish');
  late final _secret_item_set_label_finish =
      _secret_item_set_label_finishPtr.asFunction<
          int Function(ffi.Pointer<SecretItem>, ffi.Pointer<_GAsyncResult>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_item_set_label_sync(
    ffi.Pointer<SecretItem> self,
    ffi.Pointer<pkg_ffi.Utf8> label,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_item_set_label_sync(
      self,
      label,
      cancellable,
      error,
    );
  }

  late final _secret_item_set_label_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretItem>,
                  ffi.Pointer<pkg_ffi.Utf8>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_item_set_label_sync');
  late final _secret_item_set_label_sync =
      _secret_item_set_label_syncPtr.asFunction<
          int Function(
              ffi.Pointer<SecretItem>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_item_get_locked(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_locked(
      self,
    );
  }

  late final _secret_item_get_lockedPtr = _lookup<
          ffi.NativeFunction<glib.gboolean Function(ffi.Pointer<SecretItem>)>>(
      'secret_item_get_locked');
  late final _secret_item_get_locked = _secret_item_get_lockedPtr
      .asFunction<int Function(ffi.Pointer<SecretItem>)>();

  int secret_item_get_created(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_created(
      self,
    );
  }

  late final _secret_item_get_createdPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<SecretItem>)>>('secret_item_get_created');
  late final _secret_item_get_created = _secret_item_get_createdPtr
      .asFunction<int Function(ffi.Pointer<SecretItem>)>();

  int secret_item_get_modified(
    ffi.Pointer<SecretItem> self,
  ) {
    return _secret_item_get_modified(
      self,
    );
  }

  late final _secret_item_get_modifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<SecretItem>)>>('secret_item_get_modified');
  late final _secret_item_get_modified = _secret_item_get_modifiedPtr
      .asFunction<int Function(ffi.Pointer<SecretItem>)>();

  int secret_password_storev_sync(
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    ffi.Pointer<pkg_ffi.Utf8> collection,
    ffi.Pointer<pkg_ffi.Utf8> label,
    ffi.Pointer<pkg_ffi.Utf8> password,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_password_storev_sync(
      schema,
      attributes,
      collection,
      label,
      password,
      cancellable,
      error,
    );
  }

  late final _secret_password_storev_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<glib.GHashTable>,
                  ffi.Pointer<pkg_ffi.Utf8>,
                  ffi.Pointer<pkg_ffi.Utf8>,
                  ffi.Pointer<pkg_ffi.Utf8>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_password_storev_sync');
  late final _secret_password_storev_sync =
      _secret_password_storev_syncPtr.asFunction<
          int Function(
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  ffi.Pointer<pkg_ffi.Utf8> secret_password_lookupv_sync(
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_password_lookupv_sync(
      schema,
      attributes,
      cancellable,
      error,
    );
  }

  late final _secret_password_lookupv_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Utf8> Function(
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<glib.GHashTable>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_password_lookupv_sync');
  late final _secret_password_lookupv_sync =
      _secret_password_lookupv_syncPtr.asFunction<
          ffi.Pointer<pkg_ffi.Utf8> Function(
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  int secret_password_clearv_sync(
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_password_clearv_sync(
      schema,
      attributes,
      cancellable,
      error,
    );
  }

  late final _secret_password_clearv_syncPtr = _lookup<
          ffi.NativeFunction<
              glib.gboolean Function(
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<glib.GHashTable>,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_password_clearv_sync');
  late final _secret_password_clearv_sync =
      _secret_password_clearv_syncPtr.asFunction<
          int Function(
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  ffi.Pointer<glib.GList> secret_password_searchv_sync(
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<glib.GHashTable> attributes,
    SecretSearchFlags flags,
    ffi.Pointer<glib.GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<glib.GError>> error,
  ) {
    return _secret_password_searchv_sync(
      schema,
      attributes,
      flags.value,
      cancellable,
      error,
    );
  }

  late final _secret_password_searchv_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<glib.GList> Function(
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<glib.GHashTable>,
                  ffi.UnsignedInt,
                  ffi.Pointer<glib.GCancellable>,
                  ffi.Pointer<ffi.Pointer<glib.GError>>)>>(
      'secret_password_searchv_sync');
  late final _secret_password_searchv_sync =
      _secret_password_searchv_syncPtr.asFunction<
          ffi.Pointer<glib.GList> Function(
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<glib.GHashTable>,
              int,
              ffi.Pointer<glib.GCancellable>,
              ffi.Pointer<ffi.Pointer<glib.GError>>)>();

  void secret_password_free(
    ffi.Pointer<pkg_ffi.Utf8> password,
  ) {
    return _secret_password_free(
      password,
    );
  }

  late final _secret_password_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pkg_ffi.Utf8>)>>(
          'secret_password_free');
  late final _secret_password_free = _secret_password_freePtr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.Utf8>)>();
}

final class _GData extends ffi.Opaque {}

/// Basic Type Structures
/// /
/// /**
/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
final class _GTypeClass extends ffi.Struct {
  /// < private >
  @ffi.UnsignedLong()
  external int g_type;
}

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
final class _GTypeInstance extends ffi.Struct {
  /// < private >
  external ffi.Pointer<_GTypeClass> g_class;
}

final class _GObject extends ffi.Struct {
  external _GTypeInstance g_type_instance;

  /// (atomic)
  @ffi.UnsignedInt()
  external int ref_count;

  external ffi.Pointer<_GData> qdata;
}

enum SecretSchemaAttributeType {
  SECRET_SCHEMA_ATTRIBUTE_STRING(0),
  SECRET_SCHEMA_ATTRIBUTE_INTEGER(1),
  SECRET_SCHEMA_ATTRIBUTE_BOOLEAN(2);

  final int value;
  const SecretSchemaAttributeType(this.value);

  static SecretSchemaAttributeType fromValue(int value) => switch (value) {
        0 => SECRET_SCHEMA_ATTRIBUTE_STRING,
        1 => SECRET_SCHEMA_ATTRIBUTE_INTEGER,
        2 => SECRET_SCHEMA_ATTRIBUTE_BOOLEAN,
        _ => throw ArgumentError(
            'Unknown value for SecretSchemaAttributeType: $value'),
      };
}

final class SecretSchemaAttribute extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Utf8> name;

  @ffi.UnsignedInt()
  external int typeAsInt;

  SecretSchemaAttributeType get type =>
      SecretSchemaAttributeType.fromValue(typeAsInt);
}

enum SecretSchemaFlags {
  SECRET_SCHEMA_NONE(0),
  SECRET_SCHEMA_DONT_MATCH_NAME(2);

  final int value;
  const SecretSchemaFlags(this.value);

  static SecretSchemaFlags fromValue(int value) => switch (value) {
        0 => SECRET_SCHEMA_NONE,
        2 => SECRET_SCHEMA_DONT_MATCH_NAME,
        _ => throw ArgumentError('Unknown value for SecretSchemaFlags: $value'),
      };
}

final class SecretSchema extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Utf8> name;

  @ffi.UnsignedInt()
  external int flagsAsInt;

  SecretSchemaFlags get flags => SecretSchemaFlags.fromValue(flagsAsInt);

  @ffi.Array.multi([32])
  external ffi.Array<SecretSchemaAttribute> attributes;

  /// <private>
  @glib.gint()
  external int reserved;

  external glib.gpointer reserved1;

  external glib.gpointer reserved2;

  external glib.gpointer reserved3;

  external glib.gpointer reserved4;

  external glib.gpointer reserved5;

  external glib.gpointer reserved6;

  external glib.gpointer reserved7;
}

final class _GAsyncResult extends ffi.Opaque {}

final class _GDBusProxyPrivate extends ffi.Opaque {}

final class _GDBusProxy extends ffi.Struct {
  /// < private >
  external _GObject parent_instance;

  external ffi.Pointer<_GDBusProxyPrivate> priv;
}

enum SecretSearchFlags {
  SECRET_SEARCH_NONE(0),
  SECRET_SEARCH_ALL(2),
  SECRET_SEARCH_UNLOCK(4),
  SECRET_SEARCH_LOAD_SECRETS(8);

  final int value;
  const SecretSearchFlags(this.value);

  static SecretSearchFlags fromValue(int value) => switch (value) {
        0 => SECRET_SEARCH_NONE,
        2 => SECRET_SEARCH_ALL,
        4 => SECRET_SEARCH_UNLOCK,
        8 => SECRET_SEARCH_LOAD_SECRETS,
        _ => throw ArgumentError('Unknown value for SecretSearchFlags: $value'),
      };
}

final class _SecretValue extends ffi.Opaque {}

final class _SecretCollectionPrivate extends ffi.Opaque {}

final class _SecretCollection extends ffi.Struct {
  external _GDBusProxy parent;

  /// < private >
  external ffi.Pointer<_SecretCollectionPrivate> pv;
}

final class _SecretServicePrivate extends ffi.Opaque {}

final class _SecretService extends ffi.Struct {
  external _GDBusProxy parent;

  /// < private >
  external ffi.Pointer<_SecretServicePrivate> pv;
}

final class _SecretItemPrivate extends ffi.Opaque {}

final class _SecretItem extends ffi.Struct {
  external _GDBusProxy parent_instance;

  /// < private >
  external ffi.Pointer<_SecretItemPrivate> pv;
}

typedef SecretItem = _SecretItem;

enum SecretItemFlags {
  SECRET_ITEM_NONE(0),
  SECRET_ITEM_LOAD_SECRET(2);

  final int value;
  const SecretItemFlags(this.value);

  static SecretItemFlags fromValue(int value) => switch (value) {
        0 => SECRET_ITEM_NONE,
        2 => SECRET_ITEM_LOAD_SECRET,
        _ => throw ArgumentError('Unknown value for SecretItemFlags: $value'),
      };
}

enum SecretItemCreateFlags {
  SECRET_ITEM_CREATE_NONE(0),
  SECRET_ITEM_CREATE_REPLACE(2);

  final int value;
  const SecretItemCreateFlags(this.value);

  static SecretItemCreateFlags fromValue(int value) => switch (value) {
        0 => SECRET_ITEM_CREATE_NONE,
        2 => SECRET_ITEM_CREATE_REPLACE,
        _ => throw ArgumentError(
            'Unknown value for SecretItemCreateFlags: $value'),
      };
}

const String SECRET_COLLECTION_DEFAULT = 'default';

const String SECRET_COLLECTION_SESSION = 'session';
